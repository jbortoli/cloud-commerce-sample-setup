{"version":3,"file":"node_modules_spartacus_user_fesm2020_spartacus-user-profile_mjs.js","mappings":"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","sources":["./node_modules/@spartacus/user/fesm2020/spartacus-user-profile-components.mjs","./node_modules/@spartacus/user/fesm2020/spartacus-user-profile-core.mjs","./node_modules/@spartacus/user/fesm2020/spartacus-user-profile-occ.mjs","./node_modules/@spartacus/user/fesm2020/spartacus-user-profile.mjs"],"sourcesContent":["import * as i2$1 from '@angular/common';\nimport { CommonModule } from '@angular/common';\nimport * as i0 from '@angular/core';\nimport { Component, ChangeDetectionStrategy, HostListener, ViewChild, NgModule, Injectable } from '@angular/core';\nimport * as i5 from '@angular/router';\nimport { RouterModule } from '@angular/router';\nimport * as i2 from '@spartacus/core';\nimport { GlobalMessageType, UrlModule, I18nModule, provideDefaultConfig, AuthGuard, OAuthFlow, NotAuthGuard, RoutingService, AuthConfigService, GlobalMessageService, HttpErrorModel, AuthService, AuthRedirectService } from '@spartacus/core';\nimport * as i4 from '@spartacus/storefront';\nimport { ICON_TYPE, DIALOG_TYPE, IconModule, SpinnerModule, KeyboardFocusModule, CustomFormValidators, FormErrorsModule, sortTitles, NgSelectA11yModule, PasswordVisibilityToggleModule } from '@spartacus/storefront';\nimport { BehaviorSubject, Subscription, combineLatest } from 'rxjs';\nimport { first, take, tap, map, filter, switchMap } from 'rxjs/operators';\nimport * as i1 from '@spartacus/user/profile/root';\nimport { UserPasswordFacade, UserRegisterFacade, UserEmailFacade, UserProfileFacade } from '@spartacus/user/profile/root';\nimport * as i3 from '@angular/forms';\nimport { UntypedFormGroup, UntypedFormControl, Validators, ReactiveFormsModule, UntypedFormBuilder, FormsModule } from '@angular/forms';\nimport * as i6 from '@ng-select/ng-select';\nimport { NgSelectModule } from '@ng-select/ng-select';\n\n/*\n * SPDX-FileCopyrightText: 2023 SAP Spartacus team <spartacus-team@sap.com>\n *\n * SPDX-License-Identifier: Apache-2.0\n */\nclass CloseAccountModalComponent {\n    handleClick(event) {\n        if (event.target.tagName === this.el.nativeElement.tagName) {\n            this.dismissModal('Cross click');\n        }\n    }\n    constructor(authService, globalMessageService, routingService, translationService, userProfile, launchDialogService, el) {\n        this.authService = authService;\n        this.globalMessageService = globalMessageService;\n        this.routingService = routingService;\n        this.translationService = translationService;\n        this.userProfile = userProfile;\n        this.launchDialogService = launchDialogService;\n        this.el = el;\n        this.iconTypes = ICON_TYPE;\n        this.focusConfig = {\n            trap: true,\n            block: true,\n            autofocus: 'button',\n            focusOnEscape: true,\n        };\n        this.loading$ = new BehaviorSubject(false);\n    }\n    get isLoading$() {\n        return this.loading$.asObservable();\n    }\n    ngOnInit() {\n        this.isLoggedIn$ = this.authService.isUserLoggedIn();\n    }\n    onSuccess() {\n        this.dismissModal('Success');\n        this.translationService\n            .translate('closeAccount.accountClosedSuccessfully')\n            .pipe(first())\n            .subscribe((text) => {\n            this.globalMessageService.add(text, GlobalMessageType.MSG_TYPE_CONFIRMATION);\n        });\n        this.authService.coreLogout().then(() => {\n            this.routingService.go({ cxRoute: 'home' });\n        });\n    }\n    onError() {\n        this.dismissModal('Error');\n        this.translationService\n            .translate('closeAccount.accountClosedFailure')\n            .pipe(first())\n            .subscribe((text) => {\n            this.globalMessageService.add(text, GlobalMessageType.MSG_TYPE_ERROR);\n        });\n    }\n    dismissModal(reason) {\n        this.launchDialogService.closeDialog(reason);\n    }\n    closeAccount() {\n        this.loading$.next(true);\n        this.userProfile.close().subscribe({\n            next: () => {\n                this.onSuccess();\n                this.loading$.next(false);\n            },\n            error: () => {\n                this.onError();\n                this.loading$.next(false);\n            },\n        });\n    }\n}\nCloseAccountModalComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"15.2.4\", ngImport: i0, type: CloseAccountModalComponent, deps: [{ token: i2.AuthService }, { token: i2.GlobalMessageService }, { token: i2.RoutingService }, { token: i2.TranslationService }, { token: i1.UserProfileFacade }, { token: i4.LaunchDialogService }, { token: i0.ElementRef }], target: i0.ɵɵFactoryTarget.Component });\nCloseAccountModalComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"14.0.0\", version: \"15.2.4\", type: CloseAccountModalComponent, selector: \"cx-close-account-modal\", host: { listeners: { \"click\": \"handleClick($event)\" } }, ngImport: i0, template: \"<ng-container *ngIf=\\\"isLoggedIn$ | async\\\">\\n  <div\\n    class=\\\"cx-close-account-modal\\\"\\n    [cxFocus]=\\\"focusConfig\\\"\\n    (esc)=\\\"dismissModal('Escape click')\\\"\\n  >\\n    <div class=\\\"cx-close-account-modal-container\\\">\\n      <div class=\\\"cx-close-account-modal-header cx-modal-header\\\">\\n        <h3 class=\\\"cx-close-account-modal-title\\\">\\n          {{ 'closeAccount.confirmAccountClosure' | cxTranslate }}\\n        </h3>\\n        <button\\n          type=\\\"button\\\"\\n          class=\\\"close\\\"\\n          [attr.aria-label]=\\\"'common.close' | cxTranslate\\\"\\n          (click)=\\\"dismissModal('Cross click')\\\"\\n        >\\n          <span aria-hidden=\\\"true\\\">\\n            <cx-icon [type]=\\\"iconTypes.CLOSE\\\"></cx-icon>\\n          </span>\\n        </button>\\n      </div>\\n\\n      <div *ngIf=\\\"isLoading$ | async; else loaded\\\">\\n        <div class=\\\"cx-spinner\\\">\\n          <cx-spinner> </cx-spinner>\\n        </div>\\n      </div>\\n\\n      <ng-template #loaded>\\n        <div class=\\\"cx-close-account-modal-body modal-body\\\">\\n          <p class=\\\"cx-confirmation\\\">\\n            {{ 'closeAccount.confirmAccountClosureMessage' | cxTranslate }}\\n          </p>\\n        </div>\\n        <div class=\\\"cx-close-account-modal-footer cx-modal-footer\\\">\\n          <button class=\\\"btn btn-primary\\\" (click)=\\\"closeAccount()\\\">\\n            {{ 'closeAccount.closeMyAccount' | cxTranslate }}\\n          </button>\\n          <button\\n            (click)=\\\"dismissModal('Cancel')\\\"\\n            class=\\\"btn btn-block btn-secondary\\\"\\n          >\\n            {{ 'common.cancel' | cxTranslate }}\\n          </button>\\n        </div>\\n      </ng-template>\\n    </div>\\n  </div>\\n</ng-container>\\n\", dependencies: [{ kind: \"directive\", type: i2$1.NgIf, selector: \"[ngIf]\", inputs: [\"ngIf\", \"ngIfThen\", \"ngIfElse\"] }, { kind: \"component\", type: i4.IconComponent, selector: \"cx-icon,[cxIcon]\", inputs: [\"cxIcon\", \"type\"] }, { kind: \"component\", type: i4.SpinnerComponent, selector: \"cx-spinner\" }, { kind: \"directive\", type: i4.FocusDirective, selector: \"[cxFocus]\", inputs: [\"cxFocus\"] }, { kind: \"pipe\", type: i2$1.AsyncPipe, name: \"async\" }, { kind: \"pipe\", type: i2.TranslatePipe, name: \"cxTranslate\" }], changeDetection: i0.ChangeDetectionStrategy.OnPush });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"15.2.4\", ngImport: i0, type: CloseAccountModalComponent, decorators: [{\n            type: Component,\n            args: [{ selector: 'cx-close-account-modal', changeDetection: ChangeDetectionStrategy.OnPush, template: \"<ng-container *ngIf=\\\"isLoggedIn$ | async\\\">\\n  <div\\n    class=\\\"cx-close-account-modal\\\"\\n    [cxFocus]=\\\"focusConfig\\\"\\n    (esc)=\\\"dismissModal('Escape click')\\\"\\n  >\\n    <div class=\\\"cx-close-account-modal-container\\\">\\n      <div class=\\\"cx-close-account-modal-header cx-modal-header\\\">\\n        <h3 class=\\\"cx-close-account-modal-title\\\">\\n          {{ 'closeAccount.confirmAccountClosure' | cxTranslate }}\\n        </h3>\\n        <button\\n          type=\\\"button\\\"\\n          class=\\\"close\\\"\\n          [attr.aria-label]=\\\"'common.close' | cxTranslate\\\"\\n          (click)=\\\"dismissModal('Cross click')\\\"\\n        >\\n          <span aria-hidden=\\\"true\\\">\\n            <cx-icon [type]=\\\"iconTypes.CLOSE\\\"></cx-icon>\\n          </span>\\n        </button>\\n      </div>\\n\\n      <div *ngIf=\\\"isLoading$ | async; else loaded\\\">\\n        <div class=\\\"cx-spinner\\\">\\n          <cx-spinner> </cx-spinner>\\n        </div>\\n      </div>\\n\\n      <ng-template #loaded>\\n        <div class=\\\"cx-close-account-modal-body modal-body\\\">\\n          <p class=\\\"cx-confirmation\\\">\\n            {{ 'closeAccount.confirmAccountClosureMessage' | cxTranslate }}\\n          </p>\\n        </div>\\n        <div class=\\\"cx-close-account-modal-footer cx-modal-footer\\\">\\n          <button class=\\\"btn btn-primary\\\" (click)=\\\"closeAccount()\\\">\\n            {{ 'closeAccount.closeMyAccount' | cxTranslate }}\\n          </button>\\n          <button\\n            (click)=\\\"dismissModal('Cancel')\\\"\\n            class=\\\"btn btn-block btn-secondary\\\"\\n          >\\n            {{ 'common.cancel' | cxTranslate }}\\n          </button>\\n        </div>\\n      </ng-template>\\n    </div>\\n  </div>\\n</ng-container>\\n\" }]\n        }], ctorParameters: function () { return [{ type: i2.AuthService }, { type: i2.GlobalMessageService }, { type: i2.RoutingService }, { type: i2.TranslationService }, { type: i1.UserProfileFacade }, { type: i4.LaunchDialogService }, { type: i0.ElementRef }]; }, propDecorators: { handleClick: [{\n                type: HostListener,\n                args: ['click', ['$event']]\n            }] } });\n\n/*\n * SPDX-FileCopyrightText: 2023 SAP Spartacus team <spartacus-team@sap.com>\n *\n * SPDX-License-Identifier: Apache-2.0\n */\nconst defaultCloseDialogModalLayoutConfig = {\n    launch: {\n        CLOSE_ACCOUNT: {\n            inline: true,\n            component: CloseAccountModalComponent,\n            dialogType: DIALOG_TYPE.DIALOG,\n        },\n    },\n};\n\n/*\n * SPDX-FileCopyrightText: 2023 SAP Spartacus team <spartacus-team@sap.com>\n *\n * SPDX-License-Identifier: Apache-2.0\n */\nclass CloseAccountComponent {\n    constructor(launchDialogService, vcr) {\n        this.launchDialogService = launchDialogService;\n        this.vcr = vcr;\n    }\n    openModal() {\n        const dialog = this.launchDialogService.openDialog(\"CLOSE_ACCOUNT\" /* LAUNCH_CALLER.CLOSE_ACCOUNT */, this.element, this.vcr);\n        dialog?.pipe(take(1)).subscribe();\n    }\n}\nCloseAccountComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"15.2.4\", ngImport: i0, type: CloseAccountComponent, deps: [{ token: i4.LaunchDialogService }, { token: i0.ViewContainerRef }], target: i0.ɵɵFactoryTarget.Component });\nCloseAccountComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"14.0.0\", version: \"15.2.4\", type: CloseAccountComponent, selector: \"cx-close-account\", viewQueries: [{ propertyName: \"element\", first: true, predicate: [\"element\"], descendants: true }], ngImport: i0, template: \"<div class=\\\"col-lg-8 col-md-9\\\">\\n  <div class=\\\"row cx-btn-group\\\">\\n    <div class=\\\"col-sm-6\\\">\\n      <a\\n        [routerLink]=\\\"{ cxRoute: 'home' } | cxUrl\\\"\\n        class=\\\"btn btn-block btn-secondary\\\"\\n        >{{ 'common.cancel' | cxTranslate }}</a\\n      >\\n    </div>\\n    <div class=\\\"col-sm-6\\\">\\n      <button #element class=\\\"btn btn-block btn-primary\\\" (click)=\\\"openModal()\\\">\\n        {{ 'closeAccount.closeMyAccount' | cxTranslate }}\\n      </button>\\n    </div>\\n  </div>\\n</div>\\n\", dependencies: [{ kind: \"directive\", type: i5.RouterLink, selector: \"[routerLink]\", inputs: [\"target\", \"queryParams\", \"fragment\", \"queryParamsHandling\", \"state\", \"relativeTo\", \"preserveFragment\", \"skipLocationChange\", \"replaceUrl\", \"routerLink\"] }, { kind: \"pipe\", type: i2.UrlPipe, name: \"cxUrl\" }, { kind: \"pipe\", type: i2.TranslatePipe, name: \"cxTranslate\" }], changeDetection: i0.ChangeDetectionStrategy.OnPush });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"15.2.4\", ngImport: i0, type: CloseAccountComponent, decorators: [{\n            type: Component,\n            args: [{ selector: 'cx-close-account', changeDetection: ChangeDetectionStrategy.OnPush, template: \"<div class=\\\"col-lg-8 col-md-9\\\">\\n  <div class=\\\"row cx-btn-group\\\">\\n    <div class=\\\"col-sm-6\\\">\\n      <a\\n        [routerLink]=\\\"{ cxRoute: 'home' } | cxUrl\\\"\\n        class=\\\"btn btn-block btn-secondary\\\"\\n        >{{ 'common.cancel' | cxTranslate }}</a\\n      >\\n    </div>\\n    <div class=\\\"col-sm-6\\\">\\n      <button #element class=\\\"btn btn-block btn-primary\\\" (click)=\\\"openModal()\\\">\\n        {{ 'closeAccount.closeMyAccount' | cxTranslate }}\\n      </button>\\n    </div>\\n  </div>\\n</div>\\n\" }]\n        }], ctorParameters: function () { return [{ type: i4.LaunchDialogService }, { type: i0.ViewContainerRef }]; }, propDecorators: { element: [{\n                type: ViewChild,\n                args: ['element']\n            }] } });\n\n/*\n * SPDX-FileCopyrightText: 2023 SAP Spartacus team <spartacus-team@sap.com>\n *\n * SPDX-License-Identifier: Apache-2.0\n */\nclass CloseAccountModule {\n}\nCloseAccountModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"15.2.4\", ngImport: i0, type: CloseAccountModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });\nCloseAccountModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"14.0.0\", version: \"15.2.4\", ngImport: i0, type: CloseAccountModule, declarations: [CloseAccountComponent, CloseAccountModalComponent], imports: [CommonModule,\n        RouterModule,\n        UrlModule,\n        I18nModule,\n        IconModule,\n        SpinnerModule,\n        KeyboardFocusModule] });\nCloseAccountModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"15.2.4\", ngImport: i0, type: CloseAccountModule, providers: [\n        provideDefaultConfig({\n            cmsComponents: {\n                CloseAccountComponent: {\n                    component: CloseAccountComponent,\n                    guards: [AuthGuard],\n                },\n            },\n        }),\n        provideDefaultConfig(defaultCloseDialogModalLayoutConfig),\n    ], imports: [CommonModule,\n        RouterModule,\n        UrlModule,\n        I18nModule,\n        IconModule,\n        SpinnerModule,\n        KeyboardFocusModule] });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"15.2.4\", ngImport: i0, type: CloseAccountModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    imports: [\n                        CommonModule,\n                        RouterModule,\n                        UrlModule,\n                        I18nModule,\n                        IconModule,\n                        SpinnerModule,\n                        KeyboardFocusModule,\n                    ],\n                    providers: [\n                        provideDefaultConfig({\n                            cmsComponents: {\n                                CloseAccountComponent: {\n                                    component: CloseAccountComponent,\n                                    guards: [AuthGuard],\n                                },\n                            },\n                        }),\n                        provideDefaultConfig(defaultCloseDialogModalLayoutConfig),\n                    ],\n                    declarations: [CloseAccountComponent, CloseAccountModalComponent],\n                }]\n        }] });\n\n/*\n * SPDX-FileCopyrightText: 2023 SAP Spartacus team <spartacus-team@sap.com>\n *\n * SPDX-License-Identifier: Apache-2.0\n */\n\n/*\n * SPDX-FileCopyrightText: 2023 SAP Spartacus team <spartacus-team@sap.com>\n *\n * SPDX-License-Identifier: Apache-2.0\n */\nclass ForgotPasswordComponentService {\n    constructor(userPasswordService, routingService, authConfigService, globalMessage) {\n        this.userPasswordService = userPasswordService;\n        this.routingService = routingService;\n        this.authConfigService = authConfigService;\n        this.globalMessage = globalMessage;\n        this.busy$ = new BehaviorSubject(false);\n        this.isUpdating$ = this.busy$.pipe(tap((state) => (state === true ? this.form.disable() : this.form.enable())));\n        this.form = new UntypedFormGroup({\n            userEmail: new UntypedFormControl('', [\n                Validators.required,\n                CustomFormValidators.emailValidator,\n            ]),\n        });\n    }\n    /**\n     * Sends an email to the user to reset the password.\n     *\n     * When the `ResourceOwnerPasswordFlow` is used, the user is routed\n     * to the login page.\n     */\n    requestEmail() {\n        if (!this.form.valid) {\n            this.form.markAllAsTouched();\n            return;\n        }\n        this.busy$.next(true);\n        this.userPasswordService\n            .requestForgotPasswordEmail(this.form.value.userEmail)\n            .subscribe({\n            next: () => this.onSuccess(),\n            error: (error) => this.onError(error),\n        });\n    }\n    onSuccess() {\n        this.globalMessage.add({ key: 'forgottenPassword.passwordResetEmailSent' }, GlobalMessageType.MSG_TYPE_CONFIRMATION);\n        this.busy$.next(false);\n        this.form.reset();\n        this.redirect();\n    }\n    onError(_error) {\n        this.busy$.next(false);\n    }\n    /**\n     * Redirects the user back to the login page.\n     *\n     * This only happens in case of the `ResourceOwnerPasswordFlow` OAuth flow.\n     */\n    redirect() {\n        if (this.authConfigService.getOAuthFlow() ===\n            OAuthFlow.ResourceOwnerPasswordFlow) {\n            this.routingService.go({ cxRoute: 'login' });\n        }\n    }\n}\nForgotPasswordComponentService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"15.2.4\", ngImport: i0, type: ForgotPasswordComponentService, deps: [{ token: i1.UserPasswordFacade }, { token: i2.RoutingService }, { token: i2.AuthConfigService }, { token: i2.GlobalMessageService }], target: i0.ɵɵFactoryTarget.Injectable });\nForgotPasswordComponentService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"15.2.4\", ngImport: i0, type: ForgotPasswordComponentService });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"15.2.4\", ngImport: i0, type: ForgotPasswordComponentService, decorators: [{\n            type: Injectable\n        }], ctorParameters: function () { return [{ type: i1.UserPasswordFacade }, { type: i2.RoutingService }, { type: i2.AuthConfigService }, { type: i2.GlobalMessageService }]; } });\n\n/*\n * SPDX-FileCopyrightText: 2023 SAP Spartacus team <spartacus-team@sap.com>\n *\n * SPDX-License-Identifier: Apache-2.0\n */\nclass ForgotPasswordComponent {\n    constructor(service) {\n        this.service = service;\n        this.form = this.service.form;\n        this.isUpdating$ = this.service.isUpdating$;\n    }\n    onSubmit() {\n        this.service.requestEmail();\n    }\n}\nForgotPasswordComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"15.2.4\", ngImport: i0, type: ForgotPasswordComponent, deps: [{ token: ForgotPasswordComponentService }], target: i0.ɵɵFactoryTarget.Component });\nForgotPasswordComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"14.0.0\", version: \"15.2.4\", type: ForgotPasswordComponent, selector: \"cx-forgot-password\", ngImport: i0, template: \"<cx-spinner class=\\\"overlay\\\" *ngIf=\\\"isUpdating$ | async\\\"> </cx-spinner>\\n\\n<form (ngSubmit)=\\\"onSubmit()\\\" [formGroup]=\\\"form\\\">\\n  <label>\\n    <span class=\\\"label-content\\\">{{\\n      'forgottenPassword.emailAddress.label' | cxTranslate\\n    }}</span>\\n    <input\\n      required=\\\"true\\\"\\n      type=\\\"email\\\"\\n      class=\\\"form-control\\\"\\n      placeholder=\\\"{{\\n        'forgottenPassword.emailAddress.placeholder' | cxTranslate\\n      }}\\\"\\n      formControlName=\\\"userEmail\\\"\\n    />\\n    <cx-form-errors [control]=\\\"form.get('userEmail')\\\"></cx-form-errors>\\n  </label>\\n\\n  <a\\n    class=\\\"btn btn-block btn-secondary\\\"\\n    [routerLink]=\\\"{ cxRoute: 'login' } | cxUrl\\\"\\n    >{{ 'common.cancel' | cxTranslate }}</a\\n  >\\n  <button class=\\\"btn btn-block btn-primary\\\" [disabled]=\\\"form.disabled\\\">\\n    {{ 'common.submit' | cxTranslate }}\\n  </button>\\n</form>\\n\", dependencies: [{ kind: \"directive\", type: i2$1.NgIf, selector: \"[ngIf]\", inputs: [\"ngIf\", \"ngIfThen\", \"ngIfElse\"] }, { kind: \"directive\", type: i3.ɵNgNoValidate, selector: \"form:not([ngNoForm]):not([ngNativeValidate])\" }, { kind: \"directive\", type: i3.DefaultValueAccessor, selector: \"input:not([type=checkbox])[formControlName],textarea[formControlName],input:not([type=checkbox])[formControl],textarea[formControl],input:not([type=checkbox])[ngModel],textarea[ngModel],[ngDefaultControl]\" }, { kind: \"directive\", type: i3.NgControlStatus, selector: \"[formControlName],[ngModel],[formControl]\" }, { kind: \"directive\", type: i3.NgControlStatusGroup, selector: \"[formGroupName],[formArrayName],[ngModelGroup],[formGroup],form:not([ngNoForm]),[ngForm]\" }, { kind: \"directive\", type: i3.RequiredValidator, selector: \":not([type=checkbox])[required][formControlName],:not([type=checkbox])[required][formControl],:not([type=checkbox])[required][ngModel]\", inputs: [\"required\"] }, { kind: \"directive\", type: i3.FormGroupDirective, selector: \"[formGroup]\", inputs: [\"formGroup\"], outputs: [\"ngSubmit\"], exportAs: [\"ngForm\"] }, { kind: \"directive\", type: i3.FormControlName, selector: \"[formControlName]\", inputs: [\"formControlName\", \"disabled\", \"ngModel\"], outputs: [\"ngModelChange\"] }, { kind: \"directive\", type: i5.RouterLink, selector: \"[routerLink]\", inputs: [\"target\", \"queryParams\", \"fragment\", \"queryParamsHandling\", \"state\", \"relativeTo\", \"preserveFragment\", \"skipLocationChange\", \"replaceUrl\", \"routerLink\"] }, { kind: \"component\", type: i4.FormErrorsComponent, selector: \"cx-form-errors\", inputs: [\"prefix\", \"translationParams\", \"control\"] }, { kind: \"component\", type: i4.SpinnerComponent, selector: \"cx-spinner\" }, { kind: \"pipe\", type: i2$1.AsyncPipe, name: \"async\" }, { kind: \"pipe\", type: i2.UrlPipe, name: \"cxUrl\" }, { kind: \"pipe\", type: i2.TranslatePipe, name: \"cxTranslate\" }], changeDetection: i0.ChangeDetectionStrategy.OnPush });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"15.2.4\", ngImport: i0, type: ForgotPasswordComponent, decorators: [{\n            type: Component,\n            args: [{ selector: 'cx-forgot-password', changeDetection: ChangeDetectionStrategy.OnPush, template: \"<cx-spinner class=\\\"overlay\\\" *ngIf=\\\"isUpdating$ | async\\\"> </cx-spinner>\\n\\n<form (ngSubmit)=\\\"onSubmit()\\\" [formGroup]=\\\"form\\\">\\n  <label>\\n    <span class=\\\"label-content\\\">{{\\n      'forgottenPassword.emailAddress.label' | cxTranslate\\n    }}</span>\\n    <input\\n      required=\\\"true\\\"\\n      type=\\\"email\\\"\\n      class=\\\"form-control\\\"\\n      placeholder=\\\"{{\\n        'forgottenPassword.emailAddress.placeholder' | cxTranslate\\n      }}\\\"\\n      formControlName=\\\"userEmail\\\"\\n    />\\n    <cx-form-errors [control]=\\\"form.get('userEmail')\\\"></cx-form-errors>\\n  </label>\\n\\n  <a\\n    class=\\\"btn btn-block btn-secondary\\\"\\n    [routerLink]=\\\"{ cxRoute: 'login' } | cxUrl\\\"\\n    >{{ 'common.cancel' | cxTranslate }}</a\\n  >\\n  <button class=\\\"btn btn-block btn-primary\\\" [disabled]=\\\"form.disabled\\\">\\n    {{ 'common.submit' | cxTranslate }}\\n  </button>\\n</form>\\n\" }]\n        }], ctorParameters: function () { return [{ type: ForgotPasswordComponentService }]; } });\n\n/*\n * SPDX-FileCopyrightText: 2023 SAP Spartacus team <spartacus-team@sap.com>\n *\n * SPDX-License-Identifier: Apache-2.0\n */\nclass ForgotPasswordModule {\n}\nForgotPasswordModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"15.2.4\", ngImport: i0, type: ForgotPasswordModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });\nForgotPasswordModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"14.0.0\", version: \"15.2.4\", ngImport: i0, type: ForgotPasswordModule, declarations: [ForgotPasswordComponent], imports: [CommonModule,\n        ReactiveFormsModule,\n        RouterModule,\n        UrlModule,\n        I18nModule,\n        FormErrorsModule,\n        SpinnerModule] });\nForgotPasswordModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"15.2.4\", ngImport: i0, type: ForgotPasswordModule, providers: [\n        provideDefaultConfig({\n            cmsComponents: {\n                ForgotPasswordComponent: {\n                    component: ForgotPasswordComponent,\n                    guards: [NotAuthGuard],\n                    providers: [\n                        {\n                            provide: ForgotPasswordComponentService,\n                            useClass: ForgotPasswordComponentService,\n                            deps: [\n                                UserPasswordFacade,\n                                RoutingService,\n                                AuthConfigService,\n                                GlobalMessageService,\n                            ],\n                        },\n                    ],\n                },\n            },\n        }),\n    ], imports: [CommonModule,\n        ReactiveFormsModule,\n        RouterModule,\n        UrlModule,\n        I18nModule,\n        FormErrorsModule,\n        SpinnerModule] });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"15.2.4\", ngImport: i0, type: ForgotPasswordModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    imports: [\n                        CommonModule,\n                        ReactiveFormsModule,\n                        RouterModule,\n                        UrlModule,\n                        I18nModule,\n                        FormErrorsModule,\n                        SpinnerModule,\n                    ],\n                    providers: [\n                        provideDefaultConfig({\n                            cmsComponents: {\n                                ForgotPasswordComponent: {\n                                    component: ForgotPasswordComponent,\n                                    guards: [NotAuthGuard],\n                                    providers: [\n                                        {\n                                            provide: ForgotPasswordComponentService,\n                                            useClass: ForgotPasswordComponentService,\n                                            deps: [\n                                                UserPasswordFacade,\n                                                RoutingService,\n                                                AuthConfigService,\n                                                GlobalMessageService,\n                                            ],\n                                        },\n                                    ],\n                                },\n                            },\n                        }),\n                    ],\n                    declarations: [ForgotPasswordComponent],\n                }]\n        }] });\n\n/*\n * SPDX-FileCopyrightText: 2023 SAP Spartacus team <spartacus-team@sap.com>\n *\n * SPDX-License-Identifier: Apache-2.0\n */\n\n/*\n * SPDX-FileCopyrightText: 2023 SAP Spartacus team <spartacus-team@sap.com>\n *\n * SPDX-License-Identifier: Apache-2.0\n */\nclass RegisterComponentService {\n    constructor(userRegisterFacade, globalMessageService, fb) {\n        this.userRegisterFacade = userRegisterFacade;\n        this.globalMessageService = globalMessageService;\n        this.fb = fb;\n    }\n    /**\n     * Register a new user.\n     *\n     * @param user as UserSignUp\n     */\n    register(user) {\n        return this.userRegisterFacade.register(user);\n    }\n    /**\n     * Returns titles that can be used for the user profiles.\n     */\n    getTitles() {\n        return this.userRegisterFacade.getTitles();\n    }\n    /**\n     * Show the message after successful registration.\n     */\n    postRegisterMessage() {\n        this.globalMessageService.add({ key: 'register.postRegisterMessage' }, GlobalMessageType.MSG_TYPE_CONFIRMATION);\n    }\n    /**\n     * Get if any additional consents needs to be provided during registration\n     * In core feature, no additional consents are necessary during registration.\n     * In integration scenarios, eg: cdc, this method will be overridden to return\n     * necessary cdc consents\n     */\n    getAdditionalConsents() {\n        return [];\n    }\n    /**\n     * Generate form control if any additional consents that needs to be provided during registration\n     * In core feature, no additional consents are necessary during registration.\n     * In integration scenarios, eg: cdc, this method will be overridden to return\n     * form controls for necessary cdc consents\n     */\n    generateAdditionalConsentsFormControl() {\n        return this.fb?.array([]) ?? undefined;\n    }\n}\nRegisterComponentService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"15.2.4\", ngImport: i0, type: RegisterComponentService, deps: [{ token: i1.UserRegisterFacade }, { token: i2.GlobalMessageService }, { token: i3.UntypedFormBuilder }], target: i0.ɵɵFactoryTarget.Injectable });\nRegisterComponentService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"15.2.4\", ngImport: i0, type: RegisterComponentService });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"15.2.4\", ngImport: i0, type: RegisterComponentService, decorators: [{\n            type: Injectable\n        }], ctorParameters: function () { return [{ type: i1.UserRegisterFacade }, { type: i2.GlobalMessageService }, { type: i3.UntypedFormBuilder }]; } });\n\n/*\n * SPDX-FileCopyrightText: 2023 SAP Spartacus team <spartacus-team@sap.com>\n *\n * SPDX-License-Identifier: Apache-2.0\n */\nclass RegisterComponent {\n    get additionalConsents() {\n        return this.registerForm?.get('additionalConsents');\n    }\n    updateAdditionalConsents(event, index) {\n        const { checked } = event.target;\n        this.registerForm.value.additionalConsents[index] = checked;\n    }\n    constructor(globalMessageService, fb, router, anonymousConsentsService, anonymousConsentsConfig, authConfigService, registerComponentService) {\n        this.globalMessageService = globalMessageService;\n        this.fb = fb;\n        this.router = router;\n        this.anonymousConsentsService = anonymousConsentsService;\n        this.anonymousConsentsConfig = anonymousConsentsConfig;\n        this.authConfigService = authConfigService;\n        this.registerComponentService = registerComponentService;\n        this.isLoading$ = new BehaviorSubject(false);\n        this.subscription = new Subscription();\n        this.registerForm = this.fb.group({\n            titleCode: [null],\n            firstName: ['', Validators.required],\n            lastName: ['', Validators.required],\n            email: ['', [Validators.required, CustomFormValidators.emailValidator]],\n            password: [\n                '',\n                [Validators.required, CustomFormValidators.passwordValidator],\n            ],\n            passwordconf: ['', Validators.required],\n            newsletter: new UntypedFormControl({\n                value: false,\n                disabled: this.isConsentRequired(),\n            }),\n            additionalConsents: this.registerComponentService.generateAdditionalConsentsFormControl?.() ??\n                this.fb.array([]),\n            termsandconditions: [false, Validators.requiredTrue],\n        }, {\n            validators: CustomFormValidators.passwordsMustMatch('password', 'passwordconf'),\n        });\n    }\n    ngOnInit() {\n        this.titles$ = this.registerComponentService.getTitles().pipe(map((titles) => {\n            return titles.sort(sortTitles);\n        }));\n        // TODO: Workaround: allow server for decide is titleCode mandatory (if yes, provide personalized message)\n        this.subscription.add(this.globalMessageService\n            .get()\n            .pipe(filter((messages) => !!Object.keys(messages).length))\n            .subscribe((globalMessageEntities) => {\n            const messages = globalMessageEntities &&\n                globalMessageEntities[GlobalMessageType.MSG_TYPE_ERROR];\n            if (messages &&\n                messages.some((message) => message.raw === 'This field is required.')) {\n                this.globalMessageService.remove(GlobalMessageType.MSG_TYPE_ERROR);\n                this.globalMessageService.add({ key: 'register.titleRequired' }, GlobalMessageType.MSG_TYPE_ERROR);\n            }\n        }));\n        const registerConsent = this.anonymousConsentsConfig?.anonymousConsents?.registerConsent ?? '';\n        this.anonymousConsent$ = combineLatest([\n            this.anonymousConsentsService.getConsent(registerConsent),\n            this.anonymousConsentsService.getTemplate(registerConsent),\n        ]).pipe(map(([consent, template]) => {\n            return {\n                consent,\n                template: template?.description ? template.description : '',\n            };\n        }));\n        this.additionalRegistrationConsents =\n            this.registerComponentService?.getAdditionalConsents() || [];\n        this.subscription.add(\n        // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n        this.registerForm.get('newsletter').valueChanges.subscribe(() => {\n            this.toggleAnonymousConsent();\n        }));\n    }\n    submitForm() {\n        if (this.registerForm.valid) {\n            this.registerUser();\n        }\n        else {\n            this.registerForm.markAllAsTouched();\n        }\n    }\n    registerUser() {\n        this.isLoading$.next(true);\n        this.registerComponentService\n            .register(this.collectDataFromRegisterForm(this.registerForm.value))\n            .subscribe({\n            next: () => this.onRegisterUserSuccess(),\n            complete: () => this.isLoading$.next(false),\n            error: () => this.isLoading$.next(false),\n        });\n    }\n    titleSelected(title) {\n        this.registerForm['controls'].titleCode.setValue(title.code);\n    }\n    collectDataFromRegisterForm(formData) {\n        const { firstName, lastName, email, password, titleCode } = formData;\n        return {\n            firstName,\n            lastName,\n            uid: email.toLowerCase(),\n            password,\n            titleCode,\n        };\n    }\n    isConsentGiven(consent) {\n        return this.anonymousConsentsService.isConsentGiven(consent);\n    }\n    isConsentRequired() {\n        const requiredConsents = this.anonymousConsentsConfig?.anonymousConsents?.requiredConsents;\n        const registerConsent = this.anonymousConsentsConfig?.anonymousConsents?.registerConsent;\n        if (requiredConsents && registerConsent) {\n            return requiredConsents.includes(registerConsent);\n        }\n        return false;\n    }\n    onRegisterUserSuccess() {\n        if (this.authConfigService.getOAuthFlow() ===\n            OAuthFlow.ResourceOwnerPasswordFlow) {\n            this.router.go('login');\n        }\n        this.registerComponentService.postRegisterMessage();\n    }\n    toggleAnonymousConsent() {\n        const registerConsent = this.anonymousConsentsConfig?.anonymousConsents?.registerConsent;\n        if (registerConsent) {\n            // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n            if (Boolean(this.registerForm.get('newsletter').value)) {\n                this.anonymousConsentsService.giveConsent(registerConsent);\n            }\n            else {\n                this.anonymousConsentsService.withdrawConsent(registerConsent);\n            }\n        }\n    }\n    ngOnDestroy() {\n        this.subscription.unsubscribe();\n    }\n}\nRegisterComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"15.2.4\", ngImport: i0, type: RegisterComponent, deps: [{ token: i2.GlobalMessageService }, { token: i3.UntypedFormBuilder }, { token: i2.RoutingService }, { token: i2.AnonymousConsentsService }, { token: i2.AnonymousConsentsConfig }, { token: i2.AuthConfigService }, { token: RegisterComponentService }], target: i0.ɵɵFactoryTarget.Component });\nRegisterComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"14.0.0\", version: \"15.2.4\", type: RegisterComponent, selector: \"cx-register\", ngImport: i0, template: \"<section\\n  class=\\\"cx-page-section container\\\"\\n  *ngIf=\\\"!(isLoading$ | async); else loading\\\"\\n>\\n  <div role=\\\"status\\\" [attr.aria-label]=\\\"'common.loaded' | cxTranslate\\\"></div>\\n  <div class=\\\"row justify-content-center\\\">\\n    <div class=\\\"col-md-6\\\">\\n      <div class=\\\"cx-section\\\">\\n        <form (ngSubmit)=\\\"submitForm()\\\" [formGroup]=\\\"registerForm\\\">\\n          <div class=\\\"form-group\\\">\\n            <label>\\n              <span class=\\\"label-content\\\">{{\\n                'register.title' | cxTranslate\\n              }}</span>\\n              <ng-select\\n                [clearable]=\\\"false\\\"\\n                [items]=\\\"titles$ | async\\\"\\n                [placeholder]=\\\"'register.selectTitle' | cxTranslate\\\"\\n                [searchable]=\\\"false\\\"\\n                bindLabel=\\\"name\\\"\\n                bindValue=\\\"code\\\"\\n                formControlName=\\\"titleCode\\\"\\n                id=\\\"title-select\\\"\\n                [cxNgSelectA11y]=\\\"{\\n                  ariaLabel: 'register.title' | cxTranslate\\n                }\\\"\\n              >\\n              </ng-select>\\n            </label>\\n          </div>\\n\\n          <div class=\\\"form-group\\\">\\n            <label>\\n              <span class=\\\"label-content\\\">{{\\n                'register.firstName.label' | cxTranslate\\n              }}</span>\\n              <input\\n                required=\\\"true\\\"\\n                class=\\\"form-control\\\"\\n                type=\\\"text\\\"\\n                name=\\\"firstname\\\"\\n                placeholder=\\\"{{\\n                  'register.firstName.placeholder' | cxTranslate\\n                }}\\\"\\n                formControlName=\\\"firstName\\\"\\n              />\\n              <cx-form-errors\\n                [control]=\\\"registerForm.get('firstName')\\\"\\n              ></cx-form-errors>\\n            </label>\\n          </div>\\n\\n          <div class=\\\"form-group\\\">\\n            <label>\\n              <span class=\\\"label-content\\\">{{\\n                'register.lastName.label' | cxTranslate\\n              }}</span>\\n              <input\\n                required=\\\"true\\\"\\n                class=\\\"form-control\\\"\\n                type=\\\"text\\\"\\n                name=\\\"lastname\\\"\\n                placeholder=\\\"{{\\n                  'register.lastName.placeholder' | cxTranslate\\n                }}\\\"\\n                formControlName=\\\"lastName\\\"\\n              />\\n              <cx-form-errors\\n                [control]=\\\"registerForm.get('lastName')\\\"\\n              ></cx-form-errors>\\n            </label>\\n          </div>\\n\\n          <div class=\\\"form-group\\\">\\n            <label>\\n              <span class=\\\"label-content\\\">{{\\n                'register.emailAddress.label' | cxTranslate\\n              }}</span>\\n              <input\\n                required=\\\"true\\\"\\n                class=\\\"form-control\\\"\\n                type=\\\"email\\\"\\n                name=\\\"email\\\"\\n                placeholder=\\\"{{\\n                  'register.emailAddress.placeholder' | cxTranslate\\n                }}\\\"\\n                formControlName=\\\"email\\\"\\n              />\\n              <cx-form-errors\\n                [control]=\\\"registerForm.get('email')\\\"\\n              ></cx-form-errors>\\n            </label>\\n          </div>\\n\\n          <div class=\\\"form-group\\\">\\n            <label>\\n              <span class=\\\"label-content\\\">{{\\n                'register.password.label' | cxTranslate\\n              }}</span>\\n              <input\\n                required=\\\"true\\\"\\n                class=\\\"form-control\\\"\\n                type=\\\"password\\\"\\n                name=\\\"password\\\"\\n                placeholder=\\\"{{\\n                  'register.password.placeholder' | cxTranslate\\n                }}\\\"\\n                formControlName=\\\"password\\\"\\n                [attr.aria-label]=\\\"\\n                  'register.password.placeholder' | cxTranslate\\n                \\\"\\n                cxPasswordVisibilitySwitch\\n              />\\n              <cx-form-errors\\n                [control]=\\\"registerForm.get('password')\\\"\\n              ></cx-form-errors>\\n            </label>\\n          </div>\\n\\n          <div class=\\\"form-group\\\">\\n            <label>\\n              <span class=\\\"label-content\\\">{{\\n                'register.confirmPassword.label' | cxTranslate\\n              }}</span>\\n              <input\\n                required=\\\"true\\\"\\n                class=\\\"form-control\\\"\\n                type=\\\"password\\\"\\n                name=\\\"confirmpassword\\\"\\n                placeholder=\\\"{{\\n                  'register.confirmPassword.placeholder' | cxTranslate\\n                }}\\\"\\n                formControlName=\\\"passwordconf\\\"\\n                [attr.aria-label]=\\\"\\n                  'register.confirmPassword.placeholder' | cxTranslate\\n                \\\"\\n                cxPasswordVisibilitySwitch\\n              />\\n              <cx-form-errors\\n                [control]=\\\"registerForm.get('passwordconf')\\\"\\n              ></cx-form-errors>\\n            </label>\\n          </div>\\n\\n          <div class=\\\"form-group\\\">\\n            <div class=\\\"form-check\\\">\\n              <label *ngIf=\\\"anonymousConsent$ | async as anonymousConsent\\\">\\n                <input\\n                  type=\\\"checkbox\\\"\\n                  name=\\\"newsletter\\\"\\n                  class=\\\"form-check-input\\\"\\n                  formControlName=\\\"newsletter\\\"\\n                  [checked]=\\\"isConsentGiven(anonymousConsent.consent)\\\"\\n                />\\n                <span class=\\\"form-check-label\\\">\\n                  {{ anonymousConsent.template }}\\n                </span>\\n              </label>\\n            </div>\\n          </div>\\n\\n          <div\\n            formArrayName=\\\"additionalConsents\\\"\\n            class=\\\"form-group\\\"\\n            *ngIf=\\\"additionalRegistrationConsents as consents\\\"\\n          >\\n            <div\\n              class=\\\"form-check\\\"\\n              *ngFor=\\\"let control of additionalConsents.controls; let i = index\\\"\\n            >\\n              <div *ngIf=\\\"consents[i]?.template?.id as id\\\">\\n                <label>\\n                  <input\\n                    type=\\\"checkbox\\\"\\n                    [required]=\\\"consents[i].required\\\"\\n                    [name]=\\\"id\\\"\\n                    (change)=\\\"updateAdditionalConsents($any($event), i)\\\"\\n                    [formControlName]=\\\"i\\\"\\n                  />\\n                  <span class=\\\"form-check-label\\\">\\n                    {{ consents[i].template.description }}\\n                  </span>\\n                  <cx-form-errors [control]=\\\"control\\\"></cx-form-errors>\\n                </label>\\n              </div>\\n            </div>\\n          </div>\\n\\n          <div class=\\\"form-group\\\">\\n            <div class=\\\"form-check\\\">\\n              <label>\\n                <input\\n                  required=\\\"true\\\"\\n                  type=\\\"checkbox\\\"\\n                  name=\\\"termsandconditions\\\"\\n                  formControlName=\\\"termsandconditions\\\"\\n                />\\n                <span class=\\\"form-check-label\\\">\\n                  {{ 'register.confirmThatRead' | cxTranslate }}\\n                  <a\\n                    [routerLink]=\\\"{ cxRoute: 'termsAndConditions' } | cxUrl\\\"\\n                    target=\\\"_blank\\\"\\n                    rel=\\\"noopener noreferrer\\\"\\n                  >\\n                    {{ 'register.termsAndConditions' | cxTranslate }}\\n                  </a>\\n                </span>\\n                <cx-form-errors\\n                  [control]=\\\"registerForm.get('termsandconditions')\\\"\\n                ></cx-form-errors>\\n              </label>\\n            </div>\\n          </div>\\n          <button type=\\\"submit\\\" class=\\\"btn btn-block btn-primary\\\">\\n            {{ 'register.register' | cxTranslate }}\\n          </button>\\n          <a\\n            class=\\\"cx-login-link btn-link\\\"\\n            [routerLink]=\\\"{ cxRoute: 'login' } | cxUrl\\\"\\n            >{{ 'register.signIn' | cxTranslate }}</a\\n          >\\n        </form>\\n      </div>\\n    </div>\\n  </div>\\n</section>\\n\\n<ng-template #loading>\\n  <div class=\\\"cx-spinner\\\"><cx-spinner></cx-spinner></div>\\n</ng-template>\\n\", dependencies: [{ kind: \"directive\", type: i2$1.NgForOf, selector: \"[ngFor][ngForOf]\", inputs: [\"ngForOf\", \"ngForTrackBy\", \"ngForTemplate\"] }, { kind: \"directive\", type: i2$1.NgIf, selector: \"[ngIf]\", inputs: [\"ngIf\", \"ngIfThen\", \"ngIfElse\"] }, { kind: \"directive\", type: i3.ɵNgNoValidate, selector: \"form:not([ngNoForm]):not([ngNativeValidate])\" }, { kind: \"directive\", type: i3.DefaultValueAccessor, selector: \"input:not([type=checkbox])[formControlName],textarea[formControlName],input:not([type=checkbox])[formControl],textarea[formControl],input:not([type=checkbox])[ngModel],textarea[ngModel],[ngDefaultControl]\" }, { kind: \"directive\", type: i3.CheckboxControlValueAccessor, selector: \"input[type=checkbox][formControlName],input[type=checkbox][formControl],input[type=checkbox][ngModel]\" }, { kind: \"directive\", type: i3.NgControlStatus, selector: \"[formControlName],[ngModel],[formControl]\" }, { kind: \"directive\", type: i3.NgControlStatusGroup, selector: \"[formGroupName],[formArrayName],[ngModelGroup],[formGroup],form:not([ngNoForm]),[ngForm]\" }, { kind: \"directive\", type: i3.RequiredValidator, selector: \":not([type=checkbox])[required][formControlName],:not([type=checkbox])[required][formControl],:not([type=checkbox])[required][ngModel]\", inputs: [\"required\"] }, { kind: \"directive\", type: i3.CheckboxRequiredValidator, selector: \"input[type=checkbox][required][formControlName],input[type=checkbox][required][formControl],input[type=checkbox][required][ngModel]\" }, { kind: \"directive\", type: i3.FormGroupDirective, selector: \"[formGroup]\", inputs: [\"formGroup\"], outputs: [\"ngSubmit\"], exportAs: [\"ngForm\"] }, { kind: \"directive\", type: i3.FormControlName, selector: \"[formControlName]\", inputs: [\"formControlName\", \"disabled\", \"ngModel\"], outputs: [\"ngModelChange\"] }, { kind: \"directive\", type: i3.FormArrayName, selector: \"[formArrayName]\", inputs: [\"formArrayName\"] }, { kind: \"directive\", type: i5.RouterLink, selector: \"[routerLink]\", inputs: [\"target\", \"queryParams\", \"fragment\", \"queryParamsHandling\", \"state\", \"relativeTo\", \"preserveFragment\", \"skipLocationChange\", \"replaceUrl\", \"routerLink\"] }, { kind: \"component\", type: i4.SpinnerComponent, selector: \"cx-spinner\" }, { kind: \"component\", type: i4.FormErrorsComponent, selector: \"cx-form-errors\", inputs: [\"prefix\", \"translationParams\", \"control\"] }, { kind: \"component\", type: i6.NgSelectComponent, selector: \"ng-select\", inputs: [\"bindLabel\", \"bindValue\", \"markFirst\", \"placeholder\", \"notFoundText\", \"typeToSearchText\", \"addTagText\", \"loadingText\", \"clearAllText\", \"appearance\", \"dropdownPosition\", \"appendTo\", \"loading\", \"closeOnSelect\", \"hideSelected\", \"selectOnTab\", \"openOnEnter\", \"maxSelectedItems\", \"groupBy\", \"groupValue\", \"bufferAmount\", \"virtualScroll\", \"selectableGroup\", \"selectableGroupAsModel\", \"searchFn\", \"trackByFn\", \"clearOnBackspace\", \"labelForId\", \"inputAttrs\", \"tabIndex\", \"readonly\", \"searchWhileComposing\", \"minTermLength\", \"editableSearchTerm\", \"keyDownFn\", \"typeahead\", \"multiple\", \"addTag\", \"searchable\", \"clearable\", \"isOpen\", \"items\", \"compareWith\", \"clearSearchOnAdd\"], outputs: [\"blur\", \"focus\", \"change\", \"open\", \"close\", \"search\", \"clear\", \"add\", \"remove\", \"scroll\", \"scrollToEnd\"] }, { kind: \"directive\", type: i4.NgSelectA11yDirective, selector: \"[cxNgSelectA11y]\", inputs: [\"cxNgSelectA11y\"] }, { kind: \"directive\", type: i4.PasswordVisibilityToggleDirective, selector: \"[cxPasswordVisibilitySwitch][type=\\\"password\\\"]\" }, { kind: \"pipe\", type: i2$1.AsyncPipe, name: \"async\" }, { kind: \"pipe\", type: i2.UrlPipe, name: \"cxUrl\" }, { kind: \"pipe\", type: i2.TranslatePipe, name: \"cxTranslate\" }] });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"15.2.4\", ngImport: i0, type: RegisterComponent, decorators: [{\n            type: Component,\n            args: [{ selector: 'cx-register', template: \"<section\\n  class=\\\"cx-page-section container\\\"\\n  *ngIf=\\\"!(isLoading$ | async); else loading\\\"\\n>\\n  <div role=\\\"status\\\" [attr.aria-label]=\\\"'common.loaded' | cxTranslate\\\"></div>\\n  <div class=\\\"row justify-content-center\\\">\\n    <div class=\\\"col-md-6\\\">\\n      <div class=\\\"cx-section\\\">\\n        <form (ngSubmit)=\\\"submitForm()\\\" [formGroup]=\\\"registerForm\\\">\\n          <div class=\\\"form-group\\\">\\n            <label>\\n              <span class=\\\"label-content\\\">{{\\n                'register.title' | cxTranslate\\n              }}</span>\\n              <ng-select\\n                [clearable]=\\\"false\\\"\\n                [items]=\\\"titles$ | async\\\"\\n                [placeholder]=\\\"'register.selectTitle' | cxTranslate\\\"\\n                [searchable]=\\\"false\\\"\\n                bindLabel=\\\"name\\\"\\n                bindValue=\\\"code\\\"\\n                formControlName=\\\"titleCode\\\"\\n                id=\\\"title-select\\\"\\n                [cxNgSelectA11y]=\\\"{\\n                  ariaLabel: 'register.title' | cxTranslate\\n                }\\\"\\n              >\\n              </ng-select>\\n            </label>\\n          </div>\\n\\n          <div class=\\\"form-group\\\">\\n            <label>\\n              <span class=\\\"label-content\\\">{{\\n                'register.firstName.label' | cxTranslate\\n              }}</span>\\n              <input\\n                required=\\\"true\\\"\\n                class=\\\"form-control\\\"\\n                type=\\\"text\\\"\\n                name=\\\"firstname\\\"\\n                placeholder=\\\"{{\\n                  'register.firstName.placeholder' | cxTranslate\\n                }}\\\"\\n                formControlName=\\\"firstName\\\"\\n              />\\n              <cx-form-errors\\n                [control]=\\\"registerForm.get('firstName')\\\"\\n              ></cx-form-errors>\\n            </label>\\n          </div>\\n\\n          <div class=\\\"form-group\\\">\\n            <label>\\n              <span class=\\\"label-content\\\">{{\\n                'register.lastName.label' | cxTranslate\\n              }}</span>\\n              <input\\n                required=\\\"true\\\"\\n                class=\\\"form-control\\\"\\n                type=\\\"text\\\"\\n                name=\\\"lastname\\\"\\n                placeholder=\\\"{{\\n                  'register.lastName.placeholder' | cxTranslate\\n                }}\\\"\\n                formControlName=\\\"lastName\\\"\\n              />\\n              <cx-form-errors\\n                [control]=\\\"registerForm.get('lastName')\\\"\\n              ></cx-form-errors>\\n            </label>\\n          </div>\\n\\n          <div class=\\\"form-group\\\">\\n            <label>\\n              <span class=\\\"label-content\\\">{{\\n                'register.emailAddress.label' | cxTranslate\\n              }}</span>\\n              <input\\n                required=\\\"true\\\"\\n                class=\\\"form-control\\\"\\n                type=\\\"email\\\"\\n                name=\\\"email\\\"\\n                placeholder=\\\"{{\\n                  'register.emailAddress.placeholder' | cxTranslate\\n                }}\\\"\\n                formControlName=\\\"email\\\"\\n              />\\n              <cx-form-errors\\n                [control]=\\\"registerForm.get('email')\\\"\\n              ></cx-form-errors>\\n            </label>\\n          </div>\\n\\n          <div class=\\\"form-group\\\">\\n            <label>\\n              <span class=\\\"label-content\\\">{{\\n                'register.password.label' | cxTranslate\\n              }}</span>\\n              <input\\n                required=\\\"true\\\"\\n                class=\\\"form-control\\\"\\n                type=\\\"password\\\"\\n                name=\\\"password\\\"\\n                placeholder=\\\"{{\\n                  'register.password.placeholder' | cxTranslate\\n                }}\\\"\\n                formControlName=\\\"password\\\"\\n                [attr.aria-label]=\\\"\\n                  'register.password.placeholder' | cxTranslate\\n                \\\"\\n                cxPasswordVisibilitySwitch\\n              />\\n              <cx-form-errors\\n                [control]=\\\"registerForm.get('password')\\\"\\n              ></cx-form-errors>\\n            </label>\\n          </div>\\n\\n          <div class=\\\"form-group\\\">\\n            <label>\\n              <span class=\\\"label-content\\\">{{\\n                'register.confirmPassword.label' | cxTranslate\\n              }}</span>\\n              <input\\n                required=\\\"true\\\"\\n                class=\\\"form-control\\\"\\n                type=\\\"password\\\"\\n                name=\\\"confirmpassword\\\"\\n                placeholder=\\\"{{\\n                  'register.confirmPassword.placeholder' | cxTranslate\\n                }}\\\"\\n                formControlName=\\\"passwordconf\\\"\\n                [attr.aria-label]=\\\"\\n                  'register.confirmPassword.placeholder' | cxTranslate\\n                \\\"\\n                cxPasswordVisibilitySwitch\\n              />\\n              <cx-form-errors\\n                [control]=\\\"registerForm.get('passwordconf')\\\"\\n              ></cx-form-errors>\\n            </label>\\n          </div>\\n\\n          <div class=\\\"form-group\\\">\\n            <div class=\\\"form-check\\\">\\n              <label *ngIf=\\\"anonymousConsent$ | async as anonymousConsent\\\">\\n                <input\\n                  type=\\\"checkbox\\\"\\n                  name=\\\"newsletter\\\"\\n                  class=\\\"form-check-input\\\"\\n                  formControlName=\\\"newsletter\\\"\\n                  [checked]=\\\"isConsentGiven(anonymousConsent.consent)\\\"\\n                />\\n                <span class=\\\"form-check-label\\\">\\n                  {{ anonymousConsent.template }}\\n                </span>\\n              </label>\\n            </div>\\n          </div>\\n\\n          <div\\n            formArrayName=\\\"additionalConsents\\\"\\n            class=\\\"form-group\\\"\\n            *ngIf=\\\"additionalRegistrationConsents as consents\\\"\\n          >\\n            <div\\n              class=\\\"form-check\\\"\\n              *ngFor=\\\"let control of additionalConsents.controls; let i = index\\\"\\n            >\\n              <div *ngIf=\\\"consents[i]?.template?.id as id\\\">\\n                <label>\\n                  <input\\n                    type=\\\"checkbox\\\"\\n                    [required]=\\\"consents[i].required\\\"\\n                    [name]=\\\"id\\\"\\n                    (change)=\\\"updateAdditionalConsents($any($event), i)\\\"\\n                    [formControlName]=\\\"i\\\"\\n                  />\\n                  <span class=\\\"form-check-label\\\">\\n                    {{ consents[i].template.description }}\\n                  </span>\\n                  <cx-form-errors [control]=\\\"control\\\"></cx-form-errors>\\n                </label>\\n              </div>\\n            </div>\\n          </div>\\n\\n          <div class=\\\"form-group\\\">\\n            <div class=\\\"form-check\\\">\\n              <label>\\n                <input\\n                  required=\\\"true\\\"\\n                  type=\\\"checkbox\\\"\\n                  name=\\\"termsandconditions\\\"\\n                  formControlName=\\\"termsandconditions\\\"\\n                />\\n                <span class=\\\"form-check-label\\\">\\n                  {{ 'register.confirmThatRead' | cxTranslate }}\\n                  <a\\n                    [routerLink]=\\\"{ cxRoute: 'termsAndConditions' } | cxUrl\\\"\\n                    target=\\\"_blank\\\"\\n                    rel=\\\"noopener noreferrer\\\"\\n                  >\\n                    {{ 'register.termsAndConditions' | cxTranslate }}\\n                  </a>\\n                </span>\\n                <cx-form-errors\\n                  [control]=\\\"registerForm.get('termsandconditions')\\\"\\n                ></cx-form-errors>\\n              </label>\\n            </div>\\n          </div>\\n          <button type=\\\"submit\\\" class=\\\"btn btn-block btn-primary\\\">\\n            {{ 'register.register' | cxTranslate }}\\n          </button>\\n          <a\\n            class=\\\"cx-login-link btn-link\\\"\\n            [routerLink]=\\\"{ cxRoute: 'login' } | cxUrl\\\"\\n            >{{ 'register.signIn' | cxTranslate }}</a\\n          >\\n        </form>\\n      </div>\\n    </div>\\n  </div>\\n</section>\\n\\n<ng-template #loading>\\n  <div class=\\\"cx-spinner\\\"><cx-spinner></cx-spinner></div>\\n</ng-template>\\n\" }]\n        }], ctorParameters: function () { return [{ type: i2.GlobalMessageService }, { type: i3.UntypedFormBuilder }, { type: i2.RoutingService }, { type: i2.AnonymousConsentsService }, { type: i2.AnonymousConsentsConfig }, { type: i2.AuthConfigService }, { type: RegisterComponentService }]; } });\n\n/*\n * SPDX-FileCopyrightText: 2023 SAP Spartacus team <spartacus-team@sap.com>\n *\n * SPDX-License-Identifier: Apache-2.0\n */\nclass RegisterComponentModule {\n}\nRegisterComponentModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"15.2.4\", ngImport: i0, type: RegisterComponentModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });\nRegisterComponentModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"14.0.0\", version: \"15.2.4\", ngImport: i0, type: RegisterComponentModule, declarations: [RegisterComponent], imports: [CommonModule,\n        ReactiveFormsModule,\n        RouterModule,\n        UrlModule,\n        I18nModule,\n        SpinnerModule,\n        FormErrorsModule,\n        NgSelectModule,\n        NgSelectA11yModule,\n        PasswordVisibilityToggleModule] });\nRegisterComponentModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"15.2.4\", ngImport: i0, type: RegisterComponentModule, providers: [\n        provideDefaultConfig({\n            cmsComponents: {\n                RegisterCustomerComponent: {\n                    component: RegisterComponent,\n                    guards: [NotAuthGuard],\n                    providers: [\n                        {\n                            provide: RegisterComponentService,\n                            useClass: RegisterComponentService,\n                            deps: [\n                                UserRegisterFacade,\n                                GlobalMessageService,\n                                UntypedFormBuilder,\n                            ],\n                        },\n                    ],\n                },\n            },\n        }),\n    ], imports: [CommonModule,\n        ReactiveFormsModule,\n        RouterModule,\n        UrlModule,\n        I18nModule,\n        SpinnerModule,\n        FormErrorsModule,\n        NgSelectModule,\n        NgSelectA11yModule,\n        PasswordVisibilityToggleModule] });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"15.2.4\", ngImport: i0, type: RegisterComponentModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    imports: [\n                        CommonModule,\n                        ReactiveFormsModule,\n                        RouterModule,\n                        UrlModule,\n                        I18nModule,\n                        SpinnerModule,\n                        FormErrorsModule,\n                        NgSelectModule,\n                        NgSelectA11yModule,\n                        PasswordVisibilityToggleModule,\n                    ],\n                    providers: [\n                        provideDefaultConfig({\n                            cmsComponents: {\n                                RegisterCustomerComponent: {\n                                    component: RegisterComponent,\n                                    guards: [NotAuthGuard],\n                                    providers: [\n                                        {\n                                            provide: RegisterComponentService,\n                                            useClass: RegisterComponentService,\n                                            deps: [\n                                                UserRegisterFacade,\n                                                GlobalMessageService,\n                                                UntypedFormBuilder,\n                                            ],\n                                        },\n                                    ],\n                                },\n                            },\n                        }),\n                    ],\n                    declarations: [RegisterComponent],\n                }]\n        }] });\n\n/*\n * SPDX-FileCopyrightText: 2023 SAP Spartacus team <spartacus-team@sap.com>\n *\n * SPDX-License-Identifier: Apache-2.0\n */\n\n/*\n * SPDX-FileCopyrightText: 2023 SAP Spartacus team <spartacus-team@sap.com>\n *\n * SPDX-License-Identifier: Apache-2.0\n */\nclass ResetPasswordComponentService {\n    constructor(userPasswordService, routingService, globalMessage) {\n        this.userPasswordService = userPasswordService;\n        this.routingService = routingService;\n        this.globalMessage = globalMessage;\n        this.busy$ = new BehaviorSubject(false);\n        this.isUpdating$ = this.busy$.pipe(tap((state) => (state === true ? this.form.disable() : this.form.enable())));\n        this.resetToken$ = this.routingService\n            .getRouterState()\n            .pipe(map((routerState) => routerState.state.queryParams['token']));\n        this.form = new UntypedFormGroup({\n            password: new UntypedFormControl('', [\n                Validators.required,\n                CustomFormValidators.passwordValidator,\n            ]),\n            passwordConfirm: new UntypedFormControl('', Validators.required),\n        }, {\n            validators: CustomFormValidators.passwordsMustMatch('password', 'passwordConfirm'),\n        });\n    }\n    /**\n     * Resets the password by the given token.\n     *\n     * The token has been provided during the request password flow.\n     * The token is not validated on the client.\n     */\n    resetPassword(token) {\n        if (!this.form.valid) {\n            this.form.markAllAsTouched();\n            return;\n        }\n        this.busy$.next(true);\n        const password = this.form.get('password').value;\n        this.userPasswordService.reset(token, password).subscribe({\n            next: () => this.onSuccess(),\n            error: (error) => this.onError(error),\n        });\n    }\n    onSuccess() {\n        this.globalMessage.add({ key: 'forgottenPassword.passwordResetSuccess' }, GlobalMessageType.MSG_TYPE_CONFIRMATION);\n        this.busy$.next(false);\n        this.form.reset();\n        this.redirect();\n    }\n    onError(error) {\n        this.busy$.next(false);\n        if (error instanceof HttpErrorModel) {\n            (error.details ?? []).forEach((err) => {\n                if (err.message) {\n                    this.globalMessage.add({ raw: err.message }, GlobalMessageType.MSG_TYPE_ERROR);\n                }\n            });\n        }\n    }\n    /**\n     * Redirects the user to the login page.\n     */\n    redirect() {\n        this.routingService.go({ cxRoute: 'login' });\n    }\n}\nResetPasswordComponentService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"15.2.4\", ngImport: i0, type: ResetPasswordComponentService, deps: [{ token: i1.UserPasswordFacade }, { token: i2.RoutingService }, { token: i2.GlobalMessageService }], target: i0.ɵɵFactoryTarget.Injectable });\nResetPasswordComponentService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"15.2.4\", ngImport: i0, type: ResetPasswordComponentService });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"15.2.4\", ngImport: i0, type: ResetPasswordComponentService, decorators: [{\n            type: Injectable\n        }], ctorParameters: function () { return [{ type: i1.UserPasswordFacade }, { type: i2.RoutingService }, { type: i2.GlobalMessageService }]; } });\n\n/*\n * SPDX-FileCopyrightText: 2023 SAP Spartacus team <spartacus-team@sap.com>\n *\n * SPDX-License-Identifier: Apache-2.0\n */\nclass ResetPasswordComponent {\n    constructor(service) {\n        this.service = service;\n        this.form = this.service.form;\n        this.isUpdating$ = this.service.isUpdating$;\n        this.token$ = this.service.resetToken$;\n    }\n    onSubmit(token) {\n        this.service.resetPassword(token);\n    }\n}\nResetPasswordComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"15.2.4\", ngImport: i0, type: ResetPasswordComponent, deps: [{ token: ResetPasswordComponentService }], target: i0.ɵɵFactoryTarget.Component });\nResetPasswordComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"14.0.0\", version: \"15.2.4\", type: ResetPasswordComponent, selector: \"cx-reset-password\", host: { classAttribute: \"user-form\" }, ngImport: i0, template: \"<cx-spinner class=\\\"overlay\\\" *ngIf=\\\"isUpdating$ | async\\\"> </cx-spinner>\\n\\n<form\\n  *ngIf=\\\"token$ | async as token\\\"\\n  (ngSubmit)=\\\"onSubmit(token)\\\"\\n  [formGroup]=\\\"form\\\"\\n>\\n  <label>\\n    <span class=\\\"label-content\\\">{{\\n      'register.newPassword' | cxTranslate\\n    }}</span>\\n    <input\\n      required=\\\"true\\\"\\n      class=\\\"form-control\\\"\\n      type=\\\"password\\\"\\n      placeholder=\\\"{{ 'register.password.placeholder' | cxTranslate }}\\\"\\n      formControlName=\\\"password\\\"\\n      [attr.aria-label]=\\\"'register.password.placeholder' | cxTranslate\\\"\\n      cxPasswordVisibilitySwitch\\n    />\\n    <cx-form-errors [control]=\\\"form.get('password')\\\"></cx-form-errors>\\n  </label>\\n\\n  <label>\\n    <span class=\\\"label-content\\\">{{\\n      'register.passwordMinRequirements' | cxTranslate\\n    }}</span>\\n    <input\\n      required=\\\"true\\\"\\n      class=\\\"form-control\\\"\\n      type=\\\"password\\\"\\n      placeholder=\\\"{{ 'register.confirmPassword.placeholder' | cxTranslate }}\\\"\\n      formControlName=\\\"passwordConfirm\\\"\\n      [attr.aria-label]=\\\"'register.confirmPassword.placeholder' | cxTranslate\\\"\\n      cxPasswordVisibilitySwitch\\n    />\\n    <cx-form-errors [control]=\\\"form.get('passwordConfirm')\\\"></cx-form-errors>\\n  </label>\\n\\n  <button class=\\\"btn btn-block btn-primary\\\" [disabled]=\\\"form.disabled\\\">\\n    {{ 'register.resetPassword' | cxTranslate }}\\n  </button>\\n</form>\\n\", dependencies: [{ kind: \"directive\", type: i2$1.NgIf, selector: \"[ngIf]\", inputs: [\"ngIf\", \"ngIfThen\", \"ngIfElse\"] }, { kind: \"directive\", type: i3.ɵNgNoValidate, selector: \"form:not([ngNoForm]):not([ngNativeValidate])\" }, { kind: \"directive\", type: i3.DefaultValueAccessor, selector: \"input:not([type=checkbox])[formControlName],textarea[formControlName],input:not([type=checkbox])[formControl],textarea[formControl],input:not([type=checkbox])[ngModel],textarea[ngModel],[ngDefaultControl]\" }, { kind: \"directive\", type: i3.NgControlStatus, selector: \"[formControlName],[ngModel],[formControl]\" }, { kind: \"directive\", type: i3.NgControlStatusGroup, selector: \"[formGroupName],[formArrayName],[ngModelGroup],[formGroup],form:not([ngNoForm]),[ngForm]\" }, { kind: \"directive\", type: i3.RequiredValidator, selector: \":not([type=checkbox])[required][formControlName],:not([type=checkbox])[required][formControl],:not([type=checkbox])[required][ngModel]\", inputs: [\"required\"] }, { kind: \"directive\", type: i3.FormGroupDirective, selector: \"[formGroup]\", inputs: [\"formGroup\"], outputs: [\"ngSubmit\"], exportAs: [\"ngForm\"] }, { kind: \"directive\", type: i3.FormControlName, selector: \"[formControlName]\", inputs: [\"formControlName\", \"disabled\", \"ngModel\"], outputs: [\"ngModelChange\"] }, { kind: \"component\", type: i4.FormErrorsComponent, selector: \"cx-form-errors\", inputs: [\"prefix\", \"translationParams\", \"control\"] }, { kind: \"component\", type: i4.SpinnerComponent, selector: \"cx-spinner\" }, { kind: \"directive\", type: i4.PasswordVisibilityToggleDirective, selector: \"[cxPasswordVisibilitySwitch][type=\\\"password\\\"]\" }, { kind: \"pipe\", type: i2$1.AsyncPipe, name: \"async\" }, { kind: \"pipe\", type: i2.TranslatePipe, name: \"cxTranslate\" }], changeDetection: i0.ChangeDetectionStrategy.OnPush });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"15.2.4\", ngImport: i0, type: ResetPasswordComponent, decorators: [{\n            type: Component,\n            args: [{ selector: 'cx-reset-password', changeDetection: ChangeDetectionStrategy.OnPush, host: { class: 'user-form' }, template: \"<cx-spinner class=\\\"overlay\\\" *ngIf=\\\"isUpdating$ | async\\\"> </cx-spinner>\\n\\n<form\\n  *ngIf=\\\"token$ | async as token\\\"\\n  (ngSubmit)=\\\"onSubmit(token)\\\"\\n  [formGroup]=\\\"form\\\"\\n>\\n  <label>\\n    <span class=\\\"label-content\\\">{{\\n      'register.newPassword' | cxTranslate\\n    }}</span>\\n    <input\\n      required=\\\"true\\\"\\n      class=\\\"form-control\\\"\\n      type=\\\"password\\\"\\n      placeholder=\\\"{{ 'register.password.placeholder' | cxTranslate }}\\\"\\n      formControlName=\\\"password\\\"\\n      [attr.aria-label]=\\\"'register.password.placeholder' | cxTranslate\\\"\\n      cxPasswordVisibilitySwitch\\n    />\\n    <cx-form-errors [control]=\\\"form.get('password')\\\"></cx-form-errors>\\n  </label>\\n\\n  <label>\\n    <span class=\\\"label-content\\\">{{\\n      'register.passwordMinRequirements' | cxTranslate\\n    }}</span>\\n    <input\\n      required=\\\"true\\\"\\n      class=\\\"form-control\\\"\\n      type=\\\"password\\\"\\n      placeholder=\\\"{{ 'register.confirmPassword.placeholder' | cxTranslate }}\\\"\\n      formControlName=\\\"passwordConfirm\\\"\\n      [attr.aria-label]=\\\"'register.confirmPassword.placeholder' | cxTranslate\\\"\\n      cxPasswordVisibilitySwitch\\n    />\\n    <cx-form-errors [control]=\\\"form.get('passwordConfirm')\\\"></cx-form-errors>\\n  </label>\\n\\n  <button class=\\\"btn btn-block btn-primary\\\" [disabled]=\\\"form.disabled\\\">\\n    {{ 'register.resetPassword' | cxTranslate }}\\n  </button>\\n</form>\\n\" }]\n        }], ctorParameters: function () { return [{ type: ResetPasswordComponentService }]; } });\n\n/*\n * SPDX-FileCopyrightText: 2023 SAP Spartacus team <spartacus-team@sap.com>\n *\n * SPDX-License-Identifier: Apache-2.0\n */\nclass ResetPasswordModule {\n}\nResetPasswordModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"15.2.4\", ngImport: i0, type: ResetPasswordModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });\nResetPasswordModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"14.0.0\", version: \"15.2.4\", ngImport: i0, type: ResetPasswordModule, declarations: [ResetPasswordComponent], imports: [CommonModule,\n        FormsModule,\n        ReactiveFormsModule,\n        RouterModule,\n        I18nModule,\n        FormErrorsModule,\n        SpinnerModule,\n        PasswordVisibilityToggleModule] });\nResetPasswordModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"15.2.4\", ngImport: i0, type: ResetPasswordModule, providers: [\n        provideDefaultConfig({\n            cmsComponents: {\n                ResetPasswordComponent: {\n                    component: ResetPasswordComponent,\n                    guards: [NotAuthGuard],\n                    providers: [\n                        {\n                            provide: ResetPasswordComponentService,\n                            useClass: ResetPasswordComponentService,\n                            deps: [UserPasswordFacade, RoutingService, GlobalMessageService],\n                        },\n                    ],\n                },\n            },\n        }),\n    ], imports: [CommonModule,\n        FormsModule,\n        ReactiveFormsModule,\n        RouterModule,\n        I18nModule,\n        FormErrorsModule,\n        SpinnerModule,\n        PasswordVisibilityToggleModule] });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"15.2.4\", ngImport: i0, type: ResetPasswordModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    imports: [\n                        CommonModule,\n                        FormsModule,\n                        ReactiveFormsModule,\n                        RouterModule,\n                        I18nModule,\n                        FormErrorsModule,\n                        SpinnerModule,\n                        PasswordVisibilityToggleModule,\n                    ],\n                    providers: [\n                        provideDefaultConfig({\n                            cmsComponents: {\n                                ResetPasswordComponent: {\n                                    component: ResetPasswordComponent,\n                                    guards: [NotAuthGuard],\n                                    providers: [\n                                        {\n                                            provide: ResetPasswordComponentService,\n                                            useClass: ResetPasswordComponentService,\n                                            deps: [UserPasswordFacade, RoutingService, GlobalMessageService],\n                                        },\n                                    ],\n                                },\n                            },\n                        }),\n                    ],\n                    declarations: [ResetPasswordComponent],\n                }]\n        }] });\n\n/*\n * SPDX-FileCopyrightText: 2023 SAP Spartacus team <spartacus-team@sap.com>\n *\n * SPDX-License-Identifier: Apache-2.0\n */\n\n/*\n * SPDX-FileCopyrightText: 2023 SAP Spartacus team <spartacus-team@sap.com>\n *\n * SPDX-License-Identifier: Apache-2.0\n */\nclass UpdateEmailComponentService {\n    constructor(userEmail, routingService, globalMessageService, authService, authRedirectService) {\n        this.userEmail = userEmail;\n        this.routingService = routingService;\n        this.globalMessageService = globalMessageService;\n        this.authService = authService;\n        this.authRedirectService = authRedirectService;\n        this.busy$ = new BehaviorSubject(false);\n        this.isUpdating$ = this.busy$.pipe(tap((state) => (state === true ? this.form.disable() : this.form.enable())));\n        this.form = new UntypedFormGroup({\n            email: new UntypedFormControl('', [\n                Validators.required,\n                CustomFormValidators.emailValidator,\n            ]),\n            confirmEmail: new UntypedFormControl('', [Validators.required]),\n            password: new UntypedFormControl('', [Validators.required]),\n        }, {\n            validators: CustomFormValidators.emailsMustMatch('email', 'confirmEmail'),\n        });\n    }\n    save() {\n        if (!this.form.valid) {\n            this.form.markAllAsTouched();\n            return;\n        }\n        this.busy$.next(true);\n        const newEmail = this.form.get('confirmEmail')?.value;\n        const password = this.form.get('password')?.value;\n        this.userEmail.update(password, newEmail).subscribe({\n            next: () => this.onSuccess(newEmail),\n            error: (error) => this.onError(error),\n        });\n    }\n    /**\n     * Handles successful updating of the user email.\n     */\n    onSuccess(newUid) {\n        this.globalMessageService.add({\n            key: 'updateEmailForm.emailUpdateSuccess',\n            params: { newUid },\n        }, GlobalMessageType.MSG_TYPE_CONFIRMATION);\n        this.busy$.next(false);\n        this.form.reset();\n        // sets the redirect url after login\n        this.authRedirectService.setRedirectUrl(this.routingService.getUrl({ cxRoute: 'home' }));\n        // TODO(#9638): Use logout route when it will support passing redirect url\n        this.authService.coreLogout().then(() => {\n            this.routingService.go({ cxRoute: 'login' }, {\n                state: {\n                    newUid,\n                },\n            });\n        });\n    }\n    onError(_error) {\n        this.busy$.next(false);\n    }\n}\nUpdateEmailComponentService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"15.2.4\", ngImport: i0, type: UpdateEmailComponentService, deps: [{ token: i1.UserEmailFacade }, { token: i2.RoutingService }, { token: i2.GlobalMessageService }, { token: i2.AuthService }, { token: i2.AuthRedirectService }], target: i0.ɵɵFactoryTarget.Injectable });\nUpdateEmailComponentService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"15.2.4\", ngImport: i0, type: UpdateEmailComponentService });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"15.2.4\", ngImport: i0, type: UpdateEmailComponentService, decorators: [{\n            type: Injectable\n        }], ctorParameters: function () { return [{ type: i1.UserEmailFacade }, { type: i2.RoutingService }, { type: i2.GlobalMessageService }, { type: i2.AuthService }, { type: i2.AuthRedirectService }]; } });\n\n/*\n * SPDX-FileCopyrightText: 2023 SAP Spartacus team <spartacus-team@sap.com>\n *\n * SPDX-License-Identifier: Apache-2.0\n */\nclass UpdateEmailComponent {\n    constructor(service) {\n        this.service = service;\n        this.form = this.service.form;\n        this.isUpdating$ = this.service.isUpdating$;\n    }\n    onSubmit() {\n        this.service.save();\n    }\n}\nUpdateEmailComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"15.2.4\", ngImport: i0, type: UpdateEmailComponent, deps: [{ token: UpdateEmailComponentService }], target: i0.ɵɵFactoryTarget.Component });\nUpdateEmailComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"14.0.0\", version: \"15.2.4\", type: UpdateEmailComponent, selector: \"cx-update-email\", host: { classAttribute: \"user-form\" }, ngImport: i0, template: \"<cx-spinner class=\\\"overlay\\\" *ngIf=\\\"isUpdating$ | async\\\"> </cx-spinner>\\n\\n<form (ngSubmit)=\\\"onSubmit()\\\" [formGroup]=\\\"form\\\">\\n  <label>\\n    <span class=\\\"label-content\\\">{{\\n      'updateEmailForm.newEmailAddress.label' | cxTranslate\\n    }}</span>\\n    <input\\n      required=\\\"true\\\"\\n      type=\\\"email\\\"\\n      name=\\\"email\\\"\\n      formControlName=\\\"email\\\"\\n      placeholder=\\\"{{\\n        'updateEmailForm.newEmailAddress.placeholder' | cxTranslate\\n      }}\\\"\\n      class=\\\"form-control\\\"\\n    />\\n    <cx-form-errors [control]=\\\"form.get('email')\\\"></cx-form-errors>\\n  </label>\\n\\n  <label>\\n    <span class=\\\"label-content\\\">{{\\n      'updateEmailForm.confirmNewEmailAddress.label' | cxTranslate\\n    }}</span>\\n    <input\\n      required=\\\"true\\\"\\n      type=\\\"email\\\"\\n      name=\\\"confirmEmail\\\"\\n      formControlName=\\\"confirmEmail\\\"\\n      placeholder=\\\"{{\\n        'updateEmailForm.confirmNewEmailAddress.placeholder' | cxTranslate\\n      }}\\\"\\n      class=\\\"form-control\\\"\\n    />\\n    <cx-form-errors [control]=\\\"form.get('confirmEmail')\\\"></cx-form-errors>\\n  </label>\\n\\n  <label>\\n    <span class=\\\"label-content\\\">{{\\n      'updateEmailForm.password.label' | cxTranslate\\n    }}</span>\\n    <input\\n      required=\\\"true\\\"\\n      type=\\\"password\\\"\\n      name=\\\"password\\\"\\n      formControlName=\\\"password\\\"\\n      placeholder=\\\"{{ 'updateEmailForm.password.placeholder' | cxTranslate }}\\\"\\n      class=\\\"form-control\\\"\\n      autocomplete=\\\"new-password\\\"\\n      [attr.aria-label]=\\\"'updateEmailForm.password.placeholder' | cxTranslate\\\"\\n      cxPasswordVisibilitySwitch\\n    />\\n    <cx-form-errors [control]=\\\"form.get('password')\\\"></cx-form-errors>\\n  </label>\\n\\n  <a\\n    class=\\\"btn btn-block btn-secondary\\\"\\n    [routerLink]=\\\"{ cxRoute: 'home' } | cxUrl\\\"\\n  >\\n    {{ 'common.cancel' | cxTranslate }}\\n  </a>\\n\\n  <button class=\\\"btn btn-block btn-primary\\\" [disabled]=\\\"form.disabled\\\">\\n    {{ 'common.save' | cxTranslate }}\\n  </button>\\n</form>\\n\", dependencies: [{ kind: \"directive\", type: i2$1.NgIf, selector: \"[ngIf]\", inputs: [\"ngIf\", \"ngIfThen\", \"ngIfElse\"] }, { kind: \"directive\", type: i3.ɵNgNoValidate, selector: \"form:not([ngNoForm]):not([ngNativeValidate])\" }, { kind: \"directive\", type: i3.DefaultValueAccessor, selector: \"input:not([type=checkbox])[formControlName],textarea[formControlName],input:not([type=checkbox])[formControl],textarea[formControl],input:not([type=checkbox])[ngModel],textarea[ngModel],[ngDefaultControl]\" }, { kind: \"directive\", type: i3.NgControlStatus, selector: \"[formControlName],[ngModel],[formControl]\" }, { kind: \"directive\", type: i3.NgControlStatusGroup, selector: \"[formGroupName],[formArrayName],[ngModelGroup],[formGroup],form:not([ngNoForm]),[ngForm]\" }, { kind: \"directive\", type: i3.RequiredValidator, selector: \":not([type=checkbox])[required][formControlName],:not([type=checkbox])[required][formControl],:not([type=checkbox])[required][ngModel]\", inputs: [\"required\"] }, { kind: \"directive\", type: i3.FormGroupDirective, selector: \"[formGroup]\", inputs: [\"formGroup\"], outputs: [\"ngSubmit\"], exportAs: [\"ngForm\"] }, { kind: \"directive\", type: i3.FormControlName, selector: \"[formControlName]\", inputs: [\"formControlName\", \"disabled\", \"ngModel\"], outputs: [\"ngModelChange\"] }, { kind: \"component\", type: i4.SpinnerComponent, selector: \"cx-spinner\" }, { kind: \"directive\", type: i5.RouterLink, selector: \"[routerLink]\", inputs: [\"target\", \"queryParams\", \"fragment\", \"queryParamsHandling\", \"state\", \"relativeTo\", \"preserveFragment\", \"skipLocationChange\", \"replaceUrl\", \"routerLink\"] }, { kind: \"component\", type: i4.FormErrorsComponent, selector: \"cx-form-errors\", inputs: [\"prefix\", \"translationParams\", \"control\"] }, { kind: \"directive\", type: i4.PasswordVisibilityToggleDirective, selector: \"[cxPasswordVisibilitySwitch][type=\\\"password\\\"]\" }, { kind: \"pipe\", type: i2$1.AsyncPipe, name: \"async\" }, { kind: \"pipe\", type: i2.UrlPipe, name: \"cxUrl\" }, { kind: \"pipe\", type: i2.TranslatePipe, name: \"cxTranslate\" }], changeDetection: i0.ChangeDetectionStrategy.OnPush });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"15.2.4\", ngImport: i0, type: UpdateEmailComponent, decorators: [{\n            type: Component,\n            args: [{ selector: 'cx-update-email', changeDetection: ChangeDetectionStrategy.OnPush, host: { class: 'user-form' }, template: \"<cx-spinner class=\\\"overlay\\\" *ngIf=\\\"isUpdating$ | async\\\"> </cx-spinner>\\n\\n<form (ngSubmit)=\\\"onSubmit()\\\" [formGroup]=\\\"form\\\">\\n  <label>\\n    <span class=\\\"label-content\\\">{{\\n      'updateEmailForm.newEmailAddress.label' | cxTranslate\\n    }}</span>\\n    <input\\n      required=\\\"true\\\"\\n      type=\\\"email\\\"\\n      name=\\\"email\\\"\\n      formControlName=\\\"email\\\"\\n      placeholder=\\\"{{\\n        'updateEmailForm.newEmailAddress.placeholder' | cxTranslate\\n      }}\\\"\\n      class=\\\"form-control\\\"\\n    />\\n    <cx-form-errors [control]=\\\"form.get('email')\\\"></cx-form-errors>\\n  </label>\\n\\n  <label>\\n    <span class=\\\"label-content\\\">{{\\n      'updateEmailForm.confirmNewEmailAddress.label' | cxTranslate\\n    }}</span>\\n    <input\\n      required=\\\"true\\\"\\n      type=\\\"email\\\"\\n      name=\\\"confirmEmail\\\"\\n      formControlName=\\\"confirmEmail\\\"\\n      placeholder=\\\"{{\\n        'updateEmailForm.confirmNewEmailAddress.placeholder' | cxTranslate\\n      }}\\\"\\n      class=\\\"form-control\\\"\\n    />\\n    <cx-form-errors [control]=\\\"form.get('confirmEmail')\\\"></cx-form-errors>\\n  </label>\\n\\n  <label>\\n    <span class=\\\"label-content\\\">{{\\n      'updateEmailForm.password.label' | cxTranslate\\n    }}</span>\\n    <input\\n      required=\\\"true\\\"\\n      type=\\\"password\\\"\\n      name=\\\"password\\\"\\n      formControlName=\\\"password\\\"\\n      placeholder=\\\"{{ 'updateEmailForm.password.placeholder' | cxTranslate }}\\\"\\n      class=\\\"form-control\\\"\\n      autocomplete=\\\"new-password\\\"\\n      [attr.aria-label]=\\\"'updateEmailForm.password.placeholder' | cxTranslate\\\"\\n      cxPasswordVisibilitySwitch\\n    />\\n    <cx-form-errors [control]=\\\"form.get('password')\\\"></cx-form-errors>\\n  </label>\\n\\n  <a\\n    class=\\\"btn btn-block btn-secondary\\\"\\n    [routerLink]=\\\"{ cxRoute: 'home' } | cxUrl\\\"\\n  >\\n    {{ 'common.cancel' | cxTranslate }}\\n  </a>\\n\\n  <button class=\\\"btn btn-block btn-primary\\\" [disabled]=\\\"form.disabled\\\">\\n    {{ 'common.save' | cxTranslate }}\\n  </button>\\n</form>\\n\" }]\n        }], ctorParameters: function () { return [{ type: UpdateEmailComponentService }]; } });\n\n/*\n * SPDX-FileCopyrightText: 2023 SAP Spartacus team <spartacus-team@sap.com>\n *\n * SPDX-License-Identifier: Apache-2.0\n */\nclass UpdateEmailModule {\n}\nUpdateEmailModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"15.2.4\", ngImport: i0, type: UpdateEmailModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });\nUpdateEmailModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"14.0.0\", version: \"15.2.4\", ngImport: i0, type: UpdateEmailModule, declarations: [UpdateEmailComponent], imports: [CommonModule,\n        FormsModule,\n        ReactiveFormsModule,\n        SpinnerModule,\n        UrlModule,\n        RouterModule,\n        I18nModule,\n        FormErrorsModule,\n        PasswordVisibilityToggleModule] });\nUpdateEmailModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"15.2.4\", ngImport: i0, type: UpdateEmailModule, providers: [\n        provideDefaultConfig({\n            cmsComponents: {\n                UpdateEmailComponent: {\n                    component: UpdateEmailComponent,\n                    guards: [AuthGuard],\n                    providers: [\n                        {\n                            provide: UpdateEmailComponentService,\n                            useClass: UpdateEmailComponentService,\n                            deps: [\n                                UserEmailFacade,\n                                RoutingService,\n                                GlobalMessageService,\n                                AuthService,\n                                AuthRedirectService,\n                            ],\n                        },\n                    ],\n                },\n            },\n        }),\n    ], imports: [CommonModule,\n        FormsModule,\n        ReactiveFormsModule,\n        SpinnerModule,\n        UrlModule,\n        RouterModule,\n        I18nModule,\n        FormErrorsModule,\n        PasswordVisibilityToggleModule] });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"15.2.4\", ngImport: i0, type: UpdateEmailModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    imports: [\n                        CommonModule,\n                        FormsModule,\n                        ReactiveFormsModule,\n                        SpinnerModule,\n                        UrlModule,\n                        RouterModule,\n                        I18nModule,\n                        FormErrorsModule,\n                        PasswordVisibilityToggleModule,\n                    ],\n                    providers: [\n                        provideDefaultConfig({\n                            cmsComponents: {\n                                UpdateEmailComponent: {\n                                    component: UpdateEmailComponent,\n                                    guards: [AuthGuard],\n                                    providers: [\n                                        {\n                                            provide: UpdateEmailComponentService,\n                                            useClass: UpdateEmailComponentService,\n                                            deps: [\n                                                UserEmailFacade,\n                                                RoutingService,\n                                                GlobalMessageService,\n                                                AuthService,\n                                                AuthRedirectService,\n                                            ],\n                                        },\n                                    ],\n                                },\n                            },\n                        }),\n                    ],\n                    declarations: [UpdateEmailComponent],\n                }]\n        }] });\n\n/*\n * SPDX-FileCopyrightText: 2023 SAP Spartacus team <spartacus-team@sap.com>\n *\n * SPDX-License-Identifier: Apache-2.0\n */\n\n/*\n * SPDX-FileCopyrightText: 2023 SAP Spartacus team <spartacus-team@sap.com>\n *\n * SPDX-License-Identifier: Apache-2.0\n */\nclass UpdatePasswordComponentService {\n    constructor(userPasswordService, routingService, globalMessageService, authRedirectService, authService) {\n        this.userPasswordService = userPasswordService;\n        this.routingService = routingService;\n        this.globalMessageService = globalMessageService;\n        this.authRedirectService = authRedirectService;\n        this.authService = authService;\n        this.busy$ = new BehaviorSubject(false);\n        this.isUpdating$ = this.busy$.pipe(tap((state) => (state === true ? this.form.disable() : this.form.enable())));\n        this.form = new UntypedFormGroup({\n            oldPassword: new UntypedFormControl('', Validators.required),\n            newPassword: new UntypedFormControl('', [\n                Validators.required,\n                CustomFormValidators.passwordValidator,\n            ]),\n            newPasswordConfirm: new UntypedFormControl('', Validators.required),\n        }, {\n            validators: CustomFormValidators.passwordsMustMatch('newPassword', 'newPasswordConfirm'),\n        });\n    }\n    /**\n     * Updates the password for the user.\n     */\n    updatePassword() {\n        if (!this.form.valid) {\n            this.form.markAllAsTouched();\n            return;\n        }\n        this.busy$.next(true);\n        const oldPassword = this.form.get('oldPassword')?.value;\n        const newPassword = this.form.get('newPassword')?.value;\n        this.userPasswordService.update(oldPassword, newPassword).subscribe({\n            next: () => this.onSuccess(),\n            error: (error) => this.onError(error),\n        });\n    }\n    onSuccess() {\n        this.globalMessageService.add({ key: 'updatePasswordForm.passwordUpdateSuccess' }, GlobalMessageType.MSG_TYPE_CONFIRMATION);\n        this.busy$.next(false);\n        this.form.reset();\n        // sets the redirect url after login\n        this.authRedirectService?.setRedirectUrl(this.routingService.getUrl({ cxRoute: 'home' }));\n        // TODO(#9638): Use logout route when it will support passing redirect url\n        this.authService?.coreLogout().then(() => {\n            this.routingService.go({ cxRoute: 'login' });\n        });\n    }\n    onError(_error) {\n        if (_error instanceof HttpErrorModel &&\n            _error.details?.[0].type === 'AccessDeniedError') {\n            this.globalMessageService.add({ key: 'updatePasswordForm.accessDeniedError' }, GlobalMessageType.MSG_TYPE_ERROR);\n        }\n        this.busy$.next(false);\n        this.form.reset();\n    }\n}\nUpdatePasswordComponentService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"15.2.4\", ngImport: i0, type: UpdatePasswordComponentService, deps: [{ token: i1.UserPasswordFacade }, { token: i2.RoutingService }, { token: i2.GlobalMessageService }, { token: i2.AuthRedirectService }, { token: i2.AuthService }], target: i0.ɵɵFactoryTarget.Injectable });\nUpdatePasswordComponentService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"15.2.4\", ngImport: i0, type: UpdatePasswordComponentService });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"15.2.4\", ngImport: i0, type: UpdatePasswordComponentService, decorators: [{\n            type: Injectable\n        }], ctorParameters: function () { return [{ type: i1.UserPasswordFacade }, { type: i2.RoutingService }, { type: i2.GlobalMessageService }, { type: i2.AuthRedirectService }, { type: i2.AuthService }]; } });\n\n/*\n * SPDX-FileCopyrightText: 2023 SAP Spartacus team <spartacus-team@sap.com>\n *\n * SPDX-License-Identifier: Apache-2.0\n */\nclass UpdatePasswordComponent {\n    constructor(service) {\n        this.service = service;\n        this.form = this.service.form;\n        this.isUpdating$ = this.service.isUpdating$;\n    }\n    onSubmit() {\n        this.service.updatePassword();\n    }\n}\nUpdatePasswordComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"15.2.4\", ngImport: i0, type: UpdatePasswordComponent, deps: [{ token: UpdatePasswordComponentService }], target: i0.ɵɵFactoryTarget.Component });\nUpdatePasswordComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"14.0.0\", version: \"15.2.4\", type: UpdatePasswordComponent, selector: \"cx-update-password\", host: { classAttribute: \"user-form\" }, ngImport: i0, template: \"<cx-spinner class=\\\"overlay\\\" *ngIf=\\\"isUpdating$ | async\\\"> </cx-spinner>\\n\\n<form (ngSubmit)=\\\"onSubmit()\\\" [formGroup]=\\\"form\\\">\\n  <label>\\n    <span class=\\\"label-content\\\">{{\\n      'updatePasswordForm.oldPassword.label' | cxTranslate\\n    }}</span>\\n    <input\\n      required=\\\"true\\\"\\n      class=\\\"form-control\\\"\\n      type=\\\"password\\\"\\n      name=\\\"oldPassword\\\"\\n      placeholder=\\\"{{\\n        'updatePasswordForm.oldPassword.placeholder' | cxTranslate\\n      }}\\\"\\n      formControlName=\\\"oldPassword\\\"\\n      [attr.aria-label]=\\\"\\n        'updatePasswordForm.oldPassword.placeholder' | cxTranslate\\n      \\\"\\n      cxPasswordVisibilitySwitch\\n    />\\n    <cx-form-errors [control]=\\\"form.get('oldPassword')\\\"></cx-form-errors>\\n  </label>\\n\\n  <label>\\n    <span class=\\\"label-content\\\">{{\\n      'updatePasswordForm.newPassword.label' | cxTranslate\\n    }}</span>\\n    <input\\n      required=\\\"true\\\"\\n      class=\\\"form-control\\\"\\n      type=\\\"password\\\"\\n      name=\\\"newPassword\\\"\\n      placeholder=\\\"{{\\n        'updatePasswordForm.newPassword.placeholder' | cxTranslate\\n      }}\\\"\\n      formControlName=\\\"newPassword\\\"\\n      [attr.aria-label]=\\\"\\n        'updatePasswordForm.newPassword.placeholder' | cxTranslate\\n      \\\"\\n      cxPasswordVisibilitySwitch\\n    />\\n    <cx-form-errors [control]=\\\"form.get('newPassword')\\\"></cx-form-errors>\\n  </label>\\n\\n  <label>\\n    <span class=\\\"label-content\\\">{{\\n      'updatePasswordForm.confirmPassword.label' | cxTranslate\\n    }}</span>\\n    <input\\n      required=\\\"true\\\"\\n      class=\\\"form-control\\\"\\n      type=\\\"password\\\"\\n      name=\\\"newPasswordConfirm\\\"\\n      placeholder=\\\"{{\\n        'updatePasswordForm.confirmPassword.placeholder' | cxTranslate\\n      }}\\\"\\n      formControlName=\\\"newPasswordConfirm\\\"\\n      [attr.aria-label]=\\\"\\n        'updatePasswordForm.confirmPassword.placeholder' | cxTranslate\\n      \\\"\\n      cxPasswordVisibilitySwitch\\n    />\\n    <cx-form-errors [control]=\\\"form.get('newPasswordConfirm')\\\"></cx-form-errors>\\n  </label>\\n\\n  <a\\n    class=\\\"btn btn-block btn-secondary\\\"\\n    [routerLink]=\\\"{ cxRoute: 'home' } | cxUrl\\\"\\n  >\\n    {{ 'common.cancel' | cxTranslate }}\\n  </a>\\n\\n  <button class=\\\"btn btn-block btn-primary\\\" [disabled]=\\\"form.disabled\\\">\\n    {{ 'common.save' | cxTranslate }}\\n  </button>\\n</form>\\n\", dependencies: [{ kind: \"directive\", type: i2$1.NgIf, selector: \"[ngIf]\", inputs: [\"ngIf\", \"ngIfThen\", \"ngIfElse\"] }, { kind: \"directive\", type: i3.ɵNgNoValidate, selector: \"form:not([ngNoForm]):not([ngNativeValidate])\" }, { kind: \"directive\", type: i3.DefaultValueAccessor, selector: \"input:not([type=checkbox])[formControlName],textarea[formControlName],input:not([type=checkbox])[formControl],textarea[formControl],input:not([type=checkbox])[ngModel],textarea[ngModel],[ngDefaultControl]\" }, { kind: \"directive\", type: i3.NgControlStatus, selector: \"[formControlName],[ngModel],[formControl]\" }, { kind: \"directive\", type: i3.NgControlStatusGroup, selector: \"[formGroupName],[formArrayName],[ngModelGroup],[formGroup],form:not([ngNoForm]),[ngForm]\" }, { kind: \"directive\", type: i3.RequiredValidator, selector: \":not([type=checkbox])[required][formControlName],:not([type=checkbox])[required][formControl],:not([type=checkbox])[required][ngModel]\", inputs: [\"required\"] }, { kind: \"directive\", type: i3.FormGroupDirective, selector: \"[formGroup]\", inputs: [\"formGroup\"], outputs: [\"ngSubmit\"], exportAs: [\"ngForm\"] }, { kind: \"directive\", type: i3.FormControlName, selector: \"[formControlName]\", inputs: [\"formControlName\", \"disabled\", \"ngModel\"], outputs: [\"ngModelChange\"] }, { kind: \"component\", type: i4.SpinnerComponent, selector: \"cx-spinner\" }, { kind: \"component\", type: i4.FormErrorsComponent, selector: \"cx-form-errors\", inputs: [\"prefix\", \"translationParams\", \"control\"] }, { kind: \"directive\", type: i5.RouterLink, selector: \"[routerLink]\", inputs: [\"target\", \"queryParams\", \"fragment\", \"queryParamsHandling\", \"state\", \"relativeTo\", \"preserveFragment\", \"skipLocationChange\", \"replaceUrl\", \"routerLink\"] }, { kind: \"directive\", type: i4.PasswordVisibilityToggleDirective, selector: \"[cxPasswordVisibilitySwitch][type=\\\"password\\\"]\" }, { kind: \"pipe\", type: i2$1.AsyncPipe, name: \"async\" }, { kind: \"pipe\", type: i2.TranslatePipe, name: \"cxTranslate\" }, { kind: \"pipe\", type: i2.UrlPipe, name: \"cxUrl\" }], changeDetection: i0.ChangeDetectionStrategy.OnPush });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"15.2.4\", ngImport: i0, type: UpdatePasswordComponent, decorators: [{\n            type: Component,\n            args: [{ selector: 'cx-update-password', changeDetection: ChangeDetectionStrategy.OnPush, host: { class: 'user-form' }, template: \"<cx-spinner class=\\\"overlay\\\" *ngIf=\\\"isUpdating$ | async\\\"> </cx-spinner>\\n\\n<form (ngSubmit)=\\\"onSubmit()\\\" [formGroup]=\\\"form\\\">\\n  <label>\\n    <span class=\\\"label-content\\\">{{\\n      'updatePasswordForm.oldPassword.label' | cxTranslate\\n    }}</span>\\n    <input\\n      required=\\\"true\\\"\\n      class=\\\"form-control\\\"\\n      type=\\\"password\\\"\\n      name=\\\"oldPassword\\\"\\n      placeholder=\\\"{{\\n        'updatePasswordForm.oldPassword.placeholder' | cxTranslate\\n      }}\\\"\\n      formControlName=\\\"oldPassword\\\"\\n      [attr.aria-label]=\\\"\\n        'updatePasswordForm.oldPassword.placeholder' | cxTranslate\\n      \\\"\\n      cxPasswordVisibilitySwitch\\n    />\\n    <cx-form-errors [control]=\\\"form.get('oldPassword')\\\"></cx-form-errors>\\n  </label>\\n\\n  <label>\\n    <span class=\\\"label-content\\\">{{\\n      'updatePasswordForm.newPassword.label' | cxTranslate\\n    }}</span>\\n    <input\\n      required=\\\"true\\\"\\n      class=\\\"form-control\\\"\\n      type=\\\"password\\\"\\n      name=\\\"newPassword\\\"\\n      placeholder=\\\"{{\\n        'updatePasswordForm.newPassword.placeholder' | cxTranslate\\n      }}\\\"\\n      formControlName=\\\"newPassword\\\"\\n      [attr.aria-label]=\\\"\\n        'updatePasswordForm.newPassword.placeholder' | cxTranslate\\n      \\\"\\n      cxPasswordVisibilitySwitch\\n    />\\n    <cx-form-errors [control]=\\\"form.get('newPassword')\\\"></cx-form-errors>\\n  </label>\\n\\n  <label>\\n    <span class=\\\"label-content\\\">{{\\n      'updatePasswordForm.confirmPassword.label' | cxTranslate\\n    }}</span>\\n    <input\\n      required=\\\"true\\\"\\n      class=\\\"form-control\\\"\\n      type=\\\"password\\\"\\n      name=\\\"newPasswordConfirm\\\"\\n      placeholder=\\\"{{\\n        'updatePasswordForm.confirmPassword.placeholder' | cxTranslate\\n      }}\\\"\\n      formControlName=\\\"newPasswordConfirm\\\"\\n      [attr.aria-label]=\\\"\\n        'updatePasswordForm.confirmPassword.placeholder' | cxTranslate\\n      \\\"\\n      cxPasswordVisibilitySwitch\\n    />\\n    <cx-form-errors [control]=\\\"form.get('newPasswordConfirm')\\\"></cx-form-errors>\\n  </label>\\n\\n  <a\\n    class=\\\"btn btn-block btn-secondary\\\"\\n    [routerLink]=\\\"{ cxRoute: 'home' } | cxUrl\\\"\\n  >\\n    {{ 'common.cancel' | cxTranslate }}\\n  </a>\\n\\n  <button class=\\\"btn btn-block btn-primary\\\" [disabled]=\\\"form.disabled\\\">\\n    {{ 'common.save' | cxTranslate }}\\n  </button>\\n</form>\\n\" }]\n        }], ctorParameters: function () { return [{ type: UpdatePasswordComponentService }]; } });\n\n/*\n * SPDX-FileCopyrightText: 2023 SAP Spartacus team <spartacus-team@sap.com>\n *\n * SPDX-License-Identifier: Apache-2.0\n */\nclass UpdatePasswordModule {\n}\nUpdatePasswordModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"15.2.4\", ngImport: i0, type: UpdatePasswordModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });\nUpdatePasswordModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"14.0.0\", version: \"15.2.4\", ngImport: i0, type: UpdatePasswordModule, declarations: [UpdatePasswordComponent], imports: [CommonModule,\n        FormsModule,\n        ReactiveFormsModule,\n        SpinnerModule,\n        I18nModule,\n        FormErrorsModule,\n        UrlModule,\n        RouterModule,\n        PasswordVisibilityToggleModule] });\nUpdatePasswordModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"15.2.4\", ngImport: i0, type: UpdatePasswordModule, providers: [\n        provideDefaultConfig({\n            cmsComponents: {\n                UpdatePasswordComponent: {\n                    component: UpdatePasswordComponent,\n                    guards: [AuthGuard],\n                    providers: [\n                        {\n                            provide: UpdatePasswordComponentService,\n                            useClass: UpdatePasswordComponentService,\n                            deps: [\n                                UserPasswordFacade,\n                                RoutingService,\n                                GlobalMessageService,\n                                AuthRedirectService,\n                                AuthService,\n                            ],\n                        },\n                    ],\n                },\n            },\n        }),\n    ], imports: [CommonModule,\n        FormsModule,\n        ReactiveFormsModule,\n        SpinnerModule,\n        I18nModule,\n        FormErrorsModule,\n        UrlModule,\n        RouterModule,\n        PasswordVisibilityToggleModule] });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"15.2.4\", ngImport: i0, type: UpdatePasswordModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    imports: [\n                        CommonModule,\n                        FormsModule,\n                        ReactiveFormsModule,\n                        SpinnerModule,\n                        I18nModule,\n                        FormErrorsModule,\n                        UrlModule,\n                        RouterModule,\n                        PasswordVisibilityToggleModule,\n                    ],\n                    providers: [\n                        provideDefaultConfig({\n                            cmsComponents: {\n                                UpdatePasswordComponent: {\n                                    component: UpdatePasswordComponent,\n                                    guards: [AuthGuard],\n                                    providers: [\n                                        {\n                                            provide: UpdatePasswordComponentService,\n                                            useClass: UpdatePasswordComponentService,\n                                            deps: [\n                                                UserPasswordFacade,\n                                                RoutingService,\n                                                GlobalMessageService,\n                                                AuthRedirectService,\n                                                AuthService,\n                                            ],\n                                        },\n                                    ],\n                                },\n                            },\n                        }),\n                    ],\n                    declarations: [UpdatePasswordComponent],\n                }]\n        }] });\n\n/*\n * SPDX-FileCopyrightText: 2023 SAP Spartacus team <spartacus-team@sap.com>\n *\n * SPDX-License-Identifier: Apache-2.0\n */\n\n/*\n * SPDX-FileCopyrightText: 2023 SAP Spartacus team <spartacus-team@sap.com>\n *\n * SPDX-License-Identifier: Apache-2.0\n */\nclass UpdateProfileComponentService {\n    constructor(userProfile, globalMessageService) {\n        this.userProfile = userProfile;\n        this.globalMessageService = globalMessageService;\n        this.user$ = this.userProfile\n            .get()\n            .pipe(filter((user) => Boolean(user)));\n        this.busy$ = new BehaviorSubject(false);\n        this.isUpdating$ = this.user$.pipe(tap((user) => this.form.patchValue(user)), switchMap((_user) => this.busy$), tap((state) => (state === true ? this.form.disable() : this.form.enable())));\n        this.titles$ = this.userProfile.getTitles();\n        this.form = new UntypedFormGroup({\n            customerId: new UntypedFormControl(''),\n            titleCode: new UntypedFormControl(''),\n            firstName: new UntypedFormControl('', Validators.required),\n            lastName: new UntypedFormControl('', Validators.required),\n        });\n    }\n    /**\n     * Updates the user's details and handles the UI.\n     */\n    updateProfile() {\n        if (!this.form.valid) {\n            this.form.markAllAsTouched();\n            return;\n        }\n        this.busy$.next(true);\n        this.userProfile.update(this.form.value).subscribe({\n            next: () => this.onSuccess(),\n            error: (error) => this.onError(error),\n        });\n    }\n    onSuccess() {\n        this.globalMessageService.add({\n            key: 'updateProfileForm.profileUpdateSuccess',\n        }, GlobalMessageType.MSG_TYPE_CONFIRMATION);\n        this.busy$.next(false);\n        this.form.reset();\n    }\n    onError(_error) {\n        this.busy$.next(false);\n    }\n}\nUpdateProfileComponentService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"15.2.4\", ngImport: i0, type: UpdateProfileComponentService, deps: [{ token: i1.UserProfileFacade }, { token: i2.GlobalMessageService }], target: i0.ɵɵFactoryTarget.Injectable });\nUpdateProfileComponentService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"15.2.4\", ngImport: i0, type: UpdateProfileComponentService });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"15.2.4\", ngImport: i0, type: UpdateProfileComponentService, decorators: [{\n            type: Injectable\n        }], ctorParameters: function () { return [{ type: i1.UserProfileFacade }, { type: i2.GlobalMessageService }]; } });\n\n/*\n * SPDX-FileCopyrightText: 2023 SAP Spartacus team <spartacus-team@sap.com>\n *\n * SPDX-License-Identifier: Apache-2.0\n */\nclass UpdateProfileComponent {\n    constructor(service) {\n        this.service = service;\n        this.form = this.service.form;\n        this.isUpdating$ = this.service.isUpdating$;\n        this.titles$ = this.service.titles$;\n    }\n    onSubmit() {\n        this.service.updateProfile();\n    }\n}\nUpdateProfileComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"15.2.4\", ngImport: i0, type: UpdateProfileComponent, deps: [{ token: UpdateProfileComponentService }], target: i0.ɵɵFactoryTarget.Component });\nUpdateProfileComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"14.0.0\", version: \"15.2.4\", type: UpdateProfileComponent, selector: \"cx-update-profile\", host: { classAttribute: \"user-form\" }, ngImport: i0, template: \"<cx-spinner class=\\\"overlay\\\" *ngIf=\\\"isUpdating$ | async\\\"> </cx-spinner>\\n\\n<form (ngSubmit)=\\\"onSubmit()\\\" [formGroup]=\\\"form\\\">\\n  <label>\\n    <span class=\\\"label-content\\\">{{\\n      'updateProfileForm.title' | cxTranslate\\n    }}</span>\\n    <ng-select\\n      [clearable]=\\\"false\\\"\\n      [searchable]=\\\"false\\\"\\n      formControlName=\\\"titleCode\\\"\\n      id=\\\"title-select\\\"\\n      [cxNgSelectA11y]=\\\"{\\n        ariaLabel: 'updateProfileForm.title' | cxTranslate\\n      }\\\"\\n    >\\n      <ng-option *ngFor=\\\"let title of titles$ | async\\\" [value]=\\\"title.code\\\">{{\\n        title.name\\n      }}</ng-option>\\n    </ng-select>\\n  </label>\\n  <label>\\n    <span class=\\\"label-content\\\">{{\\n      'updateProfileForm.firstName.label' | cxTranslate\\n    }}</span>\\n    <input\\n      required=\\\"true\\\"\\n      type=\\\"text\\\"\\n      class=\\\"form-control\\\"\\n      name=\\\"firstName\\\"\\n      placeholder=\\\"{{\\n        'updateProfileForm.firstName.placeholder' | cxTranslate\\n      }}\\\"\\n      formControlName=\\\"firstName\\\"\\n    />\\n    <cx-form-errors [control]=\\\"form.get('firstName')\\\"></cx-form-errors>\\n  </label>\\n\\n  <label>\\n    <span class=\\\"label-content\\\">{{\\n      'updateProfileForm.lastName.label' | cxTranslate\\n    }}</span>\\n    <input\\n      required=\\\"true\\\"\\n      type=\\\"text\\\"\\n      class=\\\"form-control\\\"\\n      name=\\\"lastName\\\"\\n      placeholder=\\\"{{ 'updateProfileForm.lastName.placeholder' | cxTranslate }}\\\"\\n      formControlName=\\\"lastName\\\"\\n    />\\n    <cx-form-errors [control]=\\\"form.get('lastName')\\\"></cx-form-errors>\\n  </label>\\n\\n  <label>\\n    <span class=\\\"label-content\\\">{{\\n      'updateProfileForm.customerId' | cxTranslate\\n    }}</span>\\n    <input\\n      required=\\\"true\\\"\\n      type=\\\"text\\\"\\n      class=\\\"form-control\\\"\\n      name=\\\"customerId\\\"\\n      formControlName=\\\"customerId\\\"\\n      readonly\\n    />\\n    <cx-form-errors [control]=\\\"form.get('lastName')\\\"></cx-form-errors>\\n  </label>\\n\\n  <a\\n    class=\\\"btn btn-block btn-secondary\\\"\\n    [routerLink]=\\\"{ cxRoute: 'home' } | cxUrl\\\"\\n  >\\n    {{ 'common.cancel' | cxTranslate }}\\n  </a>\\n\\n  <button class=\\\"btn btn-block btn-primary\\\" [disabled]=\\\"form.disabled\\\">\\n    {{ 'common.save' | cxTranslate }}\\n  </button>\\n</form>\\n\", dependencies: [{ kind: \"directive\", type: i2$1.NgForOf, selector: \"[ngFor][ngForOf]\", inputs: [\"ngForOf\", \"ngForTrackBy\", \"ngForTemplate\"] }, { kind: \"directive\", type: i2$1.NgIf, selector: \"[ngIf]\", inputs: [\"ngIf\", \"ngIfThen\", \"ngIfElse\"] }, { kind: \"directive\", type: i3.ɵNgNoValidate, selector: \"form:not([ngNoForm]):not([ngNativeValidate])\" }, { kind: \"directive\", type: i3.DefaultValueAccessor, selector: \"input:not([type=checkbox])[formControlName],textarea[formControlName],input:not([type=checkbox])[formControl],textarea[formControl],input:not([type=checkbox])[ngModel],textarea[ngModel],[ngDefaultControl]\" }, { kind: \"directive\", type: i3.NgControlStatus, selector: \"[formControlName],[ngModel],[formControl]\" }, { kind: \"directive\", type: i3.NgControlStatusGroup, selector: \"[formGroupName],[formArrayName],[ngModelGroup],[formGroup],form:not([ngNoForm]),[ngForm]\" }, { kind: \"directive\", type: i3.RequiredValidator, selector: \":not([type=checkbox])[required][formControlName],:not([type=checkbox])[required][formControl],:not([type=checkbox])[required][ngModel]\", inputs: [\"required\"] }, { kind: \"directive\", type: i3.FormGroupDirective, selector: \"[formGroup]\", inputs: [\"formGroup\"], outputs: [\"ngSubmit\"], exportAs: [\"ngForm\"] }, { kind: \"directive\", type: i3.FormControlName, selector: \"[formControlName]\", inputs: [\"formControlName\", \"disabled\", \"ngModel\"], outputs: [\"ngModelChange\"] }, { kind: \"component\", type: i4.SpinnerComponent, selector: \"cx-spinner\" }, { kind: \"component\", type: i4.FormErrorsComponent, selector: \"cx-form-errors\", inputs: [\"prefix\", \"translationParams\", \"control\"] }, { kind: \"directive\", type: i5.RouterLink, selector: \"[routerLink]\", inputs: [\"target\", \"queryParams\", \"fragment\", \"queryParamsHandling\", \"state\", \"relativeTo\", \"preserveFragment\", \"skipLocationChange\", \"replaceUrl\", \"routerLink\"] }, { kind: \"component\", type: i6.NgSelectComponent, selector: \"ng-select\", inputs: [\"bindLabel\", \"bindValue\", \"markFirst\", \"placeholder\", \"notFoundText\", \"typeToSearchText\", \"addTagText\", \"loadingText\", \"clearAllText\", \"appearance\", \"dropdownPosition\", \"appendTo\", \"loading\", \"closeOnSelect\", \"hideSelected\", \"selectOnTab\", \"openOnEnter\", \"maxSelectedItems\", \"groupBy\", \"groupValue\", \"bufferAmount\", \"virtualScroll\", \"selectableGroup\", \"selectableGroupAsModel\", \"searchFn\", \"trackByFn\", \"clearOnBackspace\", \"labelForId\", \"inputAttrs\", \"tabIndex\", \"readonly\", \"searchWhileComposing\", \"minTermLength\", \"editableSearchTerm\", \"keyDownFn\", \"typeahead\", \"multiple\", \"addTag\", \"searchable\", \"clearable\", \"isOpen\", \"items\", \"compareWith\", \"clearSearchOnAdd\"], outputs: [\"blur\", \"focus\", \"change\", \"open\", \"close\", \"search\", \"clear\", \"add\", \"remove\", \"scroll\", \"scrollToEnd\"] }, { kind: \"component\", type: i6.NgOptionComponent, selector: \"ng-option\", inputs: [\"value\", \"disabled\"] }, { kind: \"directive\", type: i4.NgSelectA11yDirective, selector: \"[cxNgSelectA11y]\", inputs: [\"cxNgSelectA11y\"] }, { kind: \"pipe\", type: i2$1.AsyncPipe, name: \"async\" }, { kind: \"pipe\", type: i2.TranslatePipe, name: \"cxTranslate\" }, { kind: \"pipe\", type: i2.UrlPipe, name: \"cxUrl\" }], changeDetection: i0.ChangeDetectionStrategy.OnPush });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"15.2.4\", ngImport: i0, type: UpdateProfileComponent, decorators: [{\n            type: Component,\n            args: [{ selector: 'cx-update-profile', changeDetection: ChangeDetectionStrategy.OnPush, host: { class: 'user-form' }, template: \"<cx-spinner class=\\\"overlay\\\" *ngIf=\\\"isUpdating$ | async\\\"> </cx-spinner>\\n\\n<form (ngSubmit)=\\\"onSubmit()\\\" [formGroup]=\\\"form\\\">\\n  <label>\\n    <span class=\\\"label-content\\\">{{\\n      'updateProfileForm.title' | cxTranslate\\n    }}</span>\\n    <ng-select\\n      [clearable]=\\\"false\\\"\\n      [searchable]=\\\"false\\\"\\n      formControlName=\\\"titleCode\\\"\\n      id=\\\"title-select\\\"\\n      [cxNgSelectA11y]=\\\"{\\n        ariaLabel: 'updateProfileForm.title' | cxTranslate\\n      }\\\"\\n    >\\n      <ng-option *ngFor=\\\"let title of titles$ | async\\\" [value]=\\\"title.code\\\">{{\\n        title.name\\n      }}</ng-option>\\n    </ng-select>\\n  </label>\\n  <label>\\n    <span class=\\\"label-content\\\">{{\\n      'updateProfileForm.firstName.label' | cxTranslate\\n    }}</span>\\n    <input\\n      required=\\\"true\\\"\\n      type=\\\"text\\\"\\n      class=\\\"form-control\\\"\\n      name=\\\"firstName\\\"\\n      placeholder=\\\"{{\\n        'updateProfileForm.firstName.placeholder' | cxTranslate\\n      }}\\\"\\n      formControlName=\\\"firstName\\\"\\n    />\\n    <cx-form-errors [control]=\\\"form.get('firstName')\\\"></cx-form-errors>\\n  </label>\\n\\n  <label>\\n    <span class=\\\"label-content\\\">{{\\n      'updateProfileForm.lastName.label' | cxTranslate\\n    }}</span>\\n    <input\\n      required=\\\"true\\\"\\n      type=\\\"text\\\"\\n      class=\\\"form-control\\\"\\n      name=\\\"lastName\\\"\\n      placeholder=\\\"{{ 'updateProfileForm.lastName.placeholder' | cxTranslate }}\\\"\\n      formControlName=\\\"lastName\\\"\\n    />\\n    <cx-form-errors [control]=\\\"form.get('lastName')\\\"></cx-form-errors>\\n  </label>\\n\\n  <label>\\n    <span class=\\\"label-content\\\">{{\\n      'updateProfileForm.customerId' | cxTranslate\\n    }}</span>\\n    <input\\n      required=\\\"true\\\"\\n      type=\\\"text\\\"\\n      class=\\\"form-control\\\"\\n      name=\\\"customerId\\\"\\n      formControlName=\\\"customerId\\\"\\n      readonly\\n    />\\n    <cx-form-errors [control]=\\\"form.get('lastName')\\\"></cx-form-errors>\\n  </label>\\n\\n  <a\\n    class=\\\"btn btn-block btn-secondary\\\"\\n    [routerLink]=\\\"{ cxRoute: 'home' } | cxUrl\\\"\\n  >\\n    {{ 'common.cancel' | cxTranslate }}\\n  </a>\\n\\n  <button class=\\\"btn btn-block btn-primary\\\" [disabled]=\\\"form.disabled\\\">\\n    {{ 'common.save' | cxTranslate }}\\n  </button>\\n</form>\\n\" }]\n        }], ctorParameters: function () { return [{ type: UpdateProfileComponentService }]; } });\n\n/*\n * SPDX-FileCopyrightText: 2023 SAP Spartacus team <spartacus-team@sap.com>\n *\n * SPDX-License-Identifier: Apache-2.0\n */\nclass UpdateProfileModule {\n}\nUpdateProfileModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"15.2.4\", ngImport: i0, type: UpdateProfileModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });\nUpdateProfileModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"14.0.0\", version: \"15.2.4\", ngImport: i0, type: UpdateProfileModule, declarations: [UpdateProfileComponent], imports: [CommonModule,\n        FormsModule,\n        ReactiveFormsModule,\n        SpinnerModule,\n        I18nModule,\n        FormErrorsModule,\n        RouterModule,\n        UrlModule,\n        NgSelectModule,\n        NgSelectA11yModule] });\nUpdateProfileModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"15.2.4\", ngImport: i0, type: UpdateProfileModule, providers: [\n        provideDefaultConfig({\n            cmsComponents: {\n                UpdateProfileComponent: {\n                    component: UpdateProfileComponent,\n                    guards: [AuthGuard],\n                    providers: [\n                        {\n                            provide: UpdateProfileComponentService,\n                            useClass: UpdateProfileComponentService,\n                            deps: [UserProfileFacade, GlobalMessageService],\n                        },\n                    ],\n                },\n            },\n        }),\n    ], imports: [CommonModule,\n        FormsModule,\n        ReactiveFormsModule,\n        SpinnerModule,\n        I18nModule,\n        FormErrorsModule,\n        RouterModule,\n        UrlModule,\n        NgSelectModule,\n        NgSelectA11yModule] });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"15.2.4\", ngImport: i0, type: UpdateProfileModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    imports: [\n                        CommonModule,\n                        FormsModule,\n                        ReactiveFormsModule,\n                        SpinnerModule,\n                        I18nModule,\n                        FormErrorsModule,\n                        RouterModule,\n                        UrlModule,\n                        NgSelectModule,\n                        NgSelectA11yModule,\n                    ],\n                    providers: [\n                        provideDefaultConfig({\n                            cmsComponents: {\n                                UpdateProfileComponent: {\n                                    component: UpdateProfileComponent,\n                                    guards: [AuthGuard],\n                                    providers: [\n                                        {\n                                            provide: UpdateProfileComponentService,\n                                            useClass: UpdateProfileComponentService,\n                                            deps: [UserProfileFacade, GlobalMessageService],\n                                        },\n                                    ],\n                                },\n                            },\n                        }),\n                    ],\n                    declarations: [UpdateProfileComponent],\n                }]\n        }] });\n\n/*\n * SPDX-FileCopyrightText: 2023 SAP Spartacus team <spartacus-team@sap.com>\n *\n * SPDX-License-Identifier: Apache-2.0\n */\n\n/*\n * SPDX-FileCopyrightText: 2023 SAP Spartacus team <spartacus-team@sap.com>\n *\n * SPDX-License-Identifier: Apache-2.0\n */\nclass UserProfileComponentsModule {\n}\nUserProfileComponentsModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"15.2.4\", ngImport: i0, type: UserProfileComponentsModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });\nUserProfileComponentsModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"14.0.0\", version: \"15.2.4\", ngImport: i0, type: UserProfileComponentsModule, imports: [RegisterComponentModule,\n        UpdateProfileModule,\n        UpdateEmailModule,\n        UpdatePasswordModule,\n        ForgotPasswordModule,\n        ResetPasswordModule,\n        CloseAccountModule] });\nUserProfileComponentsModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"15.2.4\", ngImport: i0, type: UserProfileComponentsModule, imports: [RegisterComponentModule,\n        UpdateProfileModule,\n        UpdateEmailModule,\n        UpdatePasswordModule,\n        ForgotPasswordModule,\n        ResetPasswordModule,\n        CloseAccountModule] });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"15.2.4\", ngImport: i0, type: UserProfileComponentsModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    imports: [\n                        RegisterComponentModule,\n                        UpdateProfileModule,\n                        UpdateEmailModule,\n                        UpdatePasswordModule,\n                        ForgotPasswordModule,\n                        ResetPasswordModule,\n                        CloseAccountModule,\n                    ],\n                }]\n        }] });\n\n/*\n * SPDX-FileCopyrightText: 2023 SAP Spartacus team <spartacus-team@sap.com>\n *\n * SPDX-License-Identifier: Apache-2.0\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { CloseAccountComponent, CloseAccountModalComponent, CloseAccountModule, ForgotPasswordComponent, ForgotPasswordComponentService, ForgotPasswordModule, RegisterComponent, RegisterComponentModule, RegisterComponentService, ResetPasswordComponent, ResetPasswordComponentService, ResetPasswordModule, UpdateEmailComponent, UpdateEmailComponentService, UpdateEmailModule, UpdatePasswordComponent, UpdatePasswordComponentService, UpdatePasswordModule, UpdateProfileComponent, UpdateProfileComponentService, UpdateProfileModule, UserProfileComponentsModule };\n","import * as i0 from '@angular/core';\nimport { InjectionToken, Injectable, NgModule } from '@angular/core';\nimport * as i2 from '@spartacus/core';\nimport { CommandStrategy, LanguageSetEvent, UserActions } from '@spartacus/core';\nimport { switchMap, take, tap, map } from 'rxjs/operators';\nimport * as i1 from '@spartacus/user/account/root';\nimport { UserAccountChangedEvent } from '@spartacus/user/account/root';\nimport * as i4 from '@ngrx/store';\nimport { UserEmailFacade, UserPasswordFacade, UserProfileFacade, UserRegisterFacade } from '@spartacus/user/profile/root';\n\n/*\n * SPDX-FileCopyrightText: 2023 SAP Spartacus team <spartacus-team@sap.com>\n *\n * SPDX-License-Identifier: Apache-2.0\n */\nconst USER_PROFILE_NORMALIZER = new InjectionToken('UserProfileNormalizer');\nconst USER_PROFILE_SERIALIZER = new InjectionToken('UserProfileSerializer');\nconst USER_SERIALIZER = new InjectionToken('UserSerializer');\nconst USER_SIGN_UP_SERIALIZER = new InjectionToken('UserSignUpSerializer');\nconst TITLE_NORMALIZER = new InjectionToken('TitleNormalizer');\n\n/*\n * SPDX-FileCopyrightText: 2023 SAP Spartacus team <spartacus-team@sap.com>\n *\n * SPDX-License-Identifier: Apache-2.0\n */\nclass UserProfileAdapter {\n}\n\n/*\n * SPDX-FileCopyrightText: 2023 SAP Spartacus team <spartacus-team@sap.com>\n *\n * SPDX-License-Identifier: Apache-2.0\n */\nclass UserProfileConnector {\n    constructor(userProfileAdapter) {\n        this.userProfileAdapter = userProfileAdapter;\n    }\n    update(username, user) {\n        return this.userProfileAdapter.update(username, user);\n    }\n    register(user) {\n        return this.userProfileAdapter.register(user);\n    }\n    registerGuest(guid, password) {\n        return this.userProfileAdapter.registerGuest(guid, password);\n    }\n    requestForgotPasswordEmail(userEmailAddress) {\n        return this.userProfileAdapter.requestForgotPasswordEmail(userEmailAddress);\n    }\n    resetPassword(token, newPassword) {\n        return this.userProfileAdapter.resetPassword(token, newPassword);\n    }\n    updateEmail(userId, currentPassword, newUserId) {\n        return this.userProfileAdapter.updateEmail(userId, currentPassword, newUserId);\n    }\n    updatePassword(userId, oldPassword, newPassword) {\n        return this.userProfileAdapter.updatePassword(userId, oldPassword, newPassword);\n    }\n    remove(userId) {\n        return this.userProfileAdapter.close(userId);\n    }\n    getTitles() {\n        return this.userProfileAdapter.loadTitles();\n    }\n}\nUserProfileConnector.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"15.2.4\", ngImport: i0, type: UserProfileConnector, deps: [{ token: UserProfileAdapter }], target: i0.ɵɵFactoryTarget.Injectable });\nUserProfileConnector.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"15.2.4\", ngImport: i0, type: UserProfileConnector });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"15.2.4\", ngImport: i0, type: UserProfileConnector, decorators: [{\n            type: Injectable\n        }], ctorParameters: function () { return [{ type: UserProfileAdapter }]; } });\n\n/*\n * SPDX-FileCopyrightText: 2023 SAP Spartacus team <spartacus-team@sap.com>\n *\n * SPDX-License-Identifier: Apache-2.0\n */\n\n/*\n * SPDX-FileCopyrightText: 2023 SAP Spartacus team <spartacus-team@sap.com>\n *\n * SPDX-License-Identifier: Apache-2.0\n */\nclass UserEmailService {\n    constructor(userIdService, userProfileConnector, command) {\n        this.userIdService = userIdService;\n        this.userProfileConnector = userProfileConnector;\n        this.command = command;\n        this.updateCommand = this.command.create((payload) => this.userIdService\n            .takeUserId(true)\n            .pipe(switchMap((uid) => this.userProfileConnector.updateEmail(uid, payload.password, payload.newUid))), {\n            strategy: CommandStrategy.Queue,\n        });\n    }\n    /**\n     * Updates the user's email.\n     *\n     * @param password to users password to confirm the users\n     * @param newUid the new proposed email address.\n     */\n    update(password, newUid) {\n        return this.updateCommand.execute({ password, newUid });\n    }\n}\nUserEmailService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"15.2.4\", ngImport: i0, type: UserEmailService, deps: [{ token: i2.UserIdService }, { token: UserProfileConnector }, { token: i2.CommandService }], target: i0.ɵɵFactoryTarget.Injectable });\nUserEmailService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"15.2.4\", ngImport: i0, type: UserEmailService });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"15.2.4\", ngImport: i0, type: UserEmailService, decorators: [{\n            type: Injectable\n        }], ctorParameters: function () { return [{ type: i2.UserIdService }, { type: UserProfileConnector }, { type: i2.CommandService }]; } });\n\n/*\n * SPDX-FileCopyrightText: 2023 SAP Spartacus team <spartacus-team@sap.com>\n *\n * SPDX-License-Identifier: Apache-2.0\n */\nclass UserPasswordService {\n    constructor(userProfileConnector, userIdService, command) {\n        this.userProfileConnector = userProfileConnector;\n        this.userIdService = userIdService;\n        this.command = command;\n        this.updateCommand = this.command.create((payload) => this.userIdService.takeUserId(true).pipe(take(1), switchMap((uid) => this.userProfileConnector.updatePassword(uid, payload.oldPassword, payload.newPassword))));\n        this.resetCommand = this.command.create((payload) => this.userProfileConnector.resetPassword(payload.token, payload.password));\n        this.requestForgotPasswordEmailCommand = this.command.create((payload) => this.userProfileConnector.requestForgotPasswordEmail(payload.email));\n    }\n    /**\n     * Updates the password for the user\n     *\n     * The method returns an observable with `LoaderState` information, including the\n     * actual user data.\n     *\n     * @param oldPassword the current password that will be changed\n     * @param newPassword the new password\n     */\n    update(oldPassword, newPassword) {\n        return this.updateCommand.execute({ oldPassword, newPassword });\n    }\n    /**\n     * Reset new password. Part of the forgot password flow.\n     *\n     * @param token\n     * @param password\n     */\n    reset(token, password) {\n        return this.resetCommand.execute({ token, password });\n    }\n    /*\n     * Request an email to reset a forgotten password.\n     */\n    requestForgotPasswordEmail(email) {\n        return this.requestForgotPasswordEmailCommand.execute({ email });\n    }\n}\nUserPasswordService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"15.2.4\", ngImport: i0, type: UserPasswordService, deps: [{ token: UserProfileConnector }, { token: i2.UserIdService }, { token: i2.CommandService }], target: i0.ɵɵFactoryTarget.Injectable });\nUserPasswordService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"15.2.4\", ngImport: i0, type: UserPasswordService });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"15.2.4\", ngImport: i0, type: UserPasswordService, decorators: [{\n            type: Injectable\n        }], ctorParameters: function () { return [{ type: UserProfileConnector }, { type: i2.UserIdService }, { type: i2.CommandService }]; } });\n\n/*\n * SPDX-FileCopyrightText: 2023 SAP Spartacus team <spartacus-team@sap.com>\n *\n * SPDX-License-Identifier: Apache-2.0\n */\nclass UserProfileService {\n    constructor(userAccountService, authService, userProfileConnector, eventService, userIdService, query, command) {\n        this.userAccountService = userAccountService;\n        this.authService = authService;\n        this.userProfileConnector = userProfileConnector;\n        this.eventService = eventService;\n        this.userIdService = userIdService;\n        this.query = query;\n        this.command = command;\n        this.updateCommand = this.command.create((payload) => this.userIdService.takeUserId(true).pipe(switchMap((uid) => this.userProfileConnector.update(uid, payload.details).pipe(tap(() => {\n            this.eventService.dispatch({ user: payload.details }, UserAccountChangedEvent);\n        })))), {\n            strategy: CommandStrategy.Queue,\n        });\n        this.closeCommand = this.command.create(() => this.userIdService\n            .takeUserId(true)\n            .pipe(switchMap((uid) => this.userProfileConnector\n            .remove(uid)\n            .pipe(tap(() => this.authService.logout())))));\n        this.titleQuery = this.query.create(() => this.userProfileConnector.getTitles(), {\n            reloadOn: [LanguageSetEvent],\n        });\n    }\n    get() {\n        return this.userAccountService.get();\n    }\n    /**\n     * Updates the user's details.\n     *\n     * @param details User details to be updated.\n     */\n    update(details) {\n        return this.updateCommand.execute({ details });\n    }\n    /**\n     * Closes the user account.\n     */\n    close() {\n        return this.closeCommand.execute(undefined);\n    }\n    /**\n     * Returns titles that can be used for the user profiles.\n     */\n    getTitles() {\n        return this.titleQuery.get().pipe(map((titles) => titles ?? []));\n    }\n}\nUserProfileService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"15.2.4\", ngImport: i0, type: UserProfileService, deps: [{ token: i1.UserAccountFacade }, { token: i2.AuthService }, { token: UserProfileConnector }, { token: i2.EventService }, { token: i2.UserIdService }, { token: i2.QueryService }, { token: i2.CommandService }], target: i0.ɵɵFactoryTarget.Injectable });\nUserProfileService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"15.2.4\", ngImport: i0, type: UserProfileService });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"15.2.4\", ngImport: i0, type: UserProfileService, decorators: [{\n            type: Injectable\n        }], ctorParameters: function () { return [{ type: i1.UserAccountFacade }, { type: i2.AuthService }, { type: UserProfileConnector }, { type: i2.EventService }, { type: i2.UserIdService }, { type: i2.QueryService }, { type: i2.CommandService }]; } });\n\n/*\n * SPDX-FileCopyrightText: 2023 SAP Spartacus team <spartacus-team@sap.com>\n *\n * SPDX-License-Identifier: Apache-2.0\n */\nclass UserRegisterService {\n    constructor(userProfile, userConnector, authService, command, store) {\n        this.userProfile = userProfile;\n        this.userConnector = userConnector;\n        this.authService = authService;\n        this.command = command;\n        this.store = store;\n        this.registerCommand = this.command.create(({ user }) => this.userConnector.register(user).pipe(tap(() => {\n            // this is a compatibility mechanism only, to make anonymous consents\n            // management work properly in transitional period (when we move logic\n            // to separate libraries)\n            this.store.dispatch(new UserActions.RegisterUserSuccess());\n        })));\n        this.registerGuestCommand = this.command.create((payload) => this.userConnector.registerGuest(payload.guid, payload.password).pipe(tap((user) => {\n            // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n            this.authService.loginWithCredentials(user.uid, payload.password);\n        })));\n    }\n    /**\n     * Register a new user.\n     *\n     * @param submitFormData as UserRegisterFormData\n     */\n    register(user) {\n        return this.registerCommand.execute({ user });\n    }\n    /**\n     * Register a new user from guest.\n     *\n     * @param guid\n     * @param password\n     */\n    registerGuest(guid, password) {\n        return this.registerGuestCommand.execute({ guid, password });\n    }\n    /**\n     * Returns titles that can be used for the user profiles.\n     */\n    getTitles() {\n        return this.userProfile.getTitles();\n    }\n}\nUserRegisterService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"15.2.4\", ngImport: i0, type: UserRegisterService, deps: [{ token: UserProfileService }, { token: UserProfileConnector }, { token: i2.AuthService }, { token: i2.CommandService }, { token: i4.Store }], target: i0.ɵɵFactoryTarget.Injectable });\nUserRegisterService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"15.2.4\", ngImport: i0, type: UserRegisterService });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"15.2.4\", ngImport: i0, type: UserRegisterService, decorators: [{\n            type: Injectable\n        }], ctorParameters: function () { return [{ type: UserProfileService }, { type: UserProfileConnector }, { type: i2.AuthService }, { type: i2.CommandService }, { type: i4.Store }]; } });\n\n/*\n * SPDX-FileCopyrightText: 2023 SAP Spartacus team <spartacus-team@sap.com>\n *\n * SPDX-License-Identifier: Apache-2.0\n */\n\n/*\n * SPDX-FileCopyrightText: 2023 SAP Spartacus team <spartacus-team@sap.com>\n *\n * SPDX-License-Identifier: Apache-2.0\n */\nconst facadeProviders = [\n    UserEmailService,\n    UserPasswordService,\n    UserProfileService,\n    UserRegisterService,\n    {\n        provide: UserEmailFacade,\n        useExisting: UserEmailService,\n    },\n    {\n        provide: UserPasswordFacade,\n        useExisting: UserPasswordService,\n    },\n    {\n        provide: UserProfileFacade,\n        useExisting: UserProfileService,\n    },\n    {\n        provide: UserRegisterFacade,\n        useExisting: UserRegisterService,\n    },\n];\n\n/*\n * SPDX-FileCopyrightText: 2023 SAP Spartacus team <spartacus-team@sap.com>\n *\n * SPDX-License-Identifier: Apache-2.0\n */\nclass UserProfileCoreModule {\n}\nUserProfileCoreModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"15.2.4\", ngImport: i0, type: UserProfileCoreModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });\nUserProfileCoreModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"14.0.0\", version: \"15.2.4\", ngImport: i0, type: UserProfileCoreModule });\nUserProfileCoreModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"15.2.4\", ngImport: i0, type: UserProfileCoreModule, providers: [UserProfileConnector, ...facadeProviders] });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"15.2.4\", ngImport: i0, type: UserProfileCoreModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    providers: [UserProfileConnector, ...facadeProviders],\n                }]\n        }] });\n\n/*\n * SPDX-FileCopyrightText: 2023 SAP Spartacus team <spartacus-team@sap.com>\n *\n * SPDX-License-Identifier: Apache-2.0\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { TITLE_NORMALIZER, USER_PROFILE_NORMALIZER, USER_PROFILE_SERIALIZER, USER_SERIALIZER, USER_SIGN_UP_SERIALIZER, UserEmailService, UserPasswordService, UserProfileAdapter, UserProfileConnector, UserProfileCoreModule, UserProfileService, UserRegisterService };\n","import * as i1 from '@angular/common/http';\nimport { HttpHeaders, HttpParams } from '@angular/common/http';\nimport * as i0 from '@angular/core';\nimport { inject, Injectable, NgModule } from '@angular/core';\nimport * as i2 from '@spartacus/core';\nimport { LoggerService, normalizeHttpError, InterceptorUtil, USE_CLIENT_TOKEN, provideDefaultConfig } from '@spartacus/core';\nimport { USER_PROFILE_SERIALIZER, USER_SIGN_UP_SERIALIZER, USER_PROFILE_NORMALIZER, TITLE_NORMALIZER, UserProfileAdapter } from '@spartacus/user/profile/core';\nimport { throwError } from 'rxjs';\nimport { catchError, map } from 'rxjs/operators';\n\n/*\n * SPDX-FileCopyrightText: 2023 SAP Spartacus team <spartacus-team@sap.com>\n *\n * SPDX-License-Identifier: Apache-2.0\n */\nconst defaultOccUserProfileConfig = {\n    backend: {\n        occ: {\n            endpoints: {\n                userRegister: 'users',\n                userForgotPassword: 'forgottenpasswordtokens',\n                userResetPassword: 'resetpassword',\n                userUpdateLoginId: 'users/${userId}/login',\n                userUpdatePassword: 'users/${userId}/password',\n                titles: 'titles',\n            },\n        },\n    },\n};\n\n/*\n * SPDX-FileCopyrightText: 2023 SAP Spartacus team <spartacus-team@sap.com>\n *\n * SPDX-License-Identifier: Apache-2.0\n */\n\n/*\n * SPDX-FileCopyrightText: 2023 SAP Spartacus team <spartacus-team@sap.com>\n *\n * SPDX-License-Identifier: Apache-2.0\n */\n\n/*\n * SPDX-FileCopyrightText: 2023 SAP Spartacus team <spartacus-team@sap.com>\n *\n * SPDX-License-Identifier: Apache-2.0\n */\nconst CONTENT_TYPE_JSON_HEADER = { 'Content-Type': 'application/json' };\nconst CONTENT_TYPE_URLENCODED_HEADER = {\n    'Content-Type': 'application/x-www-form-urlencoded',\n};\nclass OccUserProfileAdapter {\n    constructor(http, occEndpoints, converter) {\n        this.http = http;\n        this.occEndpoints = occEndpoints;\n        this.converter = converter;\n        this.logger = inject(LoggerService);\n    }\n    update(userId, user) {\n        const endpoint = this.occEndpoints.isConfigured('userUpdateProfile')\n            ? 'userUpdateProfile'\n            : 'user';\n        const url = this.occEndpoints.buildUrl(endpoint, { urlParams: { userId } });\n        user = this.converter.convert(user, USER_PROFILE_SERIALIZER);\n        return this.http\n            .patch(url, user)\n            .pipe(catchError((error) => throwError(normalizeHttpError(error, this.logger))));\n    }\n    register(user) {\n        const url = this.occEndpoints.buildUrl('userRegister');\n        let headers = new HttpHeaders({\n            ...CONTENT_TYPE_JSON_HEADER,\n        });\n        headers = InterceptorUtil.createHeader(USE_CLIENT_TOKEN, true, headers);\n        user = this.converter.convert(user, USER_SIGN_UP_SERIALIZER);\n        return this.http.post(url, user, { headers }).pipe(catchError((error) => throwError(normalizeHttpError(error, this.logger))), this.converter.pipeable(USER_PROFILE_NORMALIZER));\n    }\n    registerGuest(guid, password) {\n        const url = this.occEndpoints.buildUrl('userRegister');\n        let headers = new HttpHeaders({\n            ...CONTENT_TYPE_URLENCODED_HEADER,\n        });\n        headers = InterceptorUtil.createHeader(USE_CLIENT_TOKEN, true, headers);\n        const httpParams = new HttpParams()\n            .set('guid', guid)\n            .set('password', password);\n        return this.http.post(url, httpParams, { headers }).pipe(catchError((error) => throwError(normalizeHttpError(error, this.logger))), this.converter.pipeable(USER_PROFILE_NORMALIZER));\n    }\n    requestForgotPasswordEmail(userEmailAddress) {\n        const url = this.occEndpoints.buildUrl('userForgotPassword');\n        const httpParams = new HttpParams().set('userId', userEmailAddress);\n        let headers = new HttpHeaders({\n            ...CONTENT_TYPE_URLENCODED_HEADER,\n        });\n        headers = InterceptorUtil.createHeader(USE_CLIENT_TOKEN, true, headers);\n        return this.http\n            .post(url, httpParams, { headers })\n            .pipe(catchError((error) => throwError(normalizeHttpError(error, this.logger))));\n    }\n    resetPassword(token, newPassword) {\n        const url = this.occEndpoints.buildUrl('userResetPassword');\n        let headers = new HttpHeaders({\n            ...CONTENT_TYPE_JSON_HEADER,\n        });\n        headers = InterceptorUtil.createHeader(USE_CLIENT_TOKEN, true, headers);\n        return this.http\n            .post(url, { token, newPassword }, { headers })\n            .pipe(catchError((error) => throwError(normalizeHttpError(error, this.logger))));\n    }\n    updateEmail(userId, currentPassword, newUserId) {\n        const url = this.occEndpoints.buildUrl('userUpdateLoginId', {\n            urlParams: { userId },\n        });\n        const httpParams = new HttpParams()\n            .set('password', currentPassword)\n            .set('newLogin', newUserId);\n        const headers = new HttpHeaders({\n            ...CONTENT_TYPE_URLENCODED_HEADER,\n        });\n        return this.http\n            .put(url, httpParams, { headers })\n            .pipe(catchError((error) => throwError(normalizeHttpError(error, this.logger))));\n    }\n    updatePassword(userId, oldPassword, newPassword) {\n        const url = this.occEndpoints.buildUrl('userUpdatePassword', {\n            urlParams: { userId },\n        });\n        const httpParams = new HttpParams()\n            .set('old', oldPassword)\n            .set('new', newPassword);\n        const headers = new HttpHeaders({\n            ...CONTENT_TYPE_URLENCODED_HEADER,\n        });\n        return this.http\n            .put(url, httpParams, { headers })\n            .pipe(catchError((error) => throwError(normalizeHttpError(error, this.logger))));\n    }\n    close(userId) {\n        const endpoint = this.occEndpoints.isConfigured('userCloseAccount')\n            ? 'userCloseAccount'\n            : 'user';\n        const url = this.occEndpoints.buildUrl(endpoint, { urlParams: { userId } });\n        return this.http\n            .delete(url)\n            .pipe(catchError((error) => throwError(normalizeHttpError(error, this.logger))));\n    }\n    loadTitles() {\n        const url = this.occEndpoints.buildUrl('titles');\n        return this.http.get(url).pipe(catchError((error) => throwError(normalizeHttpError(error, this.logger))), map((titleList) => titleList.titles ?? []), this.converter.pipeableMany(TITLE_NORMALIZER));\n    }\n}\nOccUserProfileAdapter.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"15.2.4\", ngImport: i0, type: OccUserProfileAdapter, deps: [{ token: i1.HttpClient }, { token: i2.OccEndpointsService }, { token: i2.ConverterService }], target: i0.ɵɵFactoryTarget.Injectable });\nOccUserProfileAdapter.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"15.2.4\", ngImport: i0, type: OccUserProfileAdapter });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"15.2.4\", ngImport: i0, type: OccUserProfileAdapter, decorators: [{\n            type: Injectable\n        }], ctorParameters: function () { return [{ type: i1.HttpClient }, { type: i2.OccEndpointsService }, { type: i2.ConverterService }]; } });\n\n/*\n * SPDX-FileCopyrightText: 2023 SAP Spartacus team <spartacus-team@sap.com>\n *\n * SPDX-License-Identifier: Apache-2.0\n */\n\n/*\n * SPDX-FileCopyrightText: 2023 SAP Spartacus team <spartacus-team@sap.com>\n *\n * SPDX-License-Identifier: Apache-2.0\n */\nclass UserProfileOccModule {\n}\nUserProfileOccModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"15.2.4\", ngImport: i0, type: UserProfileOccModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });\nUserProfileOccModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"14.0.0\", version: \"15.2.4\", ngImport: i0, type: UserProfileOccModule });\nUserProfileOccModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"15.2.4\", ngImport: i0, type: UserProfileOccModule, providers: [\n        provideDefaultConfig(defaultOccUserProfileConfig),\n        { provide: UserProfileAdapter, useClass: OccUserProfileAdapter },\n    ] });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"15.2.4\", ngImport: i0, type: UserProfileOccModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    providers: [\n                        provideDefaultConfig(defaultOccUserProfileConfig),\n                        { provide: UserProfileAdapter, useClass: OccUserProfileAdapter },\n                    ],\n                }]\n        }] });\n\n/*\n * SPDX-FileCopyrightText: 2023 SAP Spartacus team <spartacus-team@sap.com>\n *\n * SPDX-License-Identifier: Apache-2.0\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { OccUserProfileAdapter, UserProfileOccModule, defaultOccUserProfileConfig };\n","import * as i0 from '@angular/core';\nimport { NgModule } from '@angular/core';\nimport { UserProfileComponentsModule } from '@spartacus/user/profile/components';\nimport { UserProfileCoreModule } from '@spartacus/user/profile/core';\nimport { UserProfileOccModule } from '@spartacus/user/profile/occ';\n\n/*\n * SPDX-FileCopyrightText: 2023 SAP Spartacus team <spartacus-team@sap.com>\n *\n * SPDX-License-Identifier: Apache-2.0\n */\nclass UserProfileModule {\n}\nUserProfileModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"15.2.4\", ngImport: i0, type: UserProfileModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });\nUserProfileModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"14.0.0\", version: \"15.2.4\", ngImport: i0, type: UserProfileModule, imports: [UserProfileCoreModule,\n        UserProfileOccModule,\n        UserProfileComponentsModule] });\nUserProfileModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"15.2.4\", ngImport: i0, type: UserProfileModule, imports: [UserProfileCoreModule,\n        UserProfileOccModule,\n        UserProfileComponentsModule] });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"15.2.4\", ngImport: i0, type: UserProfileModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    imports: [\n                        UserProfileCoreModule,\n                        UserProfileOccModule,\n                        UserProfileComponentsModule,\n                    ],\n                }]\n        }] });\n\n/*\n * SPDX-FileCopyrightText: 2023 SAP Spartacus team <spartacus-team@sap.com>\n *\n * SPDX-License-Identifier: Apache-2.0\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { UserProfileModule };\n"],"names":["i2$1","CommonModule","i0","Component","ChangeDetectionStrategy","HostListener","ViewChild","NgModule","Injectable","i5","RouterModule","i2","GlobalMessageType","UrlModule","I18nModule","provideDefaultConfig","AuthGuard","OAuthFlow","NotAuthGuard","RoutingService","AuthConfigService","GlobalMessageService","HttpErrorModel","AuthService","AuthRedirectService","i4","ICON_TYPE","DIALOG_TYPE","IconModule","SpinnerModule","KeyboardFocusModule","CustomFormValidators","FormErrorsModule","sortTitles","NgSelectA11yModule","PasswordVisibilityToggleModule","BehaviorSubject","Subscription","combineLatest","first","take","tap","map","filter","switchMap","i1","UserPasswordFacade","UserRegisterFacade","UserEmailFacade","UserProfileFacade","i3","UntypedFormGroup","UntypedFormControl","Validators","ReactiveFormsModule","UntypedFormBuilder","FormsModule","i6","NgSelectModule","CloseAccountModalComponent","handleClick","event","target","tagName","el","nativeElement","dismissModal","constructor","authService","globalMessageService","routingService","translationService","userProfile","launchDialogService","iconTypes","focusConfig","trap","block","autofocus","focusOnEscape","loading$","isLoading$","asObservable","ngOnInit","isLoggedIn$","isUserLoggedIn","onSuccess","translate","pipe","subscribe","text","add","MSG_TYPE_CONFIRMATION","coreLogout","then","go","cxRoute","onError","MSG_TYPE_ERROR","reason","closeDialog","closeAccount","next","close","error","ɵfac","TranslationService","LaunchDialogService","ElementRef","ɵcmp","NgIf","IconComponent","SpinnerComponent","FocusDirective","AsyncPipe","TranslatePipe","type","args","selector","changeDetection","OnPush","template","defaultCloseDialogModalLayoutConfig","launch","CLOSE_ACCOUNT","inline","component","dialogType","DIALOG","CloseAccountComponent","vcr","openModal","dialog","openDialog","element","ViewContainerRef","RouterLink","UrlPipe","CloseAccountModule","ɵmod","ɵinj","cmsComponents","guards","imports","providers","declarations","ForgotPasswordComponentService","userPasswordService","authConfigService","globalMessage","busy$","isUpdating$","state","form","disable","enable","userEmail","required","emailValidator","requestEmail","valid","markAllAsTouched","requestForgotPasswordEmail","value","key","reset","redirect","_error","getOAuthFlow","ResourceOwnerPasswordFlow","ɵprov","ForgotPasswordComponent","service","onSubmit","ɵNgNoValidate","DefaultValueAccessor","NgControlStatus","NgControlStatusGroup","RequiredValidator","FormGroupDirective","FormControlName","FormErrorsComponent","ForgotPasswordModule","provide","useClass","deps","RegisterComponentService","userRegisterFacade","fb","register","user","getTitles","postRegisterMessage","getAdditionalConsents","generateAdditionalConsentsFormControl","array","undefined","RegisterComponent","additionalConsents","registerForm","get","updateAdditionalConsents","index","checked","router","anonymousConsentsService","anonymousConsentsConfig","registerComponentService","subscription","group","titleCode","firstName","lastName","email","password","passwordValidator","passwordconf","newsletter","disabled","isConsentRequired","termsandconditions","requiredTrue","validators","passwordsMustMatch","titles$","titles","sort","messages","Object","keys","length","globalMessageEntities","some","message","raw","remove","registerConsent","anonymousConsents","anonymousConsent$","getConsent","getTemplate","consent","description","additionalRegistrationConsents","valueChanges","toggleAnonymousConsent","submitForm","registerUser","collectDataFromRegisterForm","onRegisterUserSuccess","complete","titleSelected","title","setValue","code","formData","uid","toLowerCase","isConsentGiven","requiredConsents","includes","Boolean","giveConsent","withdrawConsent","ngOnDestroy","unsubscribe","AnonymousConsentsService","AnonymousConsentsConfig","NgForOf","CheckboxControlValueAccessor","CheckboxRequiredValidator","FormArrayName","NgSelectComponent","NgSelectA11yDirective","PasswordVisibilityToggleDirective","RegisterComponentModule","RegisterCustomerComponent","ResetPasswordComponentService","resetToken$","getRouterState","routerState","queryParams","passwordConfirm","resetPassword","token","details","forEach","err","ResetPasswordComponent","token$","host","class","ResetPasswordModule","UpdateEmailComponentService","authRedirectService","confirmEmail","emailsMustMatch","save","newEmail","update","newUid","params","setRedirectUrl","getUrl","UpdateEmailComponent","UpdateEmailModule","UpdatePasswordComponentService","oldPassword","newPassword","newPasswordConfirm","updatePassword","UpdatePasswordComponent","UpdatePasswordModule","UpdateProfileComponentService","user$","patchValue","_user","customerId","updateProfile","UpdateProfileComponent","NgOptionComponent","UpdateProfileModule","UserProfileComponentsModule","InjectionToken","CommandStrategy","LanguageSetEvent","UserActions","UserAccountChangedEvent","USER_PROFILE_NORMALIZER","USER_PROFILE_SERIALIZER","USER_SERIALIZER","USER_SIGN_UP_SERIALIZER","TITLE_NORMALIZER","UserProfileAdapter","UserProfileConnector","userProfileAdapter","username","registerGuest","guid","userEmailAddress","updateEmail","userId","currentPassword","newUserId","loadTitles","UserEmailService","userIdService","userProfileConnector","command","updateCommand","create","payload","takeUserId","strategy","Queue","execute","UserIdService","CommandService","UserPasswordService","resetCommand","requestForgotPasswordEmailCommand","UserProfileService","userAccountService","eventService","query","dispatch","closeCommand","logout","titleQuery","reloadOn","UserAccountFacade","EventService","QueryService","UserRegisterService","userConnector","store","registerCommand","RegisterUserSuccess","registerGuestCommand","loginWithCredentials","Store","facadeProviders","useExisting","UserProfileCoreModule","HttpHeaders","HttpParams","inject","LoggerService","normalizeHttpError","InterceptorUtil","USE_CLIENT_TOKEN","throwError","catchError","defaultOccUserProfileConfig","backend","occ","endpoints","userRegister","userForgotPassword","userResetPassword","userUpdateLoginId","userUpdatePassword","CONTENT_TYPE_JSON_HEADER","CONTENT_TYPE_URLENCODED_HEADER","OccUserProfileAdapter","http","occEndpoints","converter","logger","endpoint","isConfigured","url","buildUrl","urlParams","convert","patch","headers","createHeader","post","pipeable","httpParams","set","put","delete","titleList","pipeableMany","HttpClient","OccEndpointsService","ConverterService","UserProfileOccModule","UserProfileModule"],"sourceRoot":"webpack:///","x_google_ignoreList":[0,1,2,3]}