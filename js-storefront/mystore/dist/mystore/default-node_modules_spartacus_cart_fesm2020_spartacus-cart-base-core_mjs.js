"use strict";
(self["webpackChunkmystore_6_3"] = self["webpackChunkmystore_6_3"] || []).push([["default-node_modules_spartacus_cart_fesm2020_spartacus-cart-base-core_mjs"],{

/***/ 2972:
/*!*******************************************************************!*\
  !*** ./node_modules/rxjs/_esm2015/internal/operators/debounce.js ***!
  \*******************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "debounce": () => (/* binding */ debounce)
/* harmony export */ });
/* harmony import */ var _innerSubscribe__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../innerSubscribe */ 2831);

function debounce(durationSelector) {
  return source => source.lift(new DebounceOperator(durationSelector));
}
class DebounceOperator {
  constructor(durationSelector) {
    this.durationSelector = durationSelector;
  }
  call(subscriber, source) {
    return source.subscribe(new DebounceSubscriber(subscriber, this.durationSelector));
  }
}
class DebounceSubscriber extends _innerSubscribe__WEBPACK_IMPORTED_MODULE_0__.SimpleOuterSubscriber {
  constructor(destination, durationSelector) {
    super(destination);
    this.durationSelector = durationSelector;
    this.hasValue = false;
  }
  _next(value) {
    try {
      const result = this.durationSelector.call(this, value);
      if (result) {
        this._tryNext(value, result);
      }
    } catch (err) {
      this.destination.error(err);
    }
  }
  _complete() {
    this.emitValue();
    this.destination.complete();
  }
  _tryNext(value, duration) {
    let subscription = this.durationSubscription;
    this.value = value;
    this.hasValue = true;
    if (subscription) {
      subscription.unsubscribe();
      this.remove(subscription);
    }
    subscription = (0,_innerSubscribe__WEBPACK_IMPORTED_MODULE_0__.innerSubscribe)(duration, new _innerSubscribe__WEBPACK_IMPORTED_MODULE_0__.SimpleInnerSubscriber(this));
    if (subscription && !subscription.closed) {
      this.add(this.durationSubscription = subscription);
    }
  }
  notifyNext() {
    this.emitValue();
  }
  notifyComplete() {
    this.emitValue();
  }
  emitValue() {
    if (this.hasValue) {
      const value = this.value;
      const subscription = this.durationSubscription;
      if (subscription) {
        this.durationSubscription = undefined;
        subscription.unsubscribe();
        this.remove(subscription);
      }
      this.value = undefined;
      this.hasValue = false;
      super._next(value);
    }
  }
}

/***/ }),

/***/ 6116:
/*!**********************************************************************************!*\
  !*** ./node_modules/rxjs/_esm2015/internal/operators/distinctUntilKeyChanged.js ***!
  \**********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "distinctUntilKeyChanged": () => (/* binding */ distinctUntilKeyChanged)
/* harmony export */ });
/* harmony import */ var _distinctUntilChanged__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./distinctUntilChanged */ 3298);

function distinctUntilKeyChanged(key, compare) {
  return (0,_distinctUntilChanged__WEBPACK_IMPORTED_MODULE_0__.distinctUntilChanged)((x, y) => compare ? compare(x[key], y[key]) : x[key] === y[key]);
}

/***/ }),

/***/ 7732:
/*!****************************************************************************!*\
  !*** ./node_modules/@spartacus/cart/fesm2020/spartacus-cart-base-core.mjs ***!
  \****************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "ADD_VOUCHER_PROCESS_ID": () => (/* binding */ ADD_VOUCHER_PROCESS_ID),
/* harmony export */   "ActiveCartService": () => (/* binding */ ActiveCartService),
/* harmony export */   "CART_VALIDATION_NORMALIZER": () => (/* binding */ CART_VALIDATION_NORMALIZER),
/* harmony export */   "CartActions": () => (/* binding */ cartGroup_actions),
/* harmony export */   "CartAdapter": () => (/* binding */ CartAdapter),
/* harmony export */   "CartBaseCoreModule": () => (/* binding */ CartBaseCoreModule),
/* harmony export */   "CartConfigService": () => (/* binding */ CartConfigService),
/* harmony export */   "CartConnector": () => (/* binding */ CartConnector),
/* harmony export */   "CartEntryAdapter": () => (/* binding */ CartEntryAdapter),
/* harmony export */   "CartEntryConnector": () => (/* binding */ CartEntryConnector),
/* harmony export */   "CartEventBuilder": () => (/* binding */ CartEventBuilder),
/* harmony export */   "CartEventModule": () => (/* binding */ CartEventModule),
/* harmony export */   "CartPageEventBuilder": () => (/* binding */ CartPageEventBuilder),
/* harmony export */   "CartPageEventModule": () => (/* binding */ CartPageEventModule),
/* harmony export */   "CartPersistenceModule": () => (/* binding */ CartPersistenceModule),
/* harmony export */   "CartValidationAdapter": () => (/* binding */ CartValidationAdapter),
/* harmony export */   "CartValidationConnector": () => (/* binding */ CartValidationConnector),
/* harmony export */   "CartValidationGuard": () => (/* binding */ CartValidationGuard),
/* harmony export */   "CartValidationService": () => (/* binding */ CartValidationService),
/* harmony export */   "CartValidationStateService": () => (/* binding */ CartValidationStateService),
/* harmony export */   "CartVoucherAdapter": () => (/* binding */ CartVoucherAdapter),
/* harmony export */   "CartVoucherConnector": () => (/* binding */ CartVoucherConnector),
/* harmony export */   "CartVoucherService": () => (/* binding */ CartVoucherService),
/* harmony export */   "MULTI_CART_DATA": () => (/* binding */ MULTI_CART_DATA),
/* harmony export */   "MULTI_CART_FEATURE": () => (/* binding */ MULTI_CART_FEATURE),
/* harmony export */   "MultiCartEffectsService": () => (/* binding */ MultiCartEffectsService),
/* harmony export */   "MultiCartSelectors": () => (/* binding */ multiCartGroup_selectors),
/* harmony export */   "MultiCartService": () => (/* binding */ MultiCartService),
/* harmony export */   "MultiCartStatePersistenceService": () => (/* binding */ MultiCartStatePersistenceService),
/* harmony export */   "ProductImportInfoService": () => (/* binding */ ProductImportInfoService),
/* harmony export */   "SelectiveCartService": () => (/* binding */ SelectiveCartService),
/* harmony export */   "cartStatePersistenceFactory": () => (/* binding */ cartStatePersistenceFactory),
/* harmony export */   "getCartIdByUserId": () => (/* binding */ getCartIdByUserId),
/* harmony export */   "isCartError": () => (/* binding */ isCartError),
/* harmony export */   "isCartNotFoundError": () => (/* binding */ isCartNotFoundError),
/* harmony export */   "isEmail": () => (/* binding */ isEmail),
/* harmony export */   "isEmpty": () => (/* binding */ isEmpty),
/* harmony export */   "isJustLoggedIn": () => (/* binding */ isJustLoggedIn),
/* harmony export */   "isSelectiveCart": () => (/* binding */ isSelectiveCart),
/* harmony export */   "isTempCartId": () => (/* binding */ isTempCartId),
/* harmony export */   "isVoucherError": () => (/* binding */ isVoucherError),
/* harmony export */   "uninitializeActiveCartMetaReducerFactory": () => (/* binding */ uninitializeActiveCartMetaReducerFactory),
/* harmony export */   "voucherExceededError": () => (/* binding */ voucherExceededError),
/* harmony export */   "voucherInvalidError": () => (/* binding */ voucherInvalidError)
/* harmony export */ });
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/core */ 2560);
/* harmony import */ var _spartacus_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @spartacus/core */ 6458);
/* harmony import */ var _ngrx_store__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! @ngrx/store */ 3488);
/* harmony import */ var _spartacus_cart_base_root__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! @spartacus/cart/base/root */ 6061);
/* harmony import */ var rxjs_operators__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! rxjs/operators */ 6942);
/* harmony import */ var rxjs_operators__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! rxjs/operators */ 1133);
/* harmony import */ var rxjs_operators__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! rxjs/operators */ 7418);
/* harmony import */ var rxjs_operators__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! rxjs/operators */ 522);
/* harmony import */ var rxjs_operators__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! rxjs/operators */ 1135);
/* harmony import */ var rxjs_operators__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! rxjs/operators */ 9095);
/* harmony import */ var rxjs_operators__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! rxjs/operators */ 1745);
/* harmony import */ var rxjs_operators__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! rxjs/operators */ 9151);
/* harmony import */ var rxjs_operators__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! rxjs/operators */ 6116);
/* harmony import */ var rxjs_operators__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! rxjs/operators */ 8759);
/* harmony import */ var rxjs_operators__WEBPACK_IMPORTED_MODULE_19__ = __webpack_require__(/*! rxjs/operators */ 3910);
/* harmony import */ var rxjs_operators__WEBPACK_IMPORTED_MODULE_21__ = __webpack_require__(/*! rxjs/operators */ 3298);
/* harmony import */ var rxjs_operators__WEBPACK_IMPORTED_MODULE_22__ = __webpack_require__(/*! rxjs/operators */ 9128);
/* harmony import */ var rxjs_operators__WEBPACK_IMPORTED_MODULE_23__ = __webpack_require__(/*! rxjs/operators */ 9221);
/* harmony import */ var rxjs_operators__WEBPACK_IMPORTED_MODULE_26__ = __webpack_require__(/*! rxjs/operators */ 2972);
/* harmony import */ var rxjs__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! rxjs */ 4383);
/* harmony import */ var rxjs__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! rxjs */ 4139);
/* harmony import */ var rxjs__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! rxjs */ 2425);
/* harmony import */ var rxjs__WEBPACK_IMPORTED_MODULE_20__ = __webpack_require__(/*! rxjs */ 5489);
/* harmony import */ var rxjs__WEBPACK_IMPORTED_MODULE_24__ = __webpack_require__(/*! rxjs */ 9193);
/* harmony import */ var rxjs__WEBPACK_IMPORTED_MODULE_25__ = __webpack_require__(/*! rxjs */ 1555);
/* harmony import */ var rxjs__WEBPACK_IMPORTED_MODULE_27__ = __webpack_require__(/*! rxjs */ 5398);
/* harmony import */ var rxjs__WEBPACK_IMPORTED_MODULE_28__ = __webpack_require__(/*! rxjs */ 6439);
/* harmony import */ var _ngrx_effects__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @ngrx/effects */ 5405);
/* harmony import */ var _spartacus_storefront__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(/*! @spartacus/storefront */ 4373);
/* harmony import */ var _spartacus_user_profile_root__WEBPACK_IMPORTED_MODULE_29__ = __webpack_require__(/*! @spartacus/user/profile/root */ 8756);
/* harmony import */ var _angular_common__WEBPACK_IMPORTED_MODULE_30__ = __webpack_require__(/*! @angular/common */ 4666);
/* harmony import */ var _angular_router__WEBPACK_IMPORTED_MODULE_31__ = __webpack_require__(/*! @angular/router */ 124);

















/*
 * SPDX-FileCopyrightText: 2023 SAP Spartacus team <spartacus-team@sap.com>
 *
 * SPDX-License-Identifier: Apache-2.0
 */
const MULTI_CART_FEATURE = 'cart';
const MULTI_CART_DATA = '[Multi Cart] Multi Cart Data';
/**
 * Add voucher process const
 */
const ADD_VOUCHER_PROCESS_ID = 'addVoucher';

/*
 * SPDX-FileCopyrightText: 2023 SAP Spartacus team <spartacus-team@sap.com>
 *
 * SPDX-License-Identifier: Apache-2.0
 */
const CART_ADD_ENTRY = '[Cart-entry] Add Entry';
const CART_ADD_ENTRY_SUCCESS = '[Cart-entry] Add Entry Success';
const CART_ADD_ENTRY_FAIL = '[Cart-entry] Add Entry Fail';
const CART_REMOVE_ENTRY = '[Cart-entry] Remove Entry';
const CART_REMOVE_ENTRY_SUCCESS = '[Cart-entry] Remove Entry Success';
const CART_REMOVE_ENTRY_FAIL = '[Cart-entry] Remove Entry Fail';
const CART_UPDATE_ENTRY = '[Cart-entry] Update Entry';
const CART_UPDATE_ENTRY_SUCCESS = '[Cart-entry] Update Entry Success';
const CART_UPDATE_ENTRY_FAIL = '[Cart-entry] Update Entry Fail';
class CartAddEntry extends _spartacus_core__WEBPACK_IMPORTED_MODULE_0__.StateUtils.EntityProcessesIncrementAction {
  constructor(payload) {
    super(MULTI_CART_DATA, payload.cartId);
    this.payload = payload;
    this.type = CART_ADD_ENTRY;
  }
}
class CartAddEntrySuccess extends _spartacus_core__WEBPACK_IMPORTED_MODULE_0__.StateUtils.EntityProcessesDecrementAction {
  constructor(payload) {
    super(MULTI_CART_DATA, payload.cartId);
    this.payload = payload;
    this.type = CART_ADD_ENTRY_SUCCESS;
  }
}
class CartAddEntryFail extends _spartacus_core__WEBPACK_IMPORTED_MODULE_0__.StateUtils.EntityProcessesDecrementAction {
  constructor(payload) {
    super(MULTI_CART_DATA, payload.cartId);
    this.payload = payload;
    this.type = CART_ADD_ENTRY_FAIL;
  }
}
class CartRemoveEntry extends _spartacus_core__WEBPACK_IMPORTED_MODULE_0__.StateUtils.EntityProcessesIncrementAction {
  constructor(payload) {
    super(MULTI_CART_DATA, payload.cartId);
    this.payload = payload;
    this.type = CART_REMOVE_ENTRY;
  }
}
class CartRemoveEntrySuccess extends _spartacus_core__WEBPACK_IMPORTED_MODULE_0__.StateUtils.EntityProcessesDecrementAction {
  constructor(payload) {
    super(MULTI_CART_DATA, payload.cartId);
    this.payload = payload;
    this.type = CART_REMOVE_ENTRY_SUCCESS;
  }
}
class CartRemoveEntryFail extends _spartacus_core__WEBPACK_IMPORTED_MODULE_0__.StateUtils.EntityProcessesDecrementAction {
  constructor(payload) {
    super(MULTI_CART_DATA, payload.cartId);
    this.payload = payload;
    this.type = CART_REMOVE_ENTRY_FAIL;
  }
}
class CartUpdateEntry extends _spartacus_core__WEBPACK_IMPORTED_MODULE_0__.StateUtils.EntityProcessesIncrementAction {
  constructor(payload) {
    super(MULTI_CART_DATA, payload.cartId);
    this.payload = payload;
    this.type = CART_UPDATE_ENTRY;
  }
}
class CartUpdateEntrySuccess extends _spartacus_core__WEBPACK_IMPORTED_MODULE_0__.StateUtils.EntityProcessesDecrementAction {
  constructor(payload) {
    super(MULTI_CART_DATA, payload.cartId);
    this.payload = payload;
    this.type = CART_UPDATE_ENTRY_SUCCESS;
  }
}
class CartUpdateEntryFail extends _spartacus_core__WEBPACK_IMPORTED_MODULE_0__.StateUtils.EntityProcessesDecrementAction {
  constructor(payload) {
    super(MULTI_CART_DATA, payload.cartId);
    this.payload = payload;
    this.type = CART_UPDATE_ENTRY_FAIL;
  }
}

/*
 * SPDX-FileCopyrightText: 2023 SAP Spartacus team <spartacus-team@sap.com>
 *
 * SPDX-License-Identifier: Apache-2.0
 */
const CART_ADD_VOUCHER = '[Cart-voucher] Add Cart Vouchers';
const CART_ADD_VOUCHER_FAIL = '[Cart-voucher] Add Cart Voucher Fail';
const CART_ADD_VOUCHER_SUCCESS = '[Cart-voucher] Add Cart Voucher Success';
const CART_RESET_ADD_VOUCHER = '[Cart-voucher] Reset Add Cart Voucher';
const CART_REMOVE_VOUCHER = '[Cart-voucher] Remove Cart Voucher';
const CART_REMOVE_VOUCHER_FAIL = '[Cart-voucher] Remove Cart Voucher Fail';
const CART_REMOVE_VOUCHER_SUCCESS = '[Cart-voucher] Remove Cart Voucher Success';
// Adding cart voucher actions
class CartAddVoucher extends _spartacus_core__WEBPACK_IMPORTED_MODULE_0__.StateUtils.EntityLoadAction {
  constructor(payload) {
    super(_spartacus_core__WEBPACK_IMPORTED_MODULE_0__.PROCESS_FEATURE, ADD_VOUCHER_PROCESS_ID);
    this.payload = payload;
    this.type = CART_ADD_VOUCHER;
  }
}
class CartAddVoucherFail extends _spartacus_core__WEBPACK_IMPORTED_MODULE_0__.StateUtils.EntityFailAction {
  constructor(payload) {
    super(_spartacus_core__WEBPACK_IMPORTED_MODULE_0__.PROCESS_FEATURE, ADD_VOUCHER_PROCESS_ID, payload.error);
    this.payload = payload;
    this.type = CART_ADD_VOUCHER_FAIL;
  }
}
class CartAddVoucherSuccess extends _spartacus_core__WEBPACK_IMPORTED_MODULE_0__.StateUtils.EntitySuccessAction {
  constructor(payload) {
    super(_spartacus_core__WEBPACK_IMPORTED_MODULE_0__.PROCESS_FEATURE, ADD_VOUCHER_PROCESS_ID);
    this.payload = payload;
    this.type = CART_ADD_VOUCHER_SUCCESS;
  }
}
/**
 * Resets add voucher process
 */
class CartResetAddVoucher extends _spartacus_core__WEBPACK_IMPORTED_MODULE_0__.StateUtils.EntityLoaderResetAction {
  constructor() {
    super(_spartacus_core__WEBPACK_IMPORTED_MODULE_0__.PROCESS_FEATURE, ADD_VOUCHER_PROCESS_ID);
    this.type = CART_RESET_ADD_VOUCHER;
  }
}
// Deleting cart voucher
class CartRemoveVoucher extends _spartacus_core__WEBPACK_IMPORTED_MODULE_0__.StateUtils.EntityProcessesIncrementAction {
  constructor(payload) {
    super(MULTI_CART_DATA, payload.cartId);
    this.payload = payload;
    this.type = CART_REMOVE_VOUCHER;
  }
}
class CartRemoveVoucherFail extends _spartacus_core__WEBPACK_IMPORTED_MODULE_0__.StateUtils.EntityProcessesDecrementAction {
  constructor(payload) {
    super(MULTI_CART_DATA, payload.cartId);
    this.payload = payload;
    this.type = CART_REMOVE_VOUCHER_FAIL;
  }
}
class CartRemoveVoucherSuccess extends _spartacus_core__WEBPACK_IMPORTED_MODULE_0__.StateUtils.EntityProcessesDecrementAction {
  constructor(payload) {
    super(MULTI_CART_DATA, payload.cartId);
    this.payload = payload;
    this.type = CART_REMOVE_VOUCHER_SUCCESS;
  }
}

/*
 * SPDX-FileCopyrightText: 2023 SAP Spartacus team <spartacus-team@sap.com>
 *
 * SPDX-License-Identifier: Apache-2.0
 */
const CREATE_CART = '[Cart] Create Cart';
const CREATE_CART_FAIL = '[Cart] Create Cart Fail';
const CREATE_CART_SUCCESS = '[Cart] Create Cart Success';
const LOAD_CART = '[Cart] Load Cart';
const LOAD_CART_FAIL = '[Cart] Load Cart Fail';
const LOAD_CART_SUCCESS = '[Cart] Load Cart Success';
const LOAD_CARTS_SUCCESS = '[Cart] Load Carts Success';
const ADD_EMAIL_TO_CART = '[Cart] Add Email to Cart';
const ADD_EMAIL_TO_CART_FAIL = '[Cart] Add Email to Cart Fail';
const ADD_EMAIL_TO_CART_SUCCESS = '[Cart] Add Email to Cart Success';
const MERGE_CART = '[Cart] Merge Cart';
const MERGE_CART_SUCCESS = '[Cart] Merge Cart Success';
const RESET_CART_DETAILS = '[Cart] Reset Cart Details';
const REMOVE_CART = '[Cart] Remove Cart';
const DELETE_CART = '[Cart] Delete Cart';
const DELETE_CART_SUCCESS = '[Cart] Delete Cart Success';
const DELETE_CART_FAIL = '[Cart] Delete Cart Fail';
class CreateCart extends _spartacus_core__WEBPACK_IMPORTED_MODULE_0__.StateUtils.EntityLoadAction {
  constructor(payload) {
    super(MULTI_CART_DATA, payload.tempCartId);
    this.payload = payload;
    this.type = CREATE_CART;
  }
}
class CreateCartFail extends _spartacus_core__WEBPACK_IMPORTED_MODULE_0__.StateUtils.EntityFailAction {
  constructor(payload) {
    super(MULTI_CART_DATA, payload.tempCartId);
    this.payload = payload;
    this.type = CREATE_CART_FAIL;
  }
}
class CreateCartSuccess extends _spartacus_core__WEBPACK_IMPORTED_MODULE_0__.StateUtils.EntitySuccessAction {
  constructor(payload) {
    super(MULTI_CART_DATA, payload.cartId);
    this.payload = payload;
    this.type = CREATE_CART_SUCCESS;
  }
}
class AddEmailToCart extends _spartacus_core__WEBPACK_IMPORTED_MODULE_0__.StateUtils.EntityProcessesIncrementAction {
  constructor(payload) {
    super(MULTI_CART_DATA, payload.cartId);
    this.payload = payload;
    this.type = ADD_EMAIL_TO_CART;
  }
}
class AddEmailToCartFail extends _spartacus_core__WEBPACK_IMPORTED_MODULE_0__.StateUtils.EntityProcessesDecrementAction {
  constructor(payload) {
    super(MULTI_CART_DATA, payload.cartId);
    this.payload = payload;
    this.type = ADD_EMAIL_TO_CART_FAIL;
  }
}
class AddEmailToCartSuccess extends _spartacus_core__WEBPACK_IMPORTED_MODULE_0__.StateUtils.EntityProcessesDecrementAction {
  constructor(payload) {
    super(MULTI_CART_DATA, payload.cartId);
    this.payload = payload;
    this.type = ADD_EMAIL_TO_CART_SUCCESS;
  }
}
class LoadCart extends _spartacus_core__WEBPACK_IMPORTED_MODULE_0__.StateUtils.EntityLoadAction {
  constructor(payload) {
    super(MULTI_CART_DATA, payload.cartId);
    this.payload = payload;
    this.type = LOAD_CART;
  }
}
class LoadCartFail extends _spartacus_core__WEBPACK_IMPORTED_MODULE_0__.StateUtils.EntityFailAction {
  constructor(payload) {
    super(MULTI_CART_DATA, payload.cartId, payload.error);
    this.payload = payload;
    this.type = LOAD_CART_FAIL;
  }
}
class LoadCartSuccess extends _spartacus_core__WEBPACK_IMPORTED_MODULE_0__.StateUtils.EntitySuccessAction {
  constructor(payload) {
    super(MULTI_CART_DATA, payload.cartId);
    this.payload = payload;
    this.type = LOAD_CART_SUCCESS;
  }
}
class LoadCartsSuccess extends _spartacus_core__WEBPACK_IMPORTED_MODULE_0__.StateUtils.EntitySuccessAction {
  constructor(payload) {
    super(MULTI_CART_DATA, payload.map(cart => cart?.code ?? ''));
    this.payload = payload;
    this.type = LOAD_CARTS_SUCCESS;
  }
}
class MergeCart {
  constructor(payload) {
    this.payload = payload;
    this.type = MERGE_CART;
  }
}
class MergeCartSuccess extends _spartacus_core__WEBPACK_IMPORTED_MODULE_0__.StateUtils.EntityRemoveAction {
  constructor(payload) {
    super(MULTI_CART_DATA, payload.oldCartId);
    this.payload = payload;
    this.type = MERGE_CART_SUCCESS;
  }
}
/**
 * On site context change we want to keep current list of entities, but we want to clear the value and flags.
 * With ProcessesLoaderResetAction we run it on every entity of this type.
 */
class ResetCartDetails extends _spartacus_core__WEBPACK_IMPORTED_MODULE_0__.StateUtils.ProcessesLoaderResetAction {
  constructor() {
    super(MULTI_CART_DATA);
    this.type = RESET_CART_DETAILS;
  }
}
/**
 * Used for cleaning cart in local state, when we get information that it no longer exists in the backend.
 * For removing particular cart in both places use DeleteCart actions.
 */
class RemoveCart extends _spartacus_core__WEBPACK_IMPORTED_MODULE_0__.StateUtils.EntityRemoveAction {
  constructor(payload) {
    super(MULTI_CART_DATA, payload.cartId);
    this.payload = payload;
    this.type = REMOVE_CART;
  }
}
class DeleteCart {
  constructor(payload) {
    this.payload = payload;
    this.type = DELETE_CART;
  }
}
class DeleteCartSuccess extends _spartacus_core__WEBPACK_IMPORTED_MODULE_0__.StateUtils.EntityRemoveAction {
  constructor(payload) {
    super(MULTI_CART_DATA, payload.cartId);
    this.payload = payload;
    this.type = DELETE_CART_SUCCESS;
  }
}
class DeleteCartFail {
  constructor(payload) {
    this.payload = payload;
    this.type = DELETE_CART_FAIL;
  }
}

/*
 * SPDX-FileCopyrightText: 2023 SAP Spartacus team <spartacus-team@sap.com>
 *
 * SPDX-License-Identifier: Apache-2.0
 */
const CART_PROCESSES_INCREMENT = '[Cart] Cart Processes Increment';
const CART_PROCESSES_DECREMENT = '[Cart] Cart Processes Decrement';
const SET_ACTIVE_CART_ID = '[Cart] Set Active Cart Id';
const CLEAR_CART_STATE = '[Cart] Clear Cart State';
const SET_CART_TYPE_INDEX = '[Cart] Set cart type index';
const SET_CART_DATA = '[Cart] Set cart data';
/**
 * Increases process counter on cart entities
 * All actions that cause computations on cart should extend EntityProcessesIncrementAction instead of dispatching this action.
 */
class CartProcessesIncrement extends _spartacus_core__WEBPACK_IMPORTED_MODULE_0__.StateUtils.EntityProcessesIncrementAction {
  constructor(payload) {
    super(MULTI_CART_DATA, payload);
    this.payload = payload;
    this.type = CART_PROCESSES_INCREMENT;
  }
}
/**
 * Decrement process counter on cart entities
 * All actions that cause computations on cart should extend EntityProcessesDecrementAction instead of dispatching this action.
 */
class CartProcessesDecrement extends _spartacus_core__WEBPACK_IMPORTED_MODULE_0__.StateUtils.EntityProcessesDecrementAction {
  constructor(payload) {
    super(MULTI_CART_DATA, payload);
    this.payload = payload;
    this.type = CART_PROCESSES_DECREMENT;
  }
}
/**
 * Only sets active cart property with id of active cart. Then services take care of loading that cart.
 */
class SetActiveCartId {
  constructor(payload) {
    this.payload = payload;
    this.type = SET_ACTIVE_CART_ID;
  }
}
/**
 * Clear whole cart store state: all entities + reset rest of the cart state.
 */
class ClearCartState extends _spartacus_core__WEBPACK_IMPORTED_MODULE_0__.StateUtils.EntityRemoveAllAction {
  constructor() {
    super(MULTI_CART_DATA);
    this.type = CLEAR_CART_STATE;
  }
}
class SetCartTypeIndex {
  constructor(payload) {
    this.payload = payload;
    this.type = SET_CART_TYPE_INDEX;
  }
}
class SetCartData extends _spartacus_core__WEBPACK_IMPORTED_MODULE_0__.StateUtils.EntitySuccessAction {
  constructor(payload) {
    super(MULTI_CART_DATA, payload.cartId);
    this.payload = payload;
    this.type = SET_CART_DATA;
  }
}

/*
 * SPDX-FileCopyrightText: 2023 SAP Spartacus team <spartacus-team@sap.com>
 *
 * SPDX-License-Identifier: Apache-2.0
 */

var cartGroup_actions = /*#__PURE__*/Object.freeze({
  __proto__: null,
  ADD_EMAIL_TO_CART: ADD_EMAIL_TO_CART,
  ADD_EMAIL_TO_CART_FAIL: ADD_EMAIL_TO_CART_FAIL,
  ADD_EMAIL_TO_CART_SUCCESS: ADD_EMAIL_TO_CART_SUCCESS,
  AddEmailToCart: AddEmailToCart,
  AddEmailToCartFail: AddEmailToCartFail,
  AddEmailToCartSuccess: AddEmailToCartSuccess,
  CART_ADD_ENTRY: CART_ADD_ENTRY,
  CART_ADD_ENTRY_FAIL: CART_ADD_ENTRY_FAIL,
  CART_ADD_ENTRY_SUCCESS: CART_ADD_ENTRY_SUCCESS,
  CART_ADD_VOUCHER: CART_ADD_VOUCHER,
  CART_ADD_VOUCHER_FAIL: CART_ADD_VOUCHER_FAIL,
  CART_ADD_VOUCHER_SUCCESS: CART_ADD_VOUCHER_SUCCESS,
  CART_PROCESSES_DECREMENT: CART_PROCESSES_DECREMENT,
  CART_PROCESSES_INCREMENT: CART_PROCESSES_INCREMENT,
  CART_REMOVE_ENTRY: CART_REMOVE_ENTRY,
  CART_REMOVE_ENTRY_FAIL: CART_REMOVE_ENTRY_FAIL,
  CART_REMOVE_ENTRY_SUCCESS: CART_REMOVE_ENTRY_SUCCESS,
  CART_REMOVE_VOUCHER: CART_REMOVE_VOUCHER,
  CART_REMOVE_VOUCHER_FAIL: CART_REMOVE_VOUCHER_FAIL,
  CART_REMOVE_VOUCHER_SUCCESS: CART_REMOVE_VOUCHER_SUCCESS,
  CART_RESET_ADD_VOUCHER: CART_RESET_ADD_VOUCHER,
  CART_UPDATE_ENTRY: CART_UPDATE_ENTRY,
  CART_UPDATE_ENTRY_FAIL: CART_UPDATE_ENTRY_FAIL,
  CART_UPDATE_ENTRY_SUCCESS: CART_UPDATE_ENTRY_SUCCESS,
  CLEAR_CART_STATE: CLEAR_CART_STATE,
  CREATE_CART: CREATE_CART,
  CREATE_CART_FAIL: CREATE_CART_FAIL,
  CREATE_CART_SUCCESS: CREATE_CART_SUCCESS,
  CartAddEntry: CartAddEntry,
  CartAddEntryFail: CartAddEntryFail,
  CartAddEntrySuccess: CartAddEntrySuccess,
  CartAddVoucher: CartAddVoucher,
  CartAddVoucherFail: CartAddVoucherFail,
  CartAddVoucherSuccess: CartAddVoucherSuccess,
  CartProcessesDecrement: CartProcessesDecrement,
  CartProcessesIncrement: CartProcessesIncrement,
  CartRemoveEntry: CartRemoveEntry,
  CartRemoveEntryFail: CartRemoveEntryFail,
  CartRemoveEntrySuccess: CartRemoveEntrySuccess,
  CartRemoveVoucher: CartRemoveVoucher,
  CartRemoveVoucherFail: CartRemoveVoucherFail,
  CartRemoveVoucherSuccess: CartRemoveVoucherSuccess,
  CartResetAddVoucher: CartResetAddVoucher,
  CartUpdateEntry: CartUpdateEntry,
  CartUpdateEntryFail: CartUpdateEntryFail,
  CartUpdateEntrySuccess: CartUpdateEntrySuccess,
  ClearCartState: ClearCartState,
  CreateCart: CreateCart,
  CreateCartFail: CreateCartFail,
  CreateCartSuccess: CreateCartSuccess,
  DELETE_CART: DELETE_CART,
  DELETE_CART_FAIL: DELETE_CART_FAIL,
  DELETE_CART_SUCCESS: DELETE_CART_SUCCESS,
  DeleteCart: DeleteCart,
  DeleteCartFail: DeleteCartFail,
  DeleteCartSuccess: DeleteCartSuccess,
  LOAD_CART: LOAD_CART,
  LOAD_CARTS_SUCCESS: LOAD_CARTS_SUCCESS,
  LOAD_CART_FAIL: LOAD_CART_FAIL,
  LOAD_CART_SUCCESS: LOAD_CART_SUCCESS,
  LoadCart: LoadCart,
  LoadCartFail: LoadCartFail,
  LoadCartSuccess: LoadCartSuccess,
  LoadCartsSuccess: LoadCartsSuccess,
  MERGE_CART: MERGE_CART,
  MERGE_CART_SUCCESS: MERGE_CART_SUCCESS,
  MergeCart: MergeCart,
  MergeCartSuccess: MergeCartSuccess,
  REMOVE_CART: REMOVE_CART,
  RESET_CART_DETAILS: RESET_CART_DETAILS,
  RemoveCart: RemoveCart,
  ResetCartDetails: ResetCartDetails,
  SET_ACTIVE_CART_ID: SET_ACTIVE_CART_ID,
  SET_CART_DATA: SET_CART_DATA,
  SET_CART_TYPE_INDEX: SET_CART_TYPE_INDEX,
  SetActiveCartId: SetActiveCartId,
  SetCartData: SetCartData,
  SetCartTypeIndex: SetCartTypeIndex
});

/*
 * SPDX-FileCopyrightText: 2023 SAP Spartacus team <spartacus-team@sap.com>
 *
 * SPDX-License-Identifier: Apache-2.0
 */

/*
 * SPDX-FileCopyrightText: 2023 SAP Spartacus team <spartacus-team@sap.com>
 *
 * SPDX-License-Identifier: Apache-2.0
 */
class CartEntryAdapter {}

/*
 * SPDX-FileCopyrightText: 2023 SAP Spartacus team <spartacus-team@sap.com>
 *
 * SPDX-License-Identifier: Apache-2.0
 */
class CartEntryConnector {
  constructor(adapter) {
    this.adapter = adapter;
  }
  add(userId, cartId, productCode, quantity, pickupStore) {
    return this.adapter.add(userId, cartId, productCode, quantity, pickupStore);
  }
  update(userId, cartId, entryNumber, qty, pickupStore, pickupToDelivery = false) {
    return this.adapter.update(userId, cartId, entryNumber, qty, pickupStore, pickupToDelivery);
  }
  remove(userId, cartId, entryNumber) {
    return this.adapter.remove(userId, cartId, entryNumber);
  }
}
CartEntryConnector.ɵfac = function CartEntryConnector_Factory(t) {
  return new (t || CartEntryConnector)(_angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵinject"](CartEntryAdapter));
};
CartEntryConnector.ɵprov = /* @__PURE__ */_angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵdefineInjectable"]({
  token: CartEntryConnector,
  factory: CartEntryConnector.ɵfac,
  providedIn: 'root'
});
(function () {
  (typeof ngDevMode === "undefined" || ngDevMode) && _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵsetClassMetadata"](CartEntryConnector, [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_1__.Injectable,
    args: [{
      providedIn: 'root'
    }]
  }], function () {
    return [{
      type: CartEntryAdapter
    }];
  }, null);
})();

/*
 * SPDX-FileCopyrightText: 2023 SAP Spartacus team <spartacus-team@sap.com>
 *
 * SPDX-License-Identifier: Apache-2.0
 */
class CartEntryEffects {
  constructor(actions$, cartEntryConnector) {
    this.actions$ = actions$;
    this.cartEntryConnector = cartEntryConnector;
    this.contextChange$ = this.actions$.pipe((0,_ngrx_effects__WEBPACK_IMPORTED_MODULE_2__.ofType)(_spartacus_core__WEBPACK_IMPORTED_MODULE_0__.SiteContextActions.CURRENCY_CHANGE, _spartacus_core__WEBPACK_IMPORTED_MODULE_0__.SiteContextActions.LANGUAGE_CHANGE));
    this.logger = (0,_angular_core__WEBPACK_IMPORTED_MODULE_1__.inject)(_spartacus_core__WEBPACK_IMPORTED_MODULE_0__.LoggerService);
    this.addEntry$ = (0,_ngrx_effects__WEBPACK_IMPORTED_MODULE_2__.createEffect)(() => this.actions$.pipe((0,_ngrx_effects__WEBPACK_IMPORTED_MODULE_2__.ofType)(CART_ADD_ENTRY), (0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.map)(action => action.payload), (0,rxjs_operators__WEBPACK_IMPORTED_MODULE_4__.concatMap)(payload => {
      return this.cartEntryConnector.add(payload.userId, payload.cartId, payload.productCode, payload.quantity, payload.pickupStore).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.map)(cartModification => new CartAddEntrySuccess({
        ...payload,
        ...cartModification
      })), (0,rxjs_operators__WEBPACK_IMPORTED_MODULE_5__.catchError)(error => (0,rxjs__WEBPACK_IMPORTED_MODULE_6__.from)([new CartAddEntryFail({
        ...payload,
        error: (0,_spartacus_core__WEBPACK_IMPORTED_MODULE_0__.normalizeHttpError)(error, this.logger)
      }), new LoadCart({
        cartId: payload.cartId,
        userId: payload.userId
      })])));
    }), (0,_spartacus_core__WEBPACK_IMPORTED_MODULE_0__.withdrawOn)(this.contextChange$)));
    this.removeEntry$ = (0,_ngrx_effects__WEBPACK_IMPORTED_MODULE_2__.createEffect)(() => this.actions$.pipe((0,_ngrx_effects__WEBPACK_IMPORTED_MODULE_2__.ofType)(CART_REMOVE_ENTRY), (0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.map)(action => action.payload), (0,rxjs_operators__WEBPACK_IMPORTED_MODULE_4__.concatMap)(payload => this.cartEntryConnector.remove(payload.userId, payload.cartId, payload.entryNumber).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.map)(() => {
      return new CartRemoveEntrySuccess({
        ...payload
      });
    }), (0,rxjs_operators__WEBPACK_IMPORTED_MODULE_5__.catchError)(error => (0,rxjs__WEBPACK_IMPORTED_MODULE_6__.from)([new CartRemoveEntryFail({
      ...payload,
      error: (0,_spartacus_core__WEBPACK_IMPORTED_MODULE_0__.normalizeHttpError)(error, this.logger)
    }), new LoadCart({
      cartId: payload.cartId,
      userId: payload.userId
    })])))), (0,_spartacus_core__WEBPACK_IMPORTED_MODULE_0__.withdrawOn)(this.contextChange$)));
    this.updateEntry$ = (0,_ngrx_effects__WEBPACK_IMPORTED_MODULE_2__.createEffect)(() => this.actions$.pipe((0,_ngrx_effects__WEBPACK_IMPORTED_MODULE_2__.ofType)(CART_UPDATE_ENTRY), (0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.map)(action => action.payload), (0,rxjs_operators__WEBPACK_IMPORTED_MODULE_4__.concatMap)(payload => this.cartEntryConnector.update(payload.userId, payload.cartId, payload.entryNumber, payload.quantity, payload.pickupStore, payload.pickupToDelivery).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.map)(() => {
      return new CartUpdateEntrySuccess({
        ...payload
      });
    }), (0,rxjs_operators__WEBPACK_IMPORTED_MODULE_5__.catchError)(error => (0,rxjs__WEBPACK_IMPORTED_MODULE_6__.from)([new CartUpdateEntryFail({
      ...payload,
      error: (0,_spartacus_core__WEBPACK_IMPORTED_MODULE_0__.normalizeHttpError)(error, this.logger)
    }), new LoadCart({
      cartId: payload.cartId,
      userId: payload.userId
    })])))), (0,_spartacus_core__WEBPACK_IMPORTED_MODULE_0__.withdrawOn)(this.contextChange$)));
  }
}
CartEntryEffects.ɵfac = function CartEntryEffects_Factory(t) {
  return new (t || CartEntryEffects)(_angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵinject"](_ngrx_effects__WEBPACK_IMPORTED_MODULE_2__.Actions), _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵinject"](CartEntryConnector));
};
CartEntryEffects.ɵprov = /* @__PURE__ */_angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵdefineInjectable"]({
  token: CartEntryEffects,
  factory: CartEntryEffects.ɵfac
});
(function () {
  (typeof ngDevMode === "undefined" || ngDevMode) && _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵsetClassMetadata"](CartEntryEffects, [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_1__.Injectable
  }], function () {
    return [{
      type: _ngrx_effects__WEBPACK_IMPORTED_MODULE_2__.Actions
    }, {
      type: CartEntryConnector
    }];
  }, null);
})();

/*
 * SPDX-FileCopyrightText: 2023 SAP Spartacus team <spartacus-team@sap.com>
 *
 * SPDX-License-Identifier: Apache-2.0
 */
class CartVoucherAdapter {}

/*
 * SPDX-FileCopyrightText: 2023 SAP Spartacus team <spartacus-team@sap.com>
 *
 * SPDX-License-Identifier: Apache-2.0
 */
class CartVoucherConnector {
  constructor(adapter) {
    this.adapter = adapter;
  }
  add(userId, cartId, voucherId) {
    return this.adapter.add(userId, cartId, voucherId);
  }
  remove(userId, cartId, voucherId) {
    return this.adapter.remove(userId, cartId, voucherId);
  }
}
CartVoucherConnector.ɵfac = function CartVoucherConnector_Factory(t) {
  return new (t || CartVoucherConnector)(_angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵinject"](CartVoucherAdapter));
};
CartVoucherConnector.ɵprov = /* @__PURE__ */_angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵdefineInjectable"]({
  token: CartVoucherConnector,
  factory: CartVoucherConnector.ɵfac,
  providedIn: 'root'
});
(function () {
  (typeof ngDevMode === "undefined" || ngDevMode) && _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵsetClassMetadata"](CartVoucherConnector, [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_1__.Injectable,
    args: [{
      providedIn: 'root'
    }]
  }], function () {
    return [{
      type: CartVoucherAdapter
    }];
  }, null);
})();

/*
 * SPDX-FileCopyrightText: 2023 SAP Spartacus team <spartacus-team@sap.com>
 *
 * SPDX-License-Identifier: Apache-2.0
 */
class CartVoucherEffects {
  constructor(actions$, cartVoucherConnector, messageService) {
    this.actions$ = actions$;
    this.cartVoucherConnector = cartVoucherConnector;
    this.messageService = messageService;
    this.logger = (0,_angular_core__WEBPACK_IMPORTED_MODULE_1__.inject)(_spartacus_core__WEBPACK_IMPORTED_MODULE_0__.LoggerService);
    this.addCartVoucher$ = (0,_ngrx_effects__WEBPACK_IMPORTED_MODULE_2__.createEffect)(() => this.actions$.pipe((0,_ngrx_effects__WEBPACK_IMPORTED_MODULE_2__.ofType)(CART_ADD_VOUCHER), (0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.map)(action => action.payload), (0,rxjs_operators__WEBPACK_IMPORTED_MODULE_7__.mergeMap)(payload => {
      return this.cartVoucherConnector.add(payload.userId, payload.cartId, payload.voucherId).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.map)(() => {
        this.showGlobalMessage('voucher.applyVoucherSuccess', payload.voucherId, _spartacus_core__WEBPACK_IMPORTED_MODULE_0__.GlobalMessageType.MSG_TYPE_CONFIRMATION);
        return new CartAddVoucherSuccess({
          ...payload
        });
      }), (0,rxjs_operators__WEBPACK_IMPORTED_MODULE_5__.catchError)(error => (0,rxjs__WEBPACK_IMPORTED_MODULE_6__.from)([new CartAddVoucherFail({
        ...payload,
        error: (0,_spartacus_core__WEBPACK_IMPORTED_MODULE_0__.normalizeHttpError)(error, this.logger)
      }), new CartProcessesDecrement(payload.cartId), new LoadCart({
        userId: payload.userId,
        cartId: payload.cartId
      })])));
    })));
    this.removeCartVoucher$ = (0,_ngrx_effects__WEBPACK_IMPORTED_MODULE_2__.createEffect)(() => this.actions$.pipe((0,_ngrx_effects__WEBPACK_IMPORTED_MODULE_2__.ofType)(CART_REMOVE_VOUCHER), (0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.map)(action => action.payload), (0,rxjs_operators__WEBPACK_IMPORTED_MODULE_7__.mergeMap)(payload => {
      return this.cartVoucherConnector.remove(payload.userId, payload.cartId, payload.voucherId).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.map)(() => {
        this.showGlobalMessage('voucher.removeVoucherSuccess', payload.voucherId, _spartacus_core__WEBPACK_IMPORTED_MODULE_0__.GlobalMessageType.MSG_TYPE_INFO);
        return new CartRemoveVoucherSuccess({
          userId: payload.userId,
          cartId: payload.cartId,
          voucherId: payload.voucherId
        });
      }), (0,rxjs_operators__WEBPACK_IMPORTED_MODULE_5__.catchError)(error => (0,rxjs__WEBPACK_IMPORTED_MODULE_6__.from)([new CartRemoveVoucherFail({
        error: (0,_spartacus_core__WEBPACK_IMPORTED_MODULE_0__.normalizeHttpError)(error, this.logger),
        cartId: payload.cartId,
        userId: payload.userId,
        voucherId: payload.voucherId
      }), new LoadCart({
        userId: payload.userId,
        cartId: payload.cartId
      })])));
    })));
  }
  showGlobalMessage(text, param, messageType) {
    this.messageService.add({
      key: text,
      params: {
        voucherCode: param
      }
    }, messageType);
  }
}
CartVoucherEffects.ɵfac = function CartVoucherEffects_Factory(t) {
  return new (t || CartVoucherEffects)(_angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵinject"](_ngrx_effects__WEBPACK_IMPORTED_MODULE_2__.Actions), _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵinject"](CartVoucherConnector), _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵinject"](_spartacus_core__WEBPACK_IMPORTED_MODULE_0__.GlobalMessageService));
};
CartVoucherEffects.ɵprov = /* @__PURE__ */_angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵdefineInjectable"]({
  token: CartVoucherEffects,
  factory: CartVoucherEffects.ɵfac
});
(function () {
  (typeof ngDevMode === "undefined" || ngDevMode) && _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵsetClassMetadata"](CartVoucherEffects, [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_1__.Injectable
  }], function () {
    return [{
      type: _ngrx_effects__WEBPACK_IMPORTED_MODULE_2__.Actions
    }, {
      type: CartVoucherConnector
    }, {
      type: _spartacus_core__WEBPACK_IMPORTED_MODULE_0__.GlobalMessageService
    }];
  }, null);
})();

/*
 * SPDX-FileCopyrightText: 2023 SAP Spartacus team <spartacus-team@sap.com>
 *
 * SPDX-License-Identifier: Apache-2.0
 */
/**
 * Extract cart identifier for current user. Anonymous calls use `guid` and for logged users `code` is used.
 */
function getCartIdByUserId(cart, userId) {
  if (userId === _spartacus_core__WEBPACK_IMPORTED_MODULE_0__.OCC_USER_ID_ANONYMOUS) {
    return cart?.guid ?? '';
  }
  return cart?.code ?? '';
}
/**
 * Check if cart is selective (save for later) based on id.
 */
function isSelectiveCart(cartId = '') {
  return cartId.startsWith('selectivecart');
}
/**
 * Check if the returned error is of type notFound.
 *
 * We additionally check if the cart is not a selective cart.
 * For selective cart this error can happen only when extension is disabled.
 * It should never happen, because in that case, selective cart should also be disabled in our configuration.
 * However if that happens we want to handle these errors silently.
 */
function isCartNotFoundError(error) {
  return error.reason === 'notFound' && error.subjectType === 'cart' && !isSelectiveCart(error.subject);
}
function voucherExceededError(error) {
  return error.message === 'coupon.already.redeemed';
}
function voucherInvalidError(error) {
  return error.message === 'coupon.invalid.code.provided';
}
function isVoucherError(error) {
  return error.type === 'VoucherOperationError';
}
function isCartError(error) {
  return error.type === 'CartError' || error.type === 'CartAddressError' || error.type === 'CartEntryError' || error.type === 'CartEntryGroupError';
}
/**
 * What is a temporary cart?
 * - frontend only cart entity!
 * - can be identified in store by `temp-` prefix with some unique id (multiple carts can be created at the same time eg. active cart, wishlist)
 *
 * Why we need temporary carts?
 * - to have information about cart creation process (meta flags: loading, error - for showing loader, error message)
 * - to know if there is currently a cart creation process in progress (eg. so, we don't create more than one active cart at the same time)
 * - cart identifiers are created in the backend, so those are only known after cart is created
 *
 * Temporary cart life cycle
 * - create cart method invoked
 * - new `temp-${uuid}` cart is created with `loading=true` state
 * - backend returns created cart
 * - normal cart entity is saved under correct id (eg. for logged user under cart `code` key)
 * - temporary cart value is set to backend response (anyone observing this cart can read code/guid from it and switch selector to normal cart)
 * - in next tick temporary cart is removed
 */
function isTempCartId(cartId) {
  return cartId.startsWith('temp-');
}
/**
 * Indicates if given cart is empty.
 * Returns true is cart is undefined, null or is an empty object.
 */
function isEmpty(cart) {
  return !cart || typeof cart === 'object' && Object.keys(cart).length === 0;
}
/**
 * Indicates if given string is matching email pattern
 */
function isEmail(str) {
  if (str) {
    return str.match(_spartacus_core__WEBPACK_IMPORTED_MODULE_0__.EMAIL_PATTERN) ? true : false;
  }
  return false;
}
/**
 * Indicates if a given user is logged in on account different than preceding user account
 */
function isJustLoggedIn(userId, previousUserId) {
  return userId !== _spartacus_core__WEBPACK_IMPORTED_MODULE_0__.OCC_USER_ID_ANONYMOUS &&
  // not logged out
  previousUserId !== userId // *just* logged in / switched to ASM emulation
  ;
}

/*
 * SPDX-FileCopyrightText: 2023 SAP Spartacus team <spartacus-team@sap.com>
 *
 * SPDX-License-Identifier: Apache-2.0
 */
const getMultiCartState = (0,_ngrx_store__WEBPACK_IMPORTED_MODULE_8__.createFeatureSelector)(MULTI_CART_FEATURE);
const getMultiCartEntities = (0,_ngrx_store__WEBPACK_IMPORTED_MODULE_8__.createSelector)(getMultiCartState, state => state.carts);
const getCartEntitySelectorFactory = cartId => {
  return (0,_ngrx_store__WEBPACK_IMPORTED_MODULE_8__.createSelector)(getMultiCartEntities, state => _spartacus_core__WEBPACK_IMPORTED_MODULE_0__.StateUtils.entityProcessesLoaderStateSelector(state, cartId));
};
const getCartSelectorFactory = cartId => {
  return (0,_ngrx_store__WEBPACK_IMPORTED_MODULE_8__.createSelector)(getMultiCartEntities, state => _spartacus_core__WEBPACK_IMPORTED_MODULE_0__.StateUtils.entityValueSelector(state, cartId));
};
const getCartIsStableSelectorFactory = cartId => {
  return (0,_ngrx_store__WEBPACK_IMPORTED_MODULE_8__.createSelector)(getMultiCartEntities, state => _spartacus_core__WEBPACK_IMPORTED_MODULE_0__.StateUtils.entityIsStableSelector(state, cartId));
};
const getCartHasPendingProcessesSelectorFactory = cartId => {
  return (0,_ngrx_store__WEBPACK_IMPORTED_MODULE_8__.createSelector)(getMultiCartEntities, state => _spartacus_core__WEBPACK_IMPORTED_MODULE_0__.StateUtils.entityHasPendingProcessesSelector(state, cartId));
};
const getCartEntriesSelectorFactory = cartId => {
  return (0,_ngrx_store__WEBPACK_IMPORTED_MODULE_8__.createSelector)(getCartSelectorFactory(cartId), state => {
    return state && state.entries ? state.entries : [];
  });
};
const getCartEntrySelectorFactory = (cartId, productCode) => {
  return (0,_ngrx_store__WEBPACK_IMPORTED_MODULE_8__.createSelector)(getCartEntriesSelectorFactory(cartId), state => {
    return state.find(entry => entry.product?.code === productCode);
  });
};
const getCartsSelectorFactory = (0,_ngrx_store__WEBPACK_IMPORTED_MODULE_8__.createSelector)(getMultiCartEntities, state => Object.keys(state.entities).map(key => _spartacus_core__WEBPACK_IMPORTED_MODULE_0__.StateUtils.entityValueSelector(state, key)));
const getCartTypeIndex = (0,_ngrx_store__WEBPACK_IMPORTED_MODULE_8__.createSelector)(getMultiCartState, state => state.index);
const getCartIdByTypeFactory = type => {
  return (0,_ngrx_store__WEBPACK_IMPORTED_MODULE_8__.createSelector)(getCartTypeIndex, state => {
    return state && state[type];
  });
};

/*
 * SPDX-FileCopyrightText: 2023 SAP Spartacus team <spartacus-team@sap.com>
 *
 * SPDX-License-Identifier: Apache-2.0
 */
class CartAdapter {}

/*
 * SPDX-FileCopyrightText: 2023 SAP Spartacus team <spartacus-team@sap.com>
 *
 * SPDX-License-Identifier: Apache-2.0
 */
class CartConnector {
  constructor(adapter) {
    this.adapter = adapter;
  }
  loadAll(userId) {
    return this.adapter.loadAll(userId);
  }
  load(userId, cartId) {
    return this.adapter.load(userId, cartId);
  }
  create(userId, oldCartId, toMergeCartGuid) {
    return this.adapter.create(userId, oldCartId, toMergeCartGuid);
  }
  delete(userId, cartId) {
    return this.adapter.delete(userId, cartId);
  }
  save(userId, cartId, saveCartName, saveCartDescription) {
    return this.adapter.save(userId, cartId, saveCartName, saveCartDescription);
  }
  addEmail(userId, cartId, email) {
    return this.adapter.addEmail(userId, cartId, email);
  }
}
CartConnector.ɵfac = function CartConnector_Factory(t) {
  return new (t || CartConnector)(_angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵinject"](CartAdapter));
};
CartConnector.ɵprov = /* @__PURE__ */_angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵdefineInjectable"]({
  token: CartConnector,
  factory: CartConnector.ɵfac,
  providedIn: 'root'
});
(function () {
  (typeof ngDevMode === "undefined" || ngDevMode) && _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵsetClassMetadata"](CartConnector, [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_1__.Injectable,
    args: [{
      providedIn: 'root'
    }]
  }], function () {
    return [{
      type: CartAdapter
    }];
  }, null);
})();

/*
 * SPDX-FileCopyrightText: 2023 SAP Spartacus team <spartacus-team@sap.com>
 *
 * SPDX-License-Identifier: Apache-2.0
 */
class CartEffects {
  handleLoadCartError(payload, error) {
    if (error?.error?.errors) {
      const couponExpiredErrors = error.error.errors.filter(err => err.reason === 'invalid');
      if (couponExpiredErrors.length > 0) {
        // Reload in case of expired coupon.
        return (0,rxjs__WEBPACK_IMPORTED_MODULE_9__.of)(new LoadCart({
          ...payload
        }));
      }
      const cartNotFoundErrors = error.error.errors.filter(err => isCartNotFoundError(err) || err.reason === 'UnknownResourceError');
      if (cartNotFoundErrors.length > 0) {
        // Remove cart as it doesn't exist on backend (selective cart always exists).
        return (0,rxjs__WEBPACK_IMPORTED_MODULE_9__.of)(new RemoveCart({
          cartId: payload.cartId
        }));
      }
    }
    return (0,rxjs__WEBPACK_IMPORTED_MODULE_9__.of)(new LoadCartFail({
      ...payload,
      error: (0,_spartacus_core__WEBPACK_IMPORTED_MODULE_0__.normalizeHttpError)(error, this.logger)
    }));
  }
  constructor(actions$, cartConnector, store) {
    this.actions$ = actions$;
    this.cartConnector = cartConnector;
    this.store = store;
    this.contextChange$ = this.actions$.pipe((0,_ngrx_effects__WEBPACK_IMPORTED_MODULE_2__.ofType)(_spartacus_core__WEBPACK_IMPORTED_MODULE_0__.SiteContextActions.CURRENCY_CHANGE, _spartacus_core__WEBPACK_IMPORTED_MODULE_0__.SiteContextActions.LANGUAGE_CHANGE));
    this.logger = (0,_angular_core__WEBPACK_IMPORTED_MODULE_1__.inject)(_spartacus_core__WEBPACK_IMPORTED_MODULE_0__.LoggerService);
    this.loadCart$ = (0,_ngrx_effects__WEBPACK_IMPORTED_MODULE_2__.createEffect)(() => this.actions$.pipe((0,_ngrx_effects__WEBPACK_IMPORTED_MODULE_2__.ofType)(LOAD_CART), (0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.map)(action => action.payload), (0,rxjs_operators__WEBPACK_IMPORTED_MODULE_10__.groupBy)(payload => payload.cartId), (0,rxjs_operators__WEBPACK_IMPORTED_MODULE_7__.mergeMap)(group$ => group$.pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_11__.switchMap)(payload => {
      return (0,rxjs__WEBPACK_IMPORTED_MODULE_9__.of)(payload).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_12__.withLatestFrom)(this.store.pipe((0,_ngrx_store__WEBPACK_IMPORTED_MODULE_8__.select)(getCartHasPendingProcessesSelectorFactory(payload.cartId)))));
    }), (0,rxjs_operators__WEBPACK_IMPORTED_MODULE_13__.filter)(([_, hasPendingProcesses]) => !hasPendingProcesses), (0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.map)(([payload]) => payload), (0,rxjs_operators__WEBPACK_IMPORTED_MODULE_11__.switchMap)(payload => {
      return this.cartConnector.load(payload.userId, payload.cartId).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_7__.mergeMap)(cart => {
        let actions = [];
        if (cart) {
          actions.push(new LoadCartSuccess({
            ...payload,
            cart,
            cartId: getCartIdByUserId(cart, payload.userId)
          }));
          if (payload.cartId === _spartacus_core__WEBPACK_IMPORTED_MODULE_0__.OCC_CART_ID_CURRENT) {
            // Removing cart from entity object under `current` key as it is no longer needed.
            // Current cart is loaded under it's code entity.
            actions.push(new RemoveCart({
              cartId: _spartacus_core__WEBPACK_IMPORTED_MODULE_0__.OCC_CART_ID_CURRENT
            }));
          }
        } else {
          actions = [new LoadCartFail({
            ...payload,
            error: {}
          })];
        }
        return actions;
      }), (0,rxjs_operators__WEBPACK_IMPORTED_MODULE_5__.catchError)(error => this.handleLoadCartError(payload, error)));
    }))), (0,_spartacus_core__WEBPACK_IMPORTED_MODULE_0__.withdrawOn)(this.contextChange$)));
    this.createCart$ = (0,_ngrx_effects__WEBPACK_IMPORTED_MODULE_2__.createEffect)(() => this.actions$.pipe((0,_ngrx_effects__WEBPACK_IMPORTED_MODULE_2__.ofType)(CREATE_CART), (0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.map)(action => action.payload), (0,rxjs_operators__WEBPACK_IMPORTED_MODULE_7__.mergeMap)(payload => {
      return this.cartConnector.create(payload.userId, payload.oldCartId, payload.toMergeCartGuid).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_11__.switchMap)(cart => {
        const conditionalActions = [];
        if (payload.oldCartId) {
          conditionalActions.push(new MergeCartSuccess({
            extraData: payload.extraData,
            userId: payload.userId,
            tempCartId: payload.tempCartId,
            cartId: getCartIdByUserId(cart, payload.userId),
            oldCartId: payload.oldCartId
          }));
        }
        return [new CreateCartSuccess({
          ...payload,
          cart,
          cartId: getCartIdByUserId(cart, payload.userId)
        }), new RemoveCart({
          cartId: payload.tempCartId
        }), ...conditionalActions];
      }), (0,rxjs_operators__WEBPACK_IMPORTED_MODULE_5__.catchError)(error => (0,rxjs__WEBPACK_IMPORTED_MODULE_9__.of)(new CreateCartFail({
        ...payload,
        error: (0,_spartacus_core__WEBPACK_IMPORTED_MODULE_0__.normalizeHttpError)(error, this.logger)
      }))));
    }), (0,_spartacus_core__WEBPACK_IMPORTED_MODULE_0__.withdrawOn)(this.contextChange$)));
    this.mergeCart$ = (0,_ngrx_effects__WEBPACK_IMPORTED_MODULE_2__.createEffect)(() => this.actions$.pipe((0,_ngrx_effects__WEBPACK_IMPORTED_MODULE_2__.ofType)(MERGE_CART), (0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.map)(action => action.payload), (0,rxjs_operators__WEBPACK_IMPORTED_MODULE_11__.switchMap)(payload => {
      return this.cartConnector.load(payload.userId, _spartacus_core__WEBPACK_IMPORTED_MODULE_0__.OCC_CART_ID_CURRENT).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.map)(currentCart => {
        if (currentCart?.code !== payload.cartId) {
          return new CreateCart({
            userId: payload.userId,
            oldCartId: payload.cartId,
            toMergeCartGuid: currentCart ? currentCart.guid : undefined,
            extraData: payload.extraData,
            tempCartId: payload.tempCartId
          });
        }
      }), (0,rxjs_operators__WEBPACK_IMPORTED_MODULE_13__.filter)(_spartacus_core__WEBPACK_IMPORTED_MODULE_0__.isNotUndefined));
    }), (0,_spartacus_core__WEBPACK_IMPORTED_MODULE_0__.withdrawOn)(this.contextChange$)));
    // TODO(#7241): Remove when AddVoucherSuccess actions will extend processes actions
    this.refresh$ = (0,_ngrx_effects__WEBPACK_IMPORTED_MODULE_2__.createEffect)(() => this.actions$.pipe((0,_ngrx_effects__WEBPACK_IMPORTED_MODULE_2__.ofType)(CART_ADD_VOUCHER_SUCCESS), (0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.map)(action => action.payload), (0,rxjs_operators__WEBPACK_IMPORTED_MODULE_4__.concatMap)(payload => (0,rxjs__WEBPACK_IMPORTED_MODULE_6__.from)([new CartProcessesDecrement(payload.cartId), new LoadCart({
      userId: payload.userId,
      cartId: payload.cartId
    })]))));
    // TODO: Switch to automatic cart reload on processes count reaching 0 for cart entity
    this.refreshWithoutProcesses$ = (0,_ngrx_effects__WEBPACK_IMPORTED_MODULE_2__.createEffect)(() => this.actions$.pipe((0,_ngrx_effects__WEBPACK_IMPORTED_MODULE_2__.ofType)(CART_ADD_ENTRY_SUCCESS, CART_REMOVE_ENTRY_SUCCESS, CART_UPDATE_ENTRY_SUCCESS, CART_REMOVE_VOUCHER_SUCCESS), (0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.map)(action => action.payload), (0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.map)(payload => new LoadCart({
      userId: payload.userId,
      cartId: payload.cartId
    }))));
    this.resetCartDetailsOnSiteContextChange$ = (0,_ngrx_effects__WEBPACK_IMPORTED_MODULE_2__.createEffect)(() => this.actions$.pipe((0,_ngrx_effects__WEBPACK_IMPORTED_MODULE_2__.ofType)(_spartacus_core__WEBPACK_IMPORTED_MODULE_0__.SiteContextActions.LANGUAGE_CHANGE, _spartacus_core__WEBPACK_IMPORTED_MODULE_0__.SiteContextActions.CURRENCY_CHANGE), (0,rxjs_operators__WEBPACK_IMPORTED_MODULE_7__.mergeMap)(() => {
      return [new ResetCartDetails()];
    })));
    this.addEmail$ = (0,_ngrx_effects__WEBPACK_IMPORTED_MODULE_2__.createEffect)(() => this.actions$.pipe((0,_ngrx_effects__WEBPACK_IMPORTED_MODULE_2__.ofType)(ADD_EMAIL_TO_CART), (0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.map)(action => action.payload), (0,rxjs_operators__WEBPACK_IMPORTED_MODULE_7__.mergeMap)(payload => this.cartConnector.addEmail(payload.userId, payload.cartId, payload.email).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_7__.mergeMap)(() => {
      return [new AddEmailToCartSuccess({
        ...payload
      }), new LoadCart({
        userId: payload.userId,
        cartId: payload.cartId
      })];
    }), (0,rxjs_operators__WEBPACK_IMPORTED_MODULE_5__.catchError)(error => (0,rxjs__WEBPACK_IMPORTED_MODULE_6__.from)([new AddEmailToCartFail({
      ...payload,
      error: (0,_spartacus_core__WEBPACK_IMPORTED_MODULE_0__.normalizeHttpError)(error, this.logger)
    }), new LoadCart({
      userId: payload.userId,
      cartId: payload.cartId
    })])))), (0,_spartacus_core__WEBPACK_IMPORTED_MODULE_0__.withdrawOn)(this.contextChange$)));
    this.deleteCart$ = (0,_ngrx_effects__WEBPACK_IMPORTED_MODULE_2__.createEffect)(() => this.actions$.pipe((0,_ngrx_effects__WEBPACK_IMPORTED_MODULE_2__.ofType)(DELETE_CART), (0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.map)(action => action.payload), (0,rxjs_operators__WEBPACK_IMPORTED_MODULE_7__.mergeMap)(payload => this.cartConnector.delete(payload.userId, payload.cartId).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.map)(() => {
      return new DeleteCartSuccess({
        ...payload
      });
    }), (0,rxjs_operators__WEBPACK_IMPORTED_MODULE_5__.catchError)(error => (0,rxjs__WEBPACK_IMPORTED_MODULE_6__.from)([new DeleteCartFail({
      ...payload,
      error: (0,_spartacus_core__WEBPACK_IMPORTED_MODULE_0__.normalizeHttpError)(error, this.logger)
    }),
    // Error might happen in higher backend layer and cart could still be removed.
    // When load fail with NotFound error then RemoveCart action will kick in and clear that cart in our state.
    new LoadCart({
      ...payload
    })]))))));
  }
}
CartEffects.ɵfac = function CartEffects_Factory(t) {
  return new (t || CartEffects)(_angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵinject"](_ngrx_effects__WEBPACK_IMPORTED_MODULE_2__.Actions), _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵinject"](CartConnector), _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵinject"](_ngrx_store__WEBPACK_IMPORTED_MODULE_8__.Store));
};
CartEffects.ɵprov = /* @__PURE__ */_angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵdefineInjectable"]({
  token: CartEffects,
  factory: CartEffects.ɵfac
});
(function () {
  (typeof ngDevMode === "undefined" || ngDevMode) && _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵsetClassMetadata"](CartEffects, [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_1__.Injectable
  }], function () {
    return [{
      type: _ngrx_effects__WEBPACK_IMPORTED_MODULE_2__.Actions
    }, {
      type: CartConnector
    }, {
      type: _ngrx_store__WEBPACK_IMPORTED_MODULE_8__.Store
    }];
  }, null);
})();

/*
 * SPDX-FileCopyrightText: 2023 SAP Spartacus team <spartacus-team@sap.com>
 *
 * SPDX-License-Identifier: Apache-2.0
 */
class MultiCartEffectsService {
  /**
   * Verifies if cart is the active cart or saved cart and returns the appropriate cart type
   * @param action
   * @returns cart type
   */
  getActiveCartTypeOnLoadSuccess(action) {
    if (action?.payload?.extraData?.active) {
      // saved cart is not active cart
      if (action.payload?.cart.saveTime) {
        return new SetCartTypeIndex({
          cartType: _spartacus_cart_base_root__WEBPACK_IMPORTED_MODULE_14__.CartType.ACTIVE,
          cartId: ''
        });
      }
      return new SetCartTypeIndex({
        cartType: _spartacus_cart_base_root__WEBPACK_IMPORTED_MODULE_14__.CartType.ACTIVE,
        cartId: action.meta.entityId
      });
    }
  }
}
MultiCartEffectsService.ɵfac = function MultiCartEffectsService_Factory(t) {
  return new (t || MultiCartEffectsService)();
};
MultiCartEffectsService.ɵprov = /* @__PURE__ */_angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵdefineInjectable"]({
  token: MultiCartEffectsService,
  factory: MultiCartEffectsService.ɵfac
});
(function () {
  (typeof ngDevMode === "undefined" || ngDevMode) && _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵsetClassMetadata"](MultiCartEffectsService, [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_1__.Injectable
  }], null, null);
})();

/*
 * SPDX-FileCopyrightText: 2023 SAP Spartacus team <spartacus-team@sap.com>
 *
 * SPDX-License-Identifier: Apache-2.0
 */
class MultiCartEffects {
  /**
   * Verifies if cart is the current cart and returns the appropriate cart type
   * @param action
   * @returns cart type needed on load
   */
  getActiveCartTypeOnLoad(action) {
    if (action?.payload?.cartId === _spartacus_core__WEBPACK_IMPORTED_MODULE_0__.OCC_CART_ID_CURRENT) {
      return new SetCartTypeIndex({
        cartType: _spartacus_cart_base_root__WEBPACK_IMPORTED_MODULE_14__.CartType.ACTIVE,
        cartId: ''
      });
    }
    return undefined;
  }
  /**
   * Verifies if cart is the active cart or saved cart and returns the appropriate cart type
   * @param action
   * @returns cart type
   */
  getActiveCartTypeOnLoadSuccess(action) {
    // Extracted small portion of private effect's logic to a public service
    // to allow FSA for customizing it (for more, see CXSPA-3551)
    return this.multiCartEffectsService.getActiveCartTypeOnLoadSuccess(action);
  }
  /**
   * Verifies if cart is active and returns the appropriate cart type
   * @param action
   * @returns cart type needed on creation
   */
  getActiveCartTypeOnCreate(action) {
    if (action?.payload?.extraData?.active) {
      return new SetCartTypeIndex({
        cartType: _spartacus_cart_base_root__WEBPACK_IMPORTED_MODULE_14__.CartType.ACTIVE,
        cartId: action.meta.entityId
      });
    }
    return undefined;
  }
  constructor(actions$, multiCartEffectsService) {
    this.actions$ = actions$;
    this.multiCartEffectsService = multiCartEffectsService;
    // TODO(#7241): Remove when we drop ADD_VOUCHER process and we sort out checkout and cart dependencies
    this.processesIncrement$ = (0,_ngrx_effects__WEBPACK_IMPORTED_MODULE_2__.createEffect)(() => this.actions$.pipe((0,_ngrx_effects__WEBPACK_IMPORTED_MODULE_2__.ofType)(CART_ADD_VOUCHER), (0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.map)(action => action.payload), (0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.map)(payload => new CartProcessesIncrement(payload.cartId))));
    this.setSelectiveId$ = (0,_ngrx_effects__WEBPACK_IMPORTED_MODULE_2__.createEffect)(() => this.actions$.pipe((0,_ngrx_effects__WEBPACK_IMPORTED_MODULE_2__.ofType)(LOAD_CART_SUCCESS), (0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.map)(action => {
      switch (action.type) {
        case LOAD_CART_SUCCESS:
          {
            const payload = action.payload;
            if (isSelectiveCart(payload.cartId)) {
              return new SetCartTypeIndex({
                cartType: _spartacus_cart_base_root__WEBPACK_IMPORTED_MODULE_14__.CartType.SELECTIVE,
                cartId: payload.cartId
              });
            }
            break;
          }
      }
    }), (0,rxjs_operators__WEBPACK_IMPORTED_MODULE_13__.filter)(_spartacus_core__WEBPACK_IMPORTED_MODULE_0__.isNotUndefined)));
    this.setActiveCartId$ = (0,_ngrx_effects__WEBPACK_IMPORTED_MODULE_2__.createEffect)(() => this.actions$.pipe((0,_ngrx_effects__WEBPACK_IMPORTED_MODULE_2__.ofType)(LOAD_CART_SUCCESS, LOAD_CART, CREATE_CART_SUCCESS, CREATE_CART, SET_ACTIVE_CART_ID), (0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.map)(action => {
      switch (action.type) {
        case LOAD_CART:
          {
            return this.getActiveCartTypeOnLoad(action);
          }
        case LOAD_CART_SUCCESS:
          {
            return this.getActiveCartTypeOnLoadSuccess(action);
          }
        case CREATE_CART:
          {
            return this.getActiveCartTypeOnCreate(action);
          }
        case CREATE_CART_SUCCESS:
          {
            return new SetCartTypeIndex({
              cartType: action?.payload?.extraData?.active ? _spartacus_cart_base_root__WEBPACK_IMPORTED_MODULE_14__.CartType.ACTIVE : _spartacus_cart_base_root__WEBPACK_IMPORTED_MODULE_14__.CartType.NEW_CREATED,
              cartId: action.meta.entityId
            });
          }
        case SET_ACTIVE_CART_ID:
          return new SetCartTypeIndex({
            cartType: _spartacus_cart_base_root__WEBPACK_IMPORTED_MODULE_14__.CartType.ACTIVE,
            cartId: action.payload
          });
      }
      return undefined;
    }), (0,rxjs_operators__WEBPACK_IMPORTED_MODULE_13__.filter)(_spartacus_core__WEBPACK_IMPORTED_MODULE_0__.isNotUndefined)));
  }
}
MultiCartEffects.ɵfac = function MultiCartEffects_Factory(t) {
  return new (t || MultiCartEffects)(_angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵinject"](_ngrx_effects__WEBPACK_IMPORTED_MODULE_2__.Actions), _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵinject"](MultiCartEffectsService));
};
MultiCartEffects.ɵprov = /* @__PURE__ */_angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵdefineInjectable"]({
  token: MultiCartEffects,
  factory: MultiCartEffects.ɵfac
});
(function () {
  (typeof ngDevMode === "undefined" || ngDevMode) && _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵsetClassMetadata"](MultiCartEffects, [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_1__.Injectable
  }], function () {
    return [{
      type: _ngrx_effects__WEBPACK_IMPORTED_MODULE_2__.Actions
    }, {
      type: MultiCartEffectsService
    }];
  }, null);
})();

/*
 * SPDX-FileCopyrightText: 2023 SAP Spartacus team <spartacus-team@sap.com>
 *
 * SPDX-License-Identifier: Apache-2.0
 */
const effects = [CartEntryEffects, CartVoucherEffects, CartEffects, MultiCartEffects];

/*
 * SPDX-FileCopyrightText: 2023 SAP Spartacus team <spartacus-team@sap.com>
 *
 * SPDX-License-Identifier: Apache-2.0
 */
const cartTypeIndexInitialState = {
  [_spartacus_cart_base_root__WEBPACK_IMPORTED_MODULE_14__.CartType.ACTIVE]: ''
};
function cartTypeIndexReducer(state = cartTypeIndexInitialState, action) {
  switch (action.type) {
    case SET_CART_TYPE_INDEX:
      return {
        ...state,
        [action.payload.cartType]: action.payload.cartId
      };
    case REMOVE_CART:
    case DELETE_CART_SUCCESS:
      {
        if (action.payload?.cartId === state[_spartacus_cart_base_root__WEBPACK_IMPORTED_MODULE_14__.CartType.ACTIVE]) {
          return {
            ...state,
            [_spartacus_cart_base_root__WEBPACK_IMPORTED_MODULE_14__.CartType.ACTIVE]: ''
          };
        }
        return state;
      }
    case CLEAR_CART_STATE:
      return cartTypeIndexInitialState;
  }
  return state;
}
const cartEntitiesInitialState = undefined;
function cartEntitiesReducer(state = cartEntitiesInitialState, action) {
  switch (action.type) {
    case LOAD_CARTS_SUCCESS:
      return action.payload;
    case LOAD_CART_SUCCESS:
    case CREATE_CART_SUCCESS:
    case SET_CART_DATA:
      return action.payload.cart;
  }
  return state;
}

/*
 * SPDX-FileCopyrightText: 2023 SAP Spartacus team <spartacus-team@sap.com>
 *
 * SPDX-License-Identifier: Apache-2.0
 */
function clearMultiCartState(reducer) {
  return function (state, action) {
    if (action.type === _spartacus_core__WEBPACK_IMPORTED_MODULE_0__.AuthActions.LOGOUT) {
      state = undefined;
    }
    return reducer(state, action);
  };
}
const multiCartMetaReducers = [clearMultiCartState];
const multiCartReducerToken = new _angular_core__WEBPACK_IMPORTED_MODULE_1__.InjectionToken('MultiCartReducers');
function getMultiCartReducers() {
  return {
    carts: _spartacus_core__WEBPACK_IMPORTED_MODULE_0__.StateUtils.entityProcessesLoaderReducer(MULTI_CART_DATA, cartEntitiesReducer),
    index: cartTypeIndexReducer
  };
}
const multiCartReducerProvider = {
  provide: multiCartReducerToken,
  useFactory: getMultiCartReducers
};

/*
 * SPDX-FileCopyrightText: 2023 SAP Spartacus team <spartacus-team@sap.com>
 *
 * SPDX-License-Identifier: Apache-2.0
 */

var multiCartGroup_selectors = /*#__PURE__*/Object.freeze({
  __proto__: null,
  getCartEntitySelectorFactory: getCartEntitySelectorFactory,
  getCartEntriesSelectorFactory: getCartEntriesSelectorFactory,
  getCartEntrySelectorFactory: getCartEntrySelectorFactory,
  getCartHasPendingProcessesSelectorFactory: getCartHasPendingProcessesSelectorFactory,
  getCartIdByTypeFactory: getCartIdByTypeFactory,
  getCartIsStableSelectorFactory: getCartIsStableSelectorFactory,
  getCartSelectorFactory: getCartSelectorFactory,
  getCartTypeIndex: getCartTypeIndex,
  getCartsSelectorFactory: getCartsSelectorFactory,
  getMultiCartEntities: getMultiCartEntities,
  getMultiCartState: getMultiCartState
});

/*
 * SPDX-FileCopyrightText: 2023 SAP Spartacus team <spartacus-team@sap.com>
 *
 * SPDX-License-Identifier: Apache-2.0
 */

/*
 * SPDX-FileCopyrightText: 2023 SAP Spartacus team <spartacus-team@sap.com>
 *
 * SPDX-License-Identifier: Apache-2.0
 */

/*
 * SPDX-FileCopyrightText: 2023 SAP Spartacus team <spartacus-team@sap.com>
 *
 * SPDX-License-Identifier: Apache-2.0
 */
class MultiCartStatePersistenceService {
  constructor(statePersistenceService, store, siteContextParamsService) {
    this.statePersistenceService = statePersistenceService;
    this.store = store;
    this.siteContextParamsService = siteContextParamsService;
    this.subscription = new rxjs__WEBPACK_IMPORTED_MODULE_15__.Subscription();
  }
  initSync() {
    this.subscription.add(this.statePersistenceService.syncWithStorage({
      key: 'cart',
      state$: this.getCartState(),
      context$: this.siteContextParamsService.getValues([_spartacus_core__WEBPACK_IMPORTED_MODULE_0__.BASE_SITE_CONTEXT_ID]),
      storageType: _spartacus_core__WEBPACK_IMPORTED_MODULE_0__.StorageSyncType.LOCAL_STORAGE,
      onRead: state => this.onRead(state)
    }));
  }
  getCartState() {
    return this.store.pipe(
    // Since getCartState() may be called while the module is lazy loded
    // The cart state slice may not exist yet in the first store emissions.
    (0,rxjs_operators__WEBPACK_IMPORTED_MODULE_13__.filter)(store => !!store.cart), (0,_ngrx_store__WEBPACK_IMPORTED_MODULE_8__.select)(getMultiCartState), (0,rxjs_operators__WEBPACK_IMPORTED_MODULE_13__.filter)(state => !!state), (0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.map)(state => state.index), (0,rxjs_operators__WEBPACK_IMPORTED_MODULE_16__.distinctUntilKeyChanged)('Active'), (0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.map)(indexState => {
      return {
        active: indexState[_spartacus_cart_base_root__WEBPACK_IMPORTED_MODULE_14__.CartType.ACTIVE] ?? ''
      };
    }));
  }
  onRead(state) {
    this.store.dispatch(new ClearCartState());
    if (state) {
      this.store.dispatch(new SetActiveCartId(state.active));
    } else {
      this.store.dispatch(new SetActiveCartId(''));
    }
  }
  ngOnDestroy() {
    this.subscription.unsubscribe();
  }
}
MultiCartStatePersistenceService.ɵfac = function MultiCartStatePersistenceService_Factory(t) {
  return new (t || MultiCartStatePersistenceService)(_angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵinject"](_spartacus_core__WEBPACK_IMPORTED_MODULE_0__.StatePersistenceService), _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵinject"](_ngrx_store__WEBPACK_IMPORTED_MODULE_8__.Store), _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵinject"](_spartacus_core__WEBPACK_IMPORTED_MODULE_0__.SiteContextParamsService));
};
MultiCartStatePersistenceService.ɵprov = /* @__PURE__ */_angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵdefineInjectable"]({
  token: MultiCartStatePersistenceService,
  factory: MultiCartStatePersistenceService.ɵfac,
  providedIn: 'root'
});
(function () {
  (typeof ngDevMode === "undefined" || ngDevMode) && _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵsetClassMetadata"](MultiCartStatePersistenceService, [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_1__.Injectable,
    args: [{
      providedIn: 'root'
    }]
  }], function () {
    return [{
      type: _spartacus_core__WEBPACK_IMPORTED_MODULE_0__.StatePersistenceService
    }, {
      type: _ngrx_store__WEBPACK_IMPORTED_MODULE_8__.Store
    }, {
      type: _spartacus_core__WEBPACK_IMPORTED_MODULE_0__.SiteContextParamsService
    }];
  }, null);
})();

/*
 * SPDX-FileCopyrightText: 2023 SAP Spartacus team <spartacus-team@sap.com>
 *
 * SPDX-License-Identifier: Apache-2.0
 */
function cartStatePersistenceFactory(cartStatePersistenceService, configInit) {
  const result = () => configInit.getStable('context').pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_17__.tap)(() => {
    cartStatePersistenceService.initSync();
  })).toPromise();
  return result;
}
/**
 * Before `MultiCartStatePersistenceService` restores the active cart id `ActiveCartService`
 * will use `current` cart instead of the one saved in browser. This meta reducer
 * sets the value on store initialization to undefined cart which holds active cart loading
 * until the data from storage is restored.
 */
function uninitializeActiveCartMetaReducerFactory() {
  const metaReducer = reducer => (state, action) => {
    const newState = {
      ...state
    };
    if (action.type === '@ngrx/store/init') {
      newState.cart = {
        ...newState.cart,
        ...{
          index: {
            [_spartacus_cart_base_root__WEBPACK_IMPORTED_MODULE_14__.CartType.ACTIVE]: undefined
          }
        }
      };
    }
    return reducer(newState, action);
  };
  return metaReducer;
}
/**
 * Complimentary module for cart to store cart id in browser storage.
 * This makes it possible to work on the same anonymous cart even after page refresh.
 */
class CartPersistenceModule {}
CartPersistenceModule.ɵfac = function CartPersistenceModule_Factory(t) {
  return new (t || CartPersistenceModule)();
};
CartPersistenceModule.ɵmod = /* @__PURE__ */_angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵdefineNgModule"]({
  type: CartPersistenceModule
});
CartPersistenceModule.ɵinj = /* @__PURE__ */_angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵdefineInjector"]({
  providers: [{
    provide: _spartacus_core__WEBPACK_IMPORTED_MODULE_0__.MODULE_INITIALIZER,
    useFactory: cartStatePersistenceFactory,
    deps: [MultiCartStatePersistenceService, _spartacus_core__WEBPACK_IMPORTED_MODULE_0__.ConfigInitializerService],
    multi: true
  }, {
    provide: _ngrx_store__WEBPACK_IMPORTED_MODULE_8__.META_REDUCERS,
    useFactory: uninitializeActiveCartMetaReducerFactory,
    multi: true
  }]
});
(function () {
  (typeof ngDevMode === "undefined" || ngDevMode) && _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵsetClassMetadata"](CartPersistenceModule, [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_1__.NgModule,
    args: [{
      imports: [],
      providers: [{
        provide: _spartacus_core__WEBPACK_IMPORTED_MODULE_0__.MODULE_INITIALIZER,
        useFactory: cartStatePersistenceFactory,
        deps: [MultiCartStatePersistenceService, _spartacus_core__WEBPACK_IMPORTED_MODULE_0__.ConfigInitializerService],
        multi: true
      }, {
        provide: _ngrx_store__WEBPACK_IMPORTED_MODULE_8__.META_REDUCERS,
        useFactory: uninitializeActiveCartMetaReducerFactory,
        multi: true
      }]
    }]
  }], null, null);
})();

/*
 * SPDX-FileCopyrightText: 2023 SAP Spartacus team <spartacus-team@sap.com>
 *
 * SPDX-License-Identifier: Apache-2.0
 */
class CartValidationAdapter {}

/*
 * SPDX-FileCopyrightText: 2023 SAP Spartacus team <spartacus-team@sap.com>
 *
 * SPDX-License-Identifier: Apache-2.0
 */
class CartValidationConnector {
  constructor(adapter) {
    this.adapter = adapter;
  }
  validate(cartId, userId) {
    return this.adapter.validate(cartId, userId);
  }
}
CartValidationConnector.ɵfac = function CartValidationConnector_Factory(t) {
  return new (t || CartValidationConnector)(_angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵinject"](CartValidationAdapter));
};
CartValidationConnector.ɵprov = /* @__PURE__ */_angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵdefineInjectable"]({
  token: CartValidationConnector,
  factory: CartValidationConnector.ɵfac,
  providedIn: 'root'
});
(function () {
  (typeof ngDevMode === "undefined" || ngDevMode) && _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵsetClassMetadata"](CartValidationConnector, [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_1__.Injectable,
    args: [{
      providedIn: 'root'
    }]
  }], function () {
    return [{
      type: CartValidationAdapter
    }];
  }, null);
})();

/*
 * SPDX-FileCopyrightText: 2023 SAP Spartacus team <spartacus-team@sap.com>
 *
 * SPDX-License-Identifier: Apache-2.0
 */
/**
 * Registers events for the active cart
 */
class CartEventBuilder {
  constructor(actionsSubject, event, activeCartService, stateEventService) {
    this.actionsSubject = actionsSubject;
    this.event = event;
    this.activeCartService = activeCartService;
    this.stateEventService = stateEventService;
    this.register();
  }
  /**
   * Registers events for the active cart
   */
  register() {
    this.registerCreateCart();
    this.registerAddEntry();
    this.registerRemoveEntry();
    this.registerUpdateEntry();
    this.registerDeleteCart();
    this.registerAddCartVoucher();
    this.registerRemoveCartVoucher();
    this.registerMergeCartSuccess();
  }
  /**
   * Register events for adding entry to the active cart
   */
  registerAddEntry() {
    this.registerMapped({
      action: CART_ADD_ENTRY,
      event: _spartacus_cart_base_root__WEBPACK_IMPORTED_MODULE_14__.CartAddEntryEvent
    });
    this.registerMapped({
      action: CART_ADD_ENTRY_SUCCESS,
      event: _spartacus_cart_base_root__WEBPACK_IMPORTED_MODULE_14__.CartAddEntrySuccessEvent
    });
    this.registerMapped({
      action: CART_ADD_ENTRY_FAIL,
      event: _spartacus_cart_base_root__WEBPACK_IMPORTED_MODULE_14__.CartAddEntryFailEvent
    });
  }
  registerRemoveEntry() {
    this.registerMapped({
      action: CART_REMOVE_ENTRY_SUCCESS,
      event: _spartacus_cart_base_root__WEBPACK_IMPORTED_MODULE_14__.CartRemoveEntrySuccessEvent
    });
    this.registerMapped({
      action: CART_REMOVE_ENTRY_FAIL,
      event: _spartacus_cart_base_root__WEBPACK_IMPORTED_MODULE_14__.CartRemoveEntryFailEvent
    });
  }
  registerUpdateEntry() {
    this.registerMapped({
      action: CART_UPDATE_ENTRY_SUCCESS,
      event: _spartacus_cart_base_root__WEBPACK_IMPORTED_MODULE_14__.CartUpdateEntrySuccessEvent
    });
    this.registerMapped({
      action: CART_UPDATE_ENTRY_FAIL,
      event: _spartacus_cart_base_root__WEBPACK_IMPORTED_MODULE_14__.CartUpdateEntryFailEvent
    });
  }
  registerMergeCartSuccess() {
    this.registerMapped({
      action: MERGE_CART_SUCCESS,
      event: _spartacus_cart_base_root__WEBPACK_IMPORTED_MODULE_14__.MergeCartSuccessEvent
    });
  }
  registerCreateCart() {
    this.stateEventService.register({
      action: CREATE_CART,
      event: _spartacus_cart_base_root__WEBPACK_IMPORTED_MODULE_14__.CreateCartEvent
    });
    this.stateEventService.register({
      action: CREATE_CART_SUCCESS,
      event: _spartacus_cart_base_root__WEBPACK_IMPORTED_MODULE_14__.CreateCartSuccessEvent
    });
    this.stateEventService.register({
      action: CREATE_CART_FAIL,
      event: _spartacus_cart_base_root__WEBPACK_IMPORTED_MODULE_14__.CreateCartFailEvent
    });
  }
  /**
   * Registers delete cart events
   */
  registerDeleteCart() {
    this.stateEventService.register({
      action: DELETE_CART,
      event: _spartacus_cart_base_root__WEBPACK_IMPORTED_MODULE_14__.DeleteCartEvent,
      factory: action => (0,_spartacus_core__WEBPACK_IMPORTED_MODULE_0__.createFrom)(_spartacus_cart_base_root__WEBPACK_IMPORTED_MODULE_14__.DeleteCartEvent, {
        ...action.payload,
        cartCode: action.payload.cartId
      })
    });
    this.stateEventService.register({
      action: DELETE_CART_SUCCESS,
      event: _spartacus_cart_base_root__WEBPACK_IMPORTED_MODULE_14__.DeleteCartSuccessEvent,
      factory: action => (0,_spartacus_core__WEBPACK_IMPORTED_MODULE_0__.createFrom)(_spartacus_cart_base_root__WEBPACK_IMPORTED_MODULE_14__.DeleteCartSuccessEvent, {
        ...action.payload,
        cartCode: action.payload.cartId
      })
    });
    this.stateEventService.register({
      action: DELETE_CART_FAIL,
      event: _spartacus_cart_base_root__WEBPACK_IMPORTED_MODULE_14__.DeleteCartFailEvent,
      factory: action => (0,_spartacus_core__WEBPACK_IMPORTED_MODULE_0__.createFrom)(_spartacus_cart_base_root__WEBPACK_IMPORTED_MODULE_14__.DeleteCartFailEvent, {
        ...action.payload,
        cartCode: action.payload.cartId
      })
    });
  }
  registerAddCartVoucher() {
    this.stateEventService.register({
      action: CART_ADD_VOUCHER,
      event: _spartacus_cart_base_root__WEBPACK_IMPORTED_MODULE_14__.AddCartVoucherEvent
    });
    this.stateEventService.register({
      action: CART_ADD_VOUCHER_SUCCESS,
      event: _spartacus_cart_base_root__WEBPACK_IMPORTED_MODULE_14__.AddCartVoucherSuccessEvent
    });
    this.stateEventService.register({
      action: CART_ADD_VOUCHER_FAIL,
      event: _spartacus_cart_base_root__WEBPACK_IMPORTED_MODULE_14__.AddCartVoucherFailEvent
    });
  }
  registerRemoveCartVoucher() {
    this.stateEventService.register({
      action: CART_REMOVE_VOUCHER,
      event: _spartacus_cart_base_root__WEBPACK_IMPORTED_MODULE_14__.RemoveCartVoucherEvent
    });
    this.stateEventService.register({
      action: CART_REMOVE_VOUCHER_SUCCESS,
      event: _spartacus_cart_base_root__WEBPACK_IMPORTED_MODULE_14__.RemoveCartVoucherSuccessEvent
    });
    this.stateEventService.register({
      action: CART_REMOVE_VOUCHER_FAIL,
      event: _spartacus_cart_base_root__WEBPACK_IMPORTED_MODULE_14__.RemoveCartVoucherFailEvent
    });
  }
  /**
   * Registers a stream of target events mapped from the source actions that contain the cart id equal to the active cart id.
   *
   * @param mapping mapping declaration - from `action` string type to `event` class type
   *   (an with optional `factory` function - by default `action.payload` will be assigned to the properties of the event instance).
   */
  registerMapped(mapping) {
    const eventStream$ = this.getAction(mapping.action).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_11__.switchMap)(action => {
      // SwitchMap was used instead of withLatestFrom, because we only want to subscribe to cart stream when action is dispatched.
      // Using withLatestFrom would trigger subscription to cart observables on event subscription and that causes side effects,
      // such as loading cart when we don't yet need it.
      return (0,rxjs__WEBPACK_IMPORTED_MODULE_9__.of)(action).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_12__.withLatestFrom)(this.activeCartService.getActive(), this.activeCartService.getActiveCartId()));
    }), (0,rxjs_operators__WEBPACK_IMPORTED_MODULE_13__.filter)(([action, _activeCart, activeCartId]) => action.payload['cartId'] === activeCartId), (0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.map)(([action, activeCart]) => (0,_spartacus_core__WEBPACK_IMPORTED_MODULE_0__.createFrom)(mapping.event, {
      ...action.payload,
      cartCode: activeCart.code,
      entry: action.payload.entry ? action.payload.entry : activeCart.entries?.[Number(action.payload.entryNumber)]
    })));
    return this.event.register(mapping.event, eventStream$);
  }
  /**
   * Returns a stream of actions only of a given type(s)
   *
   * @param actionType type(s) of actions
   */
  getAction(actionType) {
    return this.actionsSubject.pipe((0,_ngrx_effects__WEBPACK_IMPORTED_MODULE_2__.ofType)(...[].concat(actionType)));
  }
}
CartEventBuilder.ɵfac = function CartEventBuilder_Factory(t) {
  return new (t || CartEventBuilder)(_angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵinject"](_ngrx_store__WEBPACK_IMPORTED_MODULE_8__.ActionsSubject), _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵinject"](_spartacus_core__WEBPACK_IMPORTED_MODULE_0__.EventService), _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵinject"](_spartacus_cart_base_root__WEBPACK_IMPORTED_MODULE_14__.ActiveCartFacade), _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵinject"](_spartacus_core__WEBPACK_IMPORTED_MODULE_0__.StateEventService));
};
CartEventBuilder.ɵprov = /* @__PURE__ */_angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵdefineInjectable"]({
  token: CartEventBuilder,
  factory: CartEventBuilder.ɵfac,
  providedIn: 'root'
});
(function () {
  (typeof ngDevMode === "undefined" || ngDevMode) && _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵsetClassMetadata"](CartEventBuilder, [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_1__.Injectable,
    args: [{
      providedIn: 'root'
    }]
  }], function () {
    return [{
      type: _ngrx_store__WEBPACK_IMPORTED_MODULE_8__.ActionsSubject
    }, {
      type: _spartacus_core__WEBPACK_IMPORTED_MODULE_0__.EventService
    }, {
      type: _spartacus_cart_base_root__WEBPACK_IMPORTED_MODULE_14__.ActiveCartFacade
    }, {
      type: _spartacus_core__WEBPACK_IMPORTED_MODULE_0__.StateEventService
    }];
  }, null);
})();

/*
 * SPDX-FileCopyrightText: 2023 SAP Spartacus team <spartacus-team@sap.com>
 *
 * SPDX-License-Identifier: Apache-2.0
 */
class CartEventModule {
  constructor(_CartEventBuilder) {
    // Intentional empty constructor
  }
}
CartEventModule.ɵfac = function CartEventModule_Factory(t) {
  return new (t || CartEventModule)(_angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵinject"](CartEventBuilder));
};
CartEventModule.ɵmod = /* @__PURE__ */_angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵdefineNgModule"]({
  type: CartEventModule
});
CartEventModule.ɵinj = /* @__PURE__ */_angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵdefineInjector"]({});
(function () {
  (typeof ngDevMode === "undefined" || ngDevMode) && _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵsetClassMetadata"](CartEventModule, [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_1__.NgModule,
    args: [{}]
  }], function () {
    return [{
      type: CartEventBuilder
    }];
  }, null);
})();

/*
 * SPDX-FileCopyrightText: 2023 SAP Spartacus team <spartacus-team@sap.com>
 *
 * SPDX-License-Identifier: Apache-2.0
 */
class CartPageEventBuilder {
  constructor(eventService) {
    this.eventService = eventService;
    this.register();
  }
  register() {
    this.eventService.register(_spartacus_cart_base_root__WEBPACK_IMPORTED_MODULE_14__.CartPageEvent, this.buildCartPageEvent());
  }
  buildCartPageEvent() {
    return this.eventService.get(_spartacus_storefront__WEBPACK_IMPORTED_MODULE_18__.NavigationEvent).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_13__.filter)(navigationEvent => navigationEvent.semanticRoute === 'cart'), (0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.map)(navigationEvent => (0,_spartacus_core__WEBPACK_IMPORTED_MODULE_0__.createFrom)(_spartacus_cart_base_root__WEBPACK_IMPORTED_MODULE_14__.CartPageEvent, {
      navigation: navigationEvent
    })));
  }
}
CartPageEventBuilder.ɵfac = function CartPageEventBuilder_Factory(t) {
  return new (t || CartPageEventBuilder)(_angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵinject"](_spartacus_core__WEBPACK_IMPORTED_MODULE_0__.EventService));
};
CartPageEventBuilder.ɵprov = /* @__PURE__ */_angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵdefineInjectable"]({
  token: CartPageEventBuilder,
  factory: CartPageEventBuilder.ɵfac,
  providedIn: 'root'
});
(function () {
  (typeof ngDevMode === "undefined" || ngDevMode) && _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵsetClassMetadata"](CartPageEventBuilder, [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_1__.Injectable,
    args: [{
      providedIn: 'root'
    }]
  }], function () {
    return [{
      type: _spartacus_core__WEBPACK_IMPORTED_MODULE_0__.EventService
    }];
  }, null);
})();

/*
 * SPDX-FileCopyrightText: 2023 SAP Spartacus team <spartacus-team@sap.com>
 *
 * SPDX-License-Identifier: Apache-2.0
 */
class CartPageEventModule {
  constructor(_cartPageEventBuilder) {
    // Intentional empty constructor
  }
}
CartPageEventModule.ɵfac = function CartPageEventModule_Factory(t) {
  return new (t || CartPageEventModule)(_angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵinject"](CartPageEventBuilder));
};
CartPageEventModule.ɵmod = /* @__PURE__ */_angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵdefineNgModule"]({
  type: CartPageEventModule
});
CartPageEventModule.ɵinj = /* @__PURE__ */_angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵdefineInjector"]({});
(function () {
  (typeof ngDevMode === "undefined" || ngDevMode) && _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵsetClassMetadata"](CartPageEventModule, [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_1__.NgModule,
    args: [{}]
  }], function () {
    return [{
      type: CartPageEventBuilder
    }];
  }, null);
})();

/*
 * SPDX-FileCopyrightText: 2023 SAP Spartacus team <spartacus-team@sap.com>
 *
 * SPDX-License-Identifier: Apache-2.0
 */
class ActiveCartService {
  constructor(multiCartFacade, userIdService, winRef) {
    this.multiCartFacade = multiCartFacade;
    this.userIdService = userIdService;
    this.winRef = winRef;
    this.subscription = new rxjs__WEBPACK_IMPORTED_MODULE_15__.Subscription();
    // This stream is used for referencing carts in API calls.
    this.activeCartId$ = this.userIdService.getUserId().pipe(
    // We want to wait the initialization of cartId until the userId is initialized
    // We have take(1) to not trigger this stream, when userId changes.
    (0,rxjs_operators__WEBPACK_IMPORTED_MODULE_19__.take)(1), (0,rxjs_operators__WEBPACK_IMPORTED_MODULE_11__.switchMap)(() => this.multiCartFacade.getCartIdByType(_spartacus_cart_base_root__WEBPACK_IMPORTED_MODULE_14__.CartType.ACTIVE)),
    // We also wait until we initialize cart from localStorage
    (0,rxjs_operators__WEBPACK_IMPORTED_MODULE_13__.filter)(cartId => cartId !== undefined),
    // fallback to current when we don't have particular cart id
    (0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.map)(cartId => cartId === '' ? _spartacus_core__WEBPACK_IMPORTED_MODULE_0__.OCC_CART_ID_CURRENT : cartId));
    // Stream with active cart entity
    this.cartEntity$ = this.activeCartId$.pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_11__.switchMap)(cartId => this.multiCartFacade.getCartEntity(cartId)));
    // Flag to prevent cart loading when logged in with code flow
    // Instead of loading cart will run loadOrMerge method
    this.shouldLoadCartOnCodeFlow = true;
    // When the function `requireLoadedCart` is first called, the init cart loading for login user may not be done
    this.checkInitLoad = undefined;
    this.initActiveCart();
    this.detectUserChange();
  }
  initActiveCart() {
    // Stream for getting the cart value
    const cartValue$ = this.cartEntity$.pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.map)(cartEntity => {
      return {
        cart: cartEntity.value,
        isStable: !cartEntity.loading && cartEntity.processesCount === 0,
        loaded: Boolean((cartEntity.error || cartEntity.success) && !cartEntity.loading)
      };
    }),
    // we want to emit empty carts even if those are not stable
    // on merge cart action we want to switch to empty cart so no one would use old cartId which can be already obsolete
    // so on merge action the resulting stream looks like this: old_cart -> {} -> new_cart
    (0,rxjs_operators__WEBPACK_IMPORTED_MODULE_13__.filter)(({
      isStable,
      cart
    }) => isStable || isEmpty(cart)));
    // Responsible for loading cart when it does not exist (eg. app initialization when we have only cartId)
    const loading = cartValue$.pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_12__.withLatestFrom)(this.activeCartId$, this.userIdService.getUserId()), (0,rxjs_operators__WEBPACK_IMPORTED_MODULE_17__.tap)(([{
      cart,
      loaded,
      isStable
    }, cartId, userId]) => {
      if (isStable && isEmpty(cart) && !loaded && !isTempCartId(cartId) && this.shouldLoadCartOnCodeFlow) {
        this.load(cartId, userId);
      }
    }));
    this.activeCart$ = (0,rxjs__WEBPACK_IMPORTED_MODULE_20__.using)(() => loading.subscribe(), () => cartValue$).pipe(
    // Normalization for empty cart value returned as empty object.
    (0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.map)(({
      cart
    }) => cart ? cart : {}), (0,rxjs_operators__WEBPACK_IMPORTED_MODULE_21__.distinctUntilChanged)(), (0,rxjs_operators__WEBPACK_IMPORTED_MODULE_22__.shareReplay)({
      bufferSize: 1,
      refCount: true
    }));
  }
  detectUserChange() {
    // Any changes of userId is interesting for us, because we have to merge/load/switch cart in those cases.
    this.subscription.add(this.userIdService.getUserId().pipe(
    // We never trigger cart merge/load on app initialization here and that's why we wait with pairwise for a change of userId.
    (0,rxjs_operators__WEBPACK_IMPORTED_MODULE_23__.pairwise)(),
    // We need cartId once we have the previous and current userId. We don't want to subscribe to cartId stream before.
    (0,rxjs_operators__WEBPACK_IMPORTED_MODULE_12__.withLatestFrom)(this.activeCartId$)).subscribe(([[previousUserId, userId], cartId]) => {
      // Only change of user and not logout (current userId !== anonymous) should trigger loading mechanism
      if (isJustLoggedIn(userId, previousUserId)) {
        this.loadOrMerge(cartId, userId, previousUserId);
      }
    }));
    // Detect user logged in with code flow.
    if (this.isLoggedInWithCodeFlow()) {
      // Prevent loading cart while merging.
      this.shouldLoadCartOnCodeFlow = false;
      this.subscription.add(this.userIdService.getUserId().pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_12__.withLatestFrom)(this.activeCartId$)).subscribe(([userId, cartId]) => {
        this.loadOrMerge(cartId, userId, _spartacus_core__WEBPACK_IMPORTED_MODULE_0__.OCC_USER_ID_ANONYMOUS);
        this.winRef?.localStorage?.removeItem(_spartacus_core__WEBPACK_IMPORTED_MODULE_0__.OAUTH_REDIRECT_FLOW_KEY);
      }));
    }
  }
  /**
   * Returns active cart
   */
  getActive() {
    return this.activeCart$;
  }
  /**
   * Waits for the cart to be stable before returning the active cart.
   */
  takeActive() {
    return this.isStable().pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_13__.filter)(isStable => isStable), (0,rxjs_operators__WEBPACK_IMPORTED_MODULE_11__.switchMap)(() => this.getActive()), (0,rxjs_operators__WEBPACK_IMPORTED_MODULE_13__.filter)(cart => !!cart), (0,rxjs_operators__WEBPACK_IMPORTED_MODULE_19__.take)(1));
  }
  /**
   * Returns active cart id
   */
  getActiveCartId() {
    return this.activeCart$.pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_12__.withLatestFrom)(this.userIdService.getUserId()), (0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.map)(([cart, userId]) => getCartIdByUserId(cart, userId)), (0,rxjs_operators__WEBPACK_IMPORTED_MODULE_21__.distinctUntilChanged)());
  }
  /**
   * Waits for the cart to be stable before returning the active cart's ID.
   */
  takeActiveCartId() {
    return this.isStable().pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_13__.filter)(isStable => isStable), (0,rxjs_operators__WEBPACK_IMPORTED_MODULE_11__.switchMap)(() => this.getActiveCartId()), (0,rxjs_operators__WEBPACK_IMPORTED_MODULE_13__.filter)(cartId => !!cartId), (0,rxjs_operators__WEBPACK_IMPORTED_MODULE_19__.take)(1));
  }
  /**
   * Returns cart entries
   */
  getEntries() {
    return this.activeCartId$.pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_11__.switchMap)(cartId => this.multiCartFacade.getEntries(cartId)), (0,rxjs_operators__WEBPACK_IMPORTED_MODULE_21__.distinctUntilChanged)());
  }
  /**
   * Returns last cart entry for provided product code.
   * Needed to cover processes where multiple entries can share the same product code
   * (e.g. promotions or configurable products)
   *
   * @param productCode
   */
  getLastEntry(productCode) {
    return this.activeCartId$.pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_11__.switchMap)(cartId => this.multiCartFacade.getLastEntry(cartId, productCode)), (0,rxjs_operators__WEBPACK_IMPORTED_MODULE_21__.distinctUntilChanged)());
  }
  /**
   * Returns cart loading state
   */
  getLoading() {
    return this.cartEntity$.pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.map)(cartEntity => Boolean(cartEntity.loading)), (0,rxjs_operators__WEBPACK_IMPORTED_MODULE_21__.distinctUntilChanged)());
  }
  /**
   * Returns true when cart is stable (not loading and not pending processes on cart)
   */
  isStable() {
    return this.activeCartId$.pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_11__.switchMap)(cartId => this.multiCartFacade.isStable(cartId)));
  }
  /**
   * Loads cart in every case except anonymous user and current cart combination
   */
  load(cartId, userId) {
    if (!(userId === _spartacus_core__WEBPACK_IMPORTED_MODULE_0__.OCC_USER_ID_ANONYMOUS && cartId === _spartacus_core__WEBPACK_IMPORTED_MODULE_0__.OCC_CART_ID_CURRENT)) {
      this.multiCartFacade.loadCart({
        userId,
        cartId,
        extraData: {
          active: true
        }
      });
    }
  }
  /**
   * Loads cart upon login, whenever there's an existing cart, merge it into the current user cart
   * cartId will be defined (not '', null, undefined)
   */
  loadOrMerge(cartId, userId, previousUserId) {
    if (cartId === _spartacus_core__WEBPACK_IMPORTED_MODULE_0__.OCC_CART_ID_CURRENT ||
    // It covers the case when you are logged in and then asm user login, you don't want to merge, but only load emulated user cart
    // Similarly when you are logged in as asm user and you logout and want to resume previous user session
    previousUserId !== _spartacus_core__WEBPACK_IMPORTED_MODULE_0__.OCC_USER_ID_ANONYMOUS) {
      this.multiCartFacade.loadCart({
        userId,
        cartId,
        extraData: {
          active: true
        }
      });
    } else if (Boolean((0,_spartacus_core__WEBPACK_IMPORTED_MODULE_0__.getLastValueSync)(this.isGuestCart()))) {
      this.guestCartMerge(cartId);
    } else {
      // We have particular cart locally, but we logged in, so we need to combine this with current cart or make it ours.
      this.multiCartFacade.mergeToCurrentCart({
        userId,
        cartId,
        extraData: {
          active: true
        }
      });
    }
  }
  // TODO: Remove once backend is updated
  /**
   * Temporary method to merge guest cart with user cart because of backend limitation
   * This is for an edge case
   */
  guestCartMerge(cartId) {
    this.getEntries().pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_19__.take)(1)).subscribe(entries => {
      this.multiCartFacade.deleteCart(cartId, _spartacus_core__WEBPACK_IMPORTED_MODULE_0__.OCC_USER_ID_ANONYMOUS);
      this.addEntriesGuestMerge(entries);
    });
  }
  /**
   * Adds entries from guest cart to user cart
   */
  addEntriesGuestMerge(cartEntries) {
    const entriesToAdd = cartEntries.map(entry => ({
      productCode: entry.product?.code ?? '',
      quantity: entry.quantity ?? 0
    }));
    this.requireLoadedCart(true).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_12__.withLatestFrom)(this.userIdService.getUserId())).subscribe(([cart, userId]) => {
      this.multiCartFacade.addEntries(userId, getCartIdByUserId(cart, userId), entriesToAdd);
    });
  }
  isCartCreating(cartState, cartId) {
    // cart creating is always represented with loading flags
    // when all loading flags are false it means that we restored wrong cart id
    // could happen on context change or reload right in the middle on cart create call
    return isTempCartId(cartId) && (cartState.loading || cartState.success || cartState.error);
  }
  /**
   * Check if user is just logged in with code flow
   */
  isLoggedInWithCodeFlow() {
    return !!this.winRef?.localStorage?.getItem(_spartacus_core__WEBPACK_IMPORTED_MODULE_0__.OAUTH_REDIRECT_FLOW_KEY);
  }
  requireLoadedCart(forGuestMerge = false) {
    this.checkInitLoad = this.checkInitLoad === undefined;
    // For guest cart merge we want to filter guest cart in the whole stream
    // We have to wait with load/create/addEntry after guest cart will be deleted.
    const cartSelector$ = (forGuestMerge ? this.cartEntity$.pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_13__.filter)(() => !Boolean((0,_spartacus_core__WEBPACK_IMPORTED_MODULE_0__.getLastValueSync)(this.isGuestCart())))) : this.cartEntity$).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_13__.filter)(cartState => !cartState.loading || !!this.checkInitLoad));
    return this.activeCartId$.pipe(
    // Avoid load/create call when there are new cart creating at the moment
    (0,rxjs_operators__WEBPACK_IMPORTED_MODULE_12__.withLatestFrom)(cartSelector$), (0,rxjs_operators__WEBPACK_IMPORTED_MODULE_13__.filter)(([cartId, cartState]) => !this.isCartCreating(cartState, cartId)), (0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.map)(([, cartState]) => cartState), (0,rxjs_operators__WEBPACK_IMPORTED_MODULE_19__.take)(1)).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_12__.withLatestFrom)(this.userIdService.getUserId()), (0,rxjs_operators__WEBPACK_IMPORTED_MODULE_17__.tap)(([cartState, userId]) => {
      // Try to load the cart, because it might have been created on another device between our login and add entry call
      if (isEmpty(cartState.value) && userId !== _spartacus_core__WEBPACK_IMPORTED_MODULE_0__.OCC_USER_ID_ANONYMOUS && !cartState.loading) {
        this.load(_spartacus_core__WEBPACK_IMPORTED_MODULE_0__.OCC_CART_ID_CURRENT, userId);
      }
      this.checkInitLoad = false;
    }), (0,rxjs_operators__WEBPACK_IMPORTED_MODULE_11__.switchMap)(() => cartSelector$),
    // create cart can happen to anonymous user if it is empty or to any other user if it is loaded and empty
    (0,rxjs_operators__WEBPACK_IMPORTED_MODULE_12__.withLatestFrom)(this.userIdService.getUserId()), (0,rxjs_operators__WEBPACK_IMPORTED_MODULE_13__.filter)(([cartState, userId]) => Boolean(userId === _spartacus_core__WEBPACK_IMPORTED_MODULE_0__.OCC_USER_ID_ANONYMOUS || cartState.success || cartState.error)), (0,rxjs_operators__WEBPACK_IMPORTED_MODULE_19__.take)(1)).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_17__.tap)(([cartState, userId]) => {
      if (isEmpty(cartState.value)) {
        this.multiCartFacade.createCart({
          userId,
          extraData: {
            active: true
          }
        });
      }
    }), (0,rxjs_operators__WEBPACK_IMPORTED_MODULE_11__.switchMap)(() => cartSelector$), (0,rxjs_operators__WEBPACK_IMPORTED_MODULE_13__.filter)(cartState => Boolean(cartState.success || cartState.error)),
    // wait for active cart id to point to code/guid to avoid some work on temp cart entity
    (0,rxjs_operators__WEBPACK_IMPORTED_MODULE_12__.withLatestFrom)(this.activeCartId$), (0,rxjs_operators__WEBPACK_IMPORTED_MODULE_13__.filter)(([cartState, cartId]) => !this.isCartCreating(cartState, cartId)), (0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.map)(([cartState]) => cartState.value), (0,rxjs_operators__WEBPACK_IMPORTED_MODULE_13__.filter)(cart => !isEmpty(cart)), (0,rxjs_operators__WEBPACK_IMPORTED_MODULE_19__.take)(1));
  }
  /**
   * Add entry to active cart
   *
   * @param productCode
   * @param quantity
   * @param pickupStore
   */
  addEntry(productCode, quantity, pickupStore) {
    this.requireLoadedCart().pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_12__.withLatestFrom)(this.userIdService.getUserId())).subscribe(([cart, userId]) => {
      this.multiCartFacade.addEntry(userId, getCartIdByUserId(cart, userId), productCode, quantity, pickupStore);
    });
  }
  /**
   * Remove entry
   *
   * @param entry
   */
  removeEntry(entry) {
    this.activeCartId$.pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_12__.withLatestFrom)(this.userIdService.getUserId()), (0,rxjs_operators__WEBPACK_IMPORTED_MODULE_19__.take)(1)).subscribe(([cartId, userId]) => {
      this.multiCartFacade.removeEntry(userId, cartId, entry.entryNumber);
    });
  }
  /**
   * Update entry
   *
   * @param entryNumber
   * @param quantity
   * @param pickupStore
   * @param pickupToDelivery
   */
  updateEntry(entryNumber, quantity, pickupStore, pickupToDelivery = false) {
    this.activeCartId$.pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_12__.withLatestFrom)(this.userIdService.getUserId()), (0,rxjs_operators__WEBPACK_IMPORTED_MODULE_19__.take)(1)).subscribe(([cartId, userId]) => {
      this.multiCartFacade.updateEntry(userId, cartId, entryNumber, quantity, pickupStore, pickupToDelivery);
    });
  }
  /**
   * Returns cart entry
   *
   * @param productCode
   */
  getEntry(productCode) {
    return this.activeCartId$.pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_11__.switchMap)(cartId => this.multiCartFacade.getEntry(cartId, productCode)), (0,rxjs_operators__WEBPACK_IMPORTED_MODULE_21__.distinctUntilChanged)());
  }
  /**
   * Assign email to cart
   *
   * @param email
   */
  addEmail(email) {
    this.activeCartId$.pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_12__.withLatestFrom)(this.userIdService.getUserId()), (0,rxjs_operators__WEBPACK_IMPORTED_MODULE_19__.take)(1)).subscribe(([cartId, userId]) => {
      this.multiCartFacade.assignEmail(cartId, userId, email);
    });
  }
  /**
   * Get assigned user to cart
   */
  getAssignedUser() {
    return this.activeCart$.pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.map)(cart => cart.user));
  }
  // TODO: Make cart required param in 4.0
  /**
   * Returns observable of true for guest cart
   */
  isGuestCart(cart) {
    return cart ? (0,rxjs__WEBPACK_IMPORTED_MODULE_9__.of)(this.isCartUserGuest(cart)) : this.activeCart$.pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.map)(activeCart => this.isCartUserGuest(activeCart)), (0,rxjs_operators__WEBPACK_IMPORTED_MODULE_21__.distinctUntilChanged)());
  }
  isCartUserGuest(cart) {
    const cartUser = cart.user;
    return Boolean(cartUser && (cartUser.name === _spartacus_core__WEBPACK_IMPORTED_MODULE_0__.OCC_USER_ID_GUEST || isEmail(cartUser.uid?.split('|').slice(1).join('|'))));
  }
  /**
   * Add multiple entries to a cart
   *
   * @param cartEntries : list of entries to add (OrderEntry[])
   */
  addEntries(cartEntries) {
    const entriesToAdd = cartEntries.map(entry => ({
      productCode: entry.product?.code ?? '',
      quantity: entry.quantity ?? 0
    }));
    this.requireLoadedCart().pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_12__.withLatestFrom)(this.userIdService.getUserId())).subscribe(([cart, userId]) => {
      if (cart) {
        this.multiCartFacade.addEntries(userId, getCartIdByUserId(cart, userId), entriesToAdd);
      }
    });
  }
  /**
   * Reloads active cart
   */
  reloadActiveCart() {
    (0,rxjs__WEBPACK_IMPORTED_MODULE_24__.combineLatest)([this.getActiveCartId(), this.userIdService.takeUserId()]).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_19__.take)(1), (0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.map)(([cartId, userId]) => {
      this.multiCartFacade.loadCart({
        cartId,
        userId,
        extraData: {
          active: true
        }
      });
    })).subscribe();
  }
  hasPickupItems() {
    return this.getActive().pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.map)(cart => cart.pickupItemsQuantity ? cart.pickupItemsQuantity > 0 : false));
  }
  hasDeliveryItems() {
    return this.getActive().pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.map)(cart => cart.deliveryItemsQuantity ? cart.deliveryItemsQuantity > 0 : false));
  }
  getPickupEntries() {
    return this.getEntries().pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.map)(entries => entries.filter(entry => entry.deliveryPointOfService !== undefined)));
  }
  getDeliveryEntries() {
    return this.getEntries().pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.map)(entries => entries.filter(entry => entry.deliveryPointOfService === undefined)));
  }
  ngOnDestroy() {
    this.subscription.unsubscribe();
  }
}
ActiveCartService.ɵfac = function ActiveCartService_Factory(t) {
  return new (t || ActiveCartService)(_angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵinject"](_spartacus_cart_base_root__WEBPACK_IMPORTED_MODULE_14__.MultiCartFacade), _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵinject"](_spartacus_core__WEBPACK_IMPORTED_MODULE_0__.UserIdService), _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵinject"](_spartacus_core__WEBPACK_IMPORTED_MODULE_0__.WindowRef, 8));
};
ActiveCartService.ɵprov = /* @__PURE__ */_angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵdefineInjectable"]({
  token: ActiveCartService,
  factory: ActiveCartService.ɵfac
});
(function () {
  (typeof ngDevMode === "undefined" || ngDevMode) && _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵsetClassMetadata"](ActiveCartService, [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_1__.Injectable
  }], function () {
    return [{
      type: _spartacus_cart_base_root__WEBPACK_IMPORTED_MODULE_14__.MultiCartFacade
    }, {
      type: _spartacus_core__WEBPACK_IMPORTED_MODULE_0__.UserIdService
    }, {
      type: _spartacus_core__WEBPACK_IMPORTED_MODULE_0__.WindowRef,
      decorators: [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_1__.Optional
      }]
    }];
  }, null);
})();

/*
 * SPDX-FileCopyrightText: 2023 SAP Spartacus team <spartacus-team@sap.com>
 *
 * SPDX-License-Identifier: Apache-2.0
 */
class CartValidationStateService {
  constructor(routingService) {
    this.routingService = routingService;
    this.NAVIGATION_SKIPS = 2;
    this.navigationIdCount = 0;
    this.subscription = new rxjs__WEBPACK_IMPORTED_MODULE_15__.Subscription();
    this.cartValidationResult$ = new rxjs__WEBPACK_IMPORTED_MODULE_25__.ReplaySubject(1);
    this.checkForValidationResultClear$ = this.routingService.getRouterState().pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_12__.withLatestFrom)(this.cartValidationResult$), (0,rxjs_operators__WEBPACK_IMPORTED_MODULE_17__.tap)(([routerState, cartModifications]) => {
      if (this.navigationIdCount + this.NAVIGATION_SKIPS <= routerState.navigationId && cartModifications.length) {
        this.cartValidationResult$.next([]);
        this.navigationIdCount = routerState.navigationId;
      }
    }));
    this.setInitialState();
  }
  ngOnDestroy() {
    this.subscription.unsubscribe();
  }
  setInitialState() {
    this.setNavigationIdStep();
    this.subscription.add(this.checkForValidationResultClear$.subscribe());
  }
  updateValidationResultAndRoutingId(cartModification) {
    this.cartValidationResult$.next(cartModification);
    this.setNavigationIdStep();
  }
  setNavigationIdStep() {
    this.routingService.getRouterState().pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_19__.take)(1)).subscribe(routerState => this.navigationIdCount = routerState.navigationId);
  }
}
CartValidationStateService.ɵfac = function CartValidationStateService_Factory(t) {
  return new (t || CartValidationStateService)(_angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵinject"](_spartacus_core__WEBPACK_IMPORTED_MODULE_0__.RoutingService));
};
CartValidationStateService.ɵprov = /* @__PURE__ */_angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵdefineInjectable"]({
  token: CartValidationStateService,
  factory: CartValidationStateService.ɵfac,
  providedIn: 'root'
});
(function () {
  (typeof ngDevMode === "undefined" || ngDevMode) && _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵsetClassMetadata"](CartValidationStateService, [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_1__.Injectable,
    args: [{
      providedIn: 'root'
    }]
  }], function () {
    return [{
      type: _spartacus_core__WEBPACK_IMPORTED_MODULE_0__.RoutingService
    }];
  }, null);
})();

/*
 * SPDX-FileCopyrightText: 2023 SAP Spartacus team <spartacus-team@sap.com>
 *
 * SPDX-License-Identifier: Apache-2.0
 */
class CartValidationService {
  constructor(cartValidationConnector, command, userIdService, activeCartFacade, cartValidationStateService) {
    this.cartValidationConnector = cartValidationConnector;
    this.command = command;
    this.userIdService = userIdService;
    this.activeCartFacade = activeCartFacade;
    this.cartValidationStateService = cartValidationStateService;
    this.validateCartCommand = this.command.create(() => (0,rxjs__WEBPACK_IMPORTED_MODULE_24__.combineLatest)([this.activeCartFacade.getActiveCartId(), this.userIdService.takeUserId(), this.activeCartFacade.isStable()]).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_13__.filter)(([_, __, loaded]) => loaded), (0,rxjs_operators__WEBPACK_IMPORTED_MODULE_19__.take)(1), (0,rxjs_operators__WEBPACK_IMPORTED_MODULE_11__.switchMap)(([cartId, userId]) => this.cartValidationConnector.validate(cartId, userId))), {
      strategy: _spartacus_core__WEBPACK_IMPORTED_MODULE_0__.CommandStrategy.CancelPrevious
    });
  }
  /**
   * Validates cart and returns cart modification list.
   */
  validateCart() {
    return this.validateCartCommand.execute();
  }
  /**
   * Returns cart modification results
   */
  getValidationResults() {
    return this.cartValidationStateService.cartValidationResult$;
  }
}
CartValidationService.ɵfac = function CartValidationService_Factory(t) {
  return new (t || CartValidationService)(_angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵinject"](CartValidationConnector), _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵinject"](_spartacus_core__WEBPACK_IMPORTED_MODULE_0__.CommandService), _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵinject"](_spartacus_core__WEBPACK_IMPORTED_MODULE_0__.UserIdService), _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵinject"](_spartacus_cart_base_root__WEBPACK_IMPORTED_MODULE_14__.ActiveCartFacade), _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵinject"](CartValidationStateService));
};
CartValidationService.ɵprov = /* @__PURE__ */_angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵdefineInjectable"]({
  token: CartValidationService,
  factory: CartValidationService.ɵfac
});
(function () {
  (typeof ngDevMode === "undefined" || ngDevMode) && _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵsetClassMetadata"](CartValidationService, [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_1__.Injectable
  }], function () {
    return [{
      type: CartValidationConnector
    }, {
      type: _spartacus_core__WEBPACK_IMPORTED_MODULE_0__.CommandService
    }, {
      type: _spartacus_core__WEBPACK_IMPORTED_MODULE_0__.UserIdService
    }, {
      type: _spartacus_cart_base_root__WEBPACK_IMPORTED_MODULE_14__.ActiveCartFacade
    }, {
      type: CartValidationStateService
    }];
  }, null);
})();

/*
 * SPDX-FileCopyrightText: 2023 SAP Spartacus team <spartacus-team@sap.com>
 *
 * SPDX-License-Identifier: Apache-2.0
 */
class CartVoucherService {
  constructor(store, activeCartFacade, userIdService) {
    this.store = store;
    this.activeCartFacade = activeCartFacade;
    this.userIdService = userIdService;
  }
  addVoucher(voucherId, cartId) {
    this.combineUserAndCartId(cartId).subscribe(([occUserId, cartIdentifier]) => this.store.dispatch(new CartAddVoucher({
      userId: occUserId,
      cartId: cartIdentifier,
      voucherId: voucherId
    })));
  }
  removeVoucher(voucherId, cartId) {
    this.combineUserAndCartId(cartId).subscribe(([occUserId, cartIdentifier]) => this.store.dispatch(new CartRemoveVoucher({
      userId: occUserId,
      cartId: cartIdentifier,
      voucherId: voucherId
    })));
  }
  /**
   * Get add voucher process error flag
   */
  getAddVoucherResultError() {
    return this.store.pipe((0,_ngrx_store__WEBPACK_IMPORTED_MODULE_8__.select)(_spartacus_core__WEBPACK_IMPORTED_MODULE_0__.ProcessSelectors.getProcessErrorFactory(ADD_VOUCHER_PROCESS_ID)));
  }
  /**
   * Get add voucher process success flag
   */
  getAddVoucherResultSuccess() {
    return this.store.pipe((0,_ngrx_store__WEBPACK_IMPORTED_MODULE_8__.select)(_spartacus_core__WEBPACK_IMPORTED_MODULE_0__.ProcessSelectors.getProcessSuccessFactory(ADD_VOUCHER_PROCESS_ID)));
  }
  /**
   * Get add voucher process loading flag
   */
  getAddVoucherResultLoading() {
    return this.store.pipe((0,_ngrx_store__WEBPACK_IMPORTED_MODULE_8__.select)(_spartacus_core__WEBPACK_IMPORTED_MODULE_0__.ProcessSelectors.getProcessLoadingFactory(ADD_VOUCHER_PROCESS_ID)));
  }
  /**
   * Reset add voucher process
   */
  resetAddVoucherProcessingState() {
    this.store.dispatch(new CartResetAddVoucher());
  }
  combineUserAndCartId(cartId) {
    if (cartId) {
      return this.userIdService.getUserId().pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_19__.take)(1), (0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.map)(userId => [userId, cartId]));
    } else {
      return (0,rxjs__WEBPACK_IMPORTED_MODULE_24__.combineLatest)([this.userIdService.getUserId(), this.activeCartFacade.getActiveCartId()]).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_19__.take)(1));
    }
  }
}
CartVoucherService.ɵfac = function CartVoucherService_Factory(t) {
  return new (t || CartVoucherService)(_angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵinject"](_ngrx_store__WEBPACK_IMPORTED_MODULE_8__.Store), _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵinject"](_spartacus_cart_base_root__WEBPACK_IMPORTED_MODULE_14__.ActiveCartFacade), _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵinject"](_spartacus_core__WEBPACK_IMPORTED_MODULE_0__.UserIdService));
};
CartVoucherService.ɵprov = /* @__PURE__ */_angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵdefineInjectable"]({
  token: CartVoucherService,
  factory: CartVoucherService.ɵfac
});
(function () {
  (typeof ngDevMode === "undefined" || ngDevMode) && _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵsetClassMetadata"](CartVoucherService, [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_1__.Injectable
  }], function () {
    return [{
      type: _ngrx_store__WEBPACK_IMPORTED_MODULE_8__.Store
    }, {
      type: _spartacus_cart_base_root__WEBPACK_IMPORTED_MODULE_14__.ActiveCartFacade
    }, {
      type: _spartacus_core__WEBPACK_IMPORTED_MODULE_0__.UserIdService
    }];
  }, null);
})();

/*
 * SPDX-FileCopyrightText: 2023 SAP Spartacus team <spartacus-team@sap.com>
 *
 * SPDX-License-Identifier: Apache-2.0
 */
class MultiCartService {
  constructor(store, userIdService) {
    this.store = store;
    this.userIdService = userIdService;
  }
  /**
   * Returns cart from store as an observable
   *
   * @param cartId
   */
  getCart(cartId) {
    return this.store.pipe((0,_ngrx_store__WEBPACK_IMPORTED_MODULE_8__.select)(getCartSelectorFactory(cartId)));
  }
  /**
   * Returns a list of carts from store as an observable
   *
   */
  getCarts() {
    return this.store.pipe((0,_ngrx_store__WEBPACK_IMPORTED_MODULE_8__.select)(getCartsSelectorFactory));
  }
  /**
   * Returns cart entity from store (cart with loading, error, success flags) as an observable
   *
   * @param cartId
   */
  getCartEntity(cartId) {
    return this.store.pipe((0,_ngrx_store__WEBPACK_IMPORTED_MODULE_8__.select)(getCartEntitySelectorFactory(cartId)));
  }
  /**
   * Returns true when there are no operations on that in progress and it is not currently loading
   *
   * @param cartId
   */
  isStable(cartId) {
    return this.store.pipe((0,_ngrx_store__WEBPACK_IMPORTED_MODULE_8__.select)(getCartIsStableSelectorFactory(cartId)),
    // We dispatch a lot of actions just after finishing some process or loading, so we want this flag not to flicker.
    // This flickering should only be avoided when switching from false to true
    // Start of loading should be showed instantly (no debounce)
    // Extra actions are only dispatched after some loading
    (0,rxjs_operators__WEBPACK_IMPORTED_MODULE_26__.debounce)(isStable => isStable ? (0,rxjs__WEBPACK_IMPORTED_MODULE_27__.timer)(0) : rxjs__WEBPACK_IMPORTED_MODULE_28__.EMPTY), (0,rxjs_operators__WEBPACK_IMPORTED_MODULE_21__.distinctUntilChanged)());
  }
  /**
   * Simple random temp cart id generator
   */
  generateTempCartId() {
    const pseudoUuid = Math.random().toString(36).substring(2, 11);
    return `temp-${pseudoUuid}`;
  }
  /**
   * Create or merge cart
   *
   * @param params Object with userId, oldCartId, toMergeCartGuid and extraData
   */
  createCart({
    userId,
    oldCartId,
    toMergeCartGuid,
    extraData
  }) {
    // to support creating multiple carts at the same time we need to use different entity for every process
    // simple random uuid generator is used here for entity names
    const tempCartId = this.generateTempCartId();
    this.store.dispatch(new CreateCart({
      extraData,
      userId,
      oldCartId,
      toMergeCartGuid,
      tempCartId
    }));
    return this.getCartIdByType(extraData?.active ? _spartacus_cart_base_root__WEBPACK_IMPORTED_MODULE_14__.CartType.ACTIVE : _spartacus_cart_base_root__WEBPACK_IMPORTED_MODULE_14__.CartType.NEW_CREATED).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_11__.switchMap)(cartId => this.getCart(cartId)), (0,rxjs_operators__WEBPACK_IMPORTED_MODULE_13__.filter)(_spartacus_core__WEBPACK_IMPORTED_MODULE_0__.isNotUndefined));
  }
  /**
   * Merge provided cart to current user cart
   *
   * @param params Object with userId, cartId and extraData
   */
  mergeToCurrentCart({
    userId,
    cartId,
    extraData
  }) {
    const tempCartId = this.generateTempCartId();
    this.store.dispatch(new MergeCart({
      userId,
      cartId,
      extraData,
      tempCartId
    }));
  }
  /**
   * Load cart
   *
   * @param params Object with userId, cartId and extraData
   */
  loadCart({
    cartId,
    userId,
    extraData
  }) {
    this.store.dispatch(new LoadCart({
      userId,
      cartId,
      extraData
    }));
  }
  /**
   * Get cart entries as an observable
   * @param cartId
   */
  getEntries(cartId) {
    return this.store.pipe((0,_ngrx_store__WEBPACK_IMPORTED_MODULE_8__.select)(getCartEntriesSelectorFactory(cartId)));
  }
  /**
   * Get last entry for specific product code from cart.
   * Needed to cover processes where multiple entries can share the same product code
   * (e.g. promotions or configurable products)
   *
   * @param cartId
   * @param productCode
   */
  getLastEntry(cartId, productCode) {
    return this.store.pipe((0,_ngrx_store__WEBPACK_IMPORTED_MODULE_8__.select)(getCartEntriesSelectorFactory(cartId)), (0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.map)(entries => {
      const filteredEntries = entries.filter(entry => entry.product?.code === productCode);
      return filteredEntries ? filteredEntries[filteredEntries.length - 1] : undefined;
    }));
  }
  /**
   * Add entry to cart
   *
   * @param userId
   * @param cartId
   * @param productCode
   * @param quantity
   * @param pickupStore
   */
  addEntry(userId, cartId, productCode, quantity, pickupStore) {
    this.store.dispatch(new CartAddEntry({
      userId,
      cartId,
      productCode,
      quantity,
      pickupStore
    }));
  }
  /**
   * Add multiple entries to cart
   *
   * @param userId
   * @param cartId
   * @param products Array with items (productCode and quantity)
   */
  addEntries(userId, cartId, products) {
    products.forEach(product => {
      this.store.dispatch(new CartAddEntry({
        userId,
        cartId,
        productCode: product.productCode,
        quantity: product.quantity
      }));
    });
  }
  /**
   * Remove entry from cart
   *
   * @param userId
   * @param cartId
   * @param entryNumber
   */
  removeEntry(userId, cartId, entryNumber) {
    this.store.dispatch(new CartRemoveEntry({
      userId,
      cartId,
      entryNumber: `${entryNumber}`
    }));
  }
  /**
   * Update entry in cart. For quantity = 0 it removes entry
   *
   * @param userId
   * @param cartId
   * @param entryNumber
   * @param quantity
   * @param pickupStore
   * @param pickupToDelivery
   */
  updateEntry(userId, cartId, entryNumber, quantity, pickupStore, pickupToDelivery = false) {
    if (quantity !== undefined && quantity <= 0) {
      this.removeEntry(userId, cartId, entryNumber);
    } else {
      this.store.dispatch(new CartUpdateEntry({
        userId,
        cartId,
        pickupStore,
        pickupToDelivery,
        entryNumber: `${entryNumber}`,
        quantity: quantity
      }));
    }
  }
  /**
   * Get first entry from cart matching the specified product code
   *
   * @param cartId
   * @param productCode
   */
  getEntry(cartId, productCode) {
    return this.store.pipe((0,_ngrx_store__WEBPACK_IMPORTED_MODULE_8__.select)(getCartEntrySelectorFactory(cartId, productCode)));
  }
  /**
   * Assign email to the cart
   *
   * @param cartId
   * @param userId
   * @param email
   */
  assignEmail(cartId, userId, email) {
    this.store.dispatch(new AddEmailToCart({
      userId,
      cartId,
      email
    }));
  }
  removeCart(cartId) {
    this.store.dispatch(new RemoveCart({
      cartId
    }));
  }
  /**
   * Delete cart
   *
   * @param cartId
   * @param userId
   */
  deleteCart(cartId, userId) {
    this.store.dispatch(new DeleteCart({
      userId,
      cartId
    }));
  }
  /**
   * Reloads the cart with specified id.
   *
   * @param cartId
   * @param extraData
   */
  reloadCart(cartId, extraData) {
    this.userIdService.takeUserId().subscribe(userId => this.store.dispatch(new LoadCart({
      userId,
      cartId,
      extraData
    })));
  }
  /**
   * Get the cart id based on cart type
   *
   * @param cartType
   */
  getCartIdByType(cartType) {
    return this.store.pipe((0,_ngrx_store__WEBPACK_IMPORTED_MODULE_8__.select)(getCartIdByTypeFactory(cartType)), (0,rxjs_operators__WEBPACK_IMPORTED_MODULE_21__.distinctUntilChanged)());
  }
}
MultiCartService.ɵfac = function MultiCartService_Factory(t) {
  return new (t || MultiCartService)(_angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵinject"](_ngrx_store__WEBPACK_IMPORTED_MODULE_8__.Store), _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵinject"](_spartacus_core__WEBPACK_IMPORTED_MODULE_0__.UserIdService));
};
MultiCartService.ɵprov = /* @__PURE__ */_angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵdefineInjectable"]({
  token: MultiCartService,
  factory: MultiCartService.ɵfac
});
(function () {
  (typeof ngDevMode === "undefined" || ngDevMode) && _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵsetClassMetadata"](MultiCartService, [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_1__.Injectable
  }], function () {
    return [{
      type: _ngrx_store__WEBPACK_IMPORTED_MODULE_8__.Store
    }, {
      type: _spartacus_core__WEBPACK_IMPORTED_MODULE_0__.UserIdService
    }];
  }, null);
})();

/*
 * SPDX-FileCopyrightText: 2023 SAP Spartacus team <spartacus-team@sap.com>
 *
 * SPDX-License-Identifier: Apache-2.0
 */
class SelectiveCartService {
  constructor(userProfileFacade, multiCartFacade, baseSiteService, userIdService) {
    this.userProfileFacade = userProfileFacade;
    this.multiCartFacade = multiCartFacade;
    this.baseSiteService = baseSiteService;
    this.userIdService = userIdService;
  }
  /**
   * Initialize the stream when first call this function
   */
  getCart() {
    if (!this.selectiveCart$) {
      this.selectiveCart$ = (0,rxjs__WEBPACK_IMPORTED_MODULE_24__.combineLatest)([this.getSelectiveCartId(), this.userProfileFacade.get(), this.userIdService.getUserId(), this.baseSiteService.getActive()]).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_21__.distinctUntilChanged)(), (0,rxjs_operators__WEBPACK_IMPORTED_MODULE_17__.tap)(([selectiveId, user, userId, activeBaseSite]) => {
        if (!Boolean(selectiveId) && userId !== _spartacus_core__WEBPACK_IMPORTED_MODULE_0__.OCC_USER_ID_ANONYMOUS && user?.customerId) {
          this.multiCartFacade.loadCart({
            userId: userId,
            cartId: `selectivecart${activeBaseSite}${user.customerId}`
          });
        }
      }), (0,rxjs_operators__WEBPACK_IMPORTED_MODULE_13__.filter)(([selectiveId]) => Boolean(selectiveId)), (0,rxjs_operators__WEBPACK_IMPORTED_MODULE_11__.switchMap)(([selectiveId]) => this.multiCartFacade.getCart(selectiveId)), (0,rxjs_operators__WEBPACK_IMPORTED_MODULE_22__.shareReplay)({
        bufferSize: 1,
        refCount: true
      }));
    }
    return this.selectiveCart$;
  }
  getEntries() {
    return this.getSelectiveCartId().pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_11__.switchMap)(selectiveId => this.multiCartFacade.getEntries(selectiveId)));
  }
  isStable() {
    return this.getSelectiveCartId().pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_11__.switchMap)(selectiveId => this.multiCartFacade.isStable(selectiveId)));
  }
  addEntry(productCode, quantity) {
    this.getSelectiveIdWithUserId().subscribe(([selectiveId, userId]) => {
      this.multiCartFacade.addEntry(userId, selectiveId, productCode, quantity);
    });
  }
  removeEntry(entry) {
    this.getSelectiveIdWithUserId().subscribe(([selectiveId, userId]) => {
      this.multiCartFacade.removeEntry(userId, selectiveId, entry.entryNumber);
    });
  }
  updateEntry(entryNumber, quantity) {
    this.getSelectiveIdWithUserId().subscribe(([selectiveId, userId]) => {
      this.multiCartFacade.updateEntry(userId, selectiveId, entryNumber, quantity);
    });
  }
  getEntry(productCode) {
    return this.getSelectiveCartId().pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_11__.switchMap)(selectiveId => this.multiCartFacade.getEntry(selectiveId, productCode)));
  }
  getSelectiveCartId() {
    return this.multiCartFacade.getCartIdByType(_spartacus_cart_base_root__WEBPACK_IMPORTED_MODULE_14__.CartType.SELECTIVE);
  }
  getSelectiveIdWithUserId() {
    return this.getSelectiveCartId().pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_21__.distinctUntilChanged)(), (0,rxjs_operators__WEBPACK_IMPORTED_MODULE_12__.withLatestFrom)(this.userIdService.getUserId()), (0,rxjs_operators__WEBPACK_IMPORTED_MODULE_19__.take)(1));
  }
}
SelectiveCartService.ɵfac = function SelectiveCartService_Factory(t) {
  return new (t || SelectiveCartService)(_angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵinject"](_spartacus_user_profile_root__WEBPACK_IMPORTED_MODULE_29__.UserProfileFacade), _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵinject"](_spartacus_cart_base_root__WEBPACK_IMPORTED_MODULE_14__.MultiCartFacade), _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵinject"](_spartacus_core__WEBPACK_IMPORTED_MODULE_0__.BaseSiteService), _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵinject"](_spartacus_core__WEBPACK_IMPORTED_MODULE_0__.UserIdService));
};
SelectiveCartService.ɵprov = /* @__PURE__ */_angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵdefineInjectable"]({
  token: SelectiveCartService,
  factory: SelectiveCartService.ɵfac
});
(function () {
  (typeof ngDevMode === "undefined" || ngDevMode) && _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵsetClassMetadata"](SelectiveCartService, [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_1__.Injectable
  }], function () {
    return [{
      type: _spartacus_user_profile_root__WEBPACK_IMPORTED_MODULE_29__.UserProfileFacade
    }, {
      type: _spartacus_cart_base_root__WEBPACK_IMPORTED_MODULE_14__.MultiCartFacade
    }, {
      type: _spartacus_core__WEBPACK_IMPORTED_MODULE_0__.BaseSiteService
    }, {
      type: _spartacus_core__WEBPACK_IMPORTED_MODULE_0__.UserIdService
    }];
  }, null);
})();

/*
 * SPDX-FileCopyrightText: 2023 SAP Spartacus team <spartacus-team@sap.com>
 *
 * SPDX-License-Identifier: Apache-2.0
 */
const facadeProviders = [ActiveCartService, {
  provide: _spartacus_cart_base_root__WEBPACK_IMPORTED_MODULE_14__.ActiveCartFacade,
  useExisting: ActiveCartService
}, CartVoucherService, {
  provide: _spartacus_cart_base_root__WEBPACK_IMPORTED_MODULE_14__.CartVoucherFacade,
  useExisting: CartVoucherService
}, MultiCartService, {
  provide: _spartacus_cart_base_root__WEBPACK_IMPORTED_MODULE_14__.MultiCartFacade,
  useExisting: MultiCartService
}, SelectiveCartService, {
  provide: _spartacus_cart_base_root__WEBPACK_IMPORTED_MODULE_14__.SelectiveCartFacade,
  useExisting: SelectiveCartService
}, CartValidationService, {
  provide: _spartacus_cart_base_root__WEBPACK_IMPORTED_MODULE_14__.CartValidationFacade,
  useExisting: CartValidationService
}];
class BadCartRequestHandler extends _spartacus_core__WEBPACK_IMPORTED_MODULE_0__.HttpErrorHandler {
  constructor() {
    super(...arguments);
    this.responseStatus = _spartacus_core__WEBPACK_IMPORTED_MODULE_0__.HttpResponseStatus.BAD_REQUEST;
  }
  getPriority() {
    return 0 /* Priority.NORMAL */;
  }

  hasMatch(errorResponse) {
    return super.hasMatch(errorResponse) && this.getErrors(errorResponse).some(isCartError);
  }
  handleError(request, response) {
    this.handleCartNotFoundError(request, response);
    this.handleOtherCartErrors(request, response);
  }
  handleCartNotFoundError(_request, response) {
    this.getErrors(response).filter(e => isCartNotFoundError(e)).forEach(() => {
      this.globalMessageService.add({
        key: 'httpHandlers.cartNotFound'
      }, _spartacus_core__WEBPACK_IMPORTED_MODULE_0__.GlobalMessageType.MSG_TYPE_ERROR);
    });
  }
  handleOtherCartErrors(_request, response) {
    this.getErrors(response).filter(e => e.reason !== 'notFound' || e.subjectType !== 'cart').forEach(error => {
      this.globalMessageService.add(error.message ? error.message : {
        key: 'httpHandlers.otherCartErrors'
      }, _spartacus_core__WEBPACK_IMPORTED_MODULE_0__.GlobalMessageType.MSG_TYPE_ERROR);
    });
  }
  getErrors(response) {
    return (response.error?.errors || []).filter(error => error.type !== 'JaloObjectNoLongerValidError');
  }
}
BadCartRequestHandler.ɵfac = /* @__PURE__ */function () {
  let ɵBadCartRequestHandler_BaseFactory;
  return function BadCartRequestHandler_Factory(t) {
    return (ɵBadCartRequestHandler_BaseFactory || (ɵBadCartRequestHandler_BaseFactory = _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵgetInheritedFactory"](BadCartRequestHandler)))(t || BadCartRequestHandler);
  };
}();
BadCartRequestHandler.ɵprov = /* @__PURE__ */_angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵdefineInjectable"]({
  token: BadCartRequestHandler,
  factory: BadCartRequestHandler.ɵfac,
  providedIn: 'root'
});
(function () {
  (typeof ngDevMode === "undefined" || ngDevMode) && _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵsetClassMetadata"](BadCartRequestHandler, [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_1__.Injectable,
    args: [{
      providedIn: 'root'
    }]
  }], null, null);
})();
class BadVoucherRequestHandler extends _spartacus_core__WEBPACK_IMPORTED_MODULE_0__.HttpErrorHandler {
  constructor() {
    super(...arguments);
    this.responseStatus = _spartacus_core__WEBPACK_IMPORTED_MODULE_0__.HttpResponseStatus.BAD_REQUEST;
  }
  getPriority() {
    return 0 /* Priority.NORMAL */;
  }

  hasMatch(errorResponse) {
    return super.hasMatch(errorResponse) && this.getErrors(errorResponse).some(isVoucherError);
  }
  handleError(request, response) {
    this.handleVoucherExceededError(request, response);
    this.handleVoucherInvalidError(request, response);
  }
  handleVoucherExceededError(_request, response) {
    this.getErrors(response).filter(e => voucherExceededError(e)).forEach(() => {
      this.globalMessageService.add({
        key: 'httpHandlers.voucherExceeded'
      }, _spartacus_core__WEBPACK_IMPORTED_MODULE_0__.GlobalMessageType.MSG_TYPE_ERROR);
    });
  }
  handleVoucherInvalidError(_request, response) {
    this.getErrors(response).filter(e => voucherInvalidError(e)).forEach(() => {
      this.globalMessageService.add({
        key: 'httpHandlers.invalidCodeProvided'
      }, _spartacus_core__WEBPACK_IMPORTED_MODULE_0__.GlobalMessageType.MSG_TYPE_ERROR);
    });
  }
  getErrors(response) {
    return (response.error?.errors || []).filter(error => error.type !== 'JaloObjectNoLongerValidError');
  }
}
BadVoucherRequestHandler.ɵfac = /* @__PURE__ */function () {
  let ɵBadVoucherRequestHandler_BaseFactory;
  return function BadVoucherRequestHandler_Factory(t) {
    return (ɵBadVoucherRequestHandler_BaseFactory || (ɵBadVoucherRequestHandler_BaseFactory = _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵgetInheritedFactory"](BadVoucherRequestHandler)))(t || BadVoucherRequestHandler);
  };
}();
BadVoucherRequestHandler.ɵprov = /* @__PURE__ */_angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵdefineInjectable"]({
  token: BadVoucherRequestHandler,
  factory: BadVoucherRequestHandler.ɵfac,
  providedIn: 'root'
});
(function () {
  (typeof ngDevMode === "undefined" || ngDevMode) && _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵsetClassMetadata"](BadVoucherRequestHandler, [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_1__.Injectable,
    args: [{
      providedIn: 'root'
    }]
  }], null, null);
})();

/*
 * SPDX-FileCopyrightText: 2023 SAP Spartacus team <spartacus-team@sap.com>
 *
 * SPDX-License-Identifier: Apache-2.0
 */
class MultiCartStoreModule {}
MultiCartStoreModule.ɵfac = function MultiCartStoreModule_Factory(t) {
  return new (t || MultiCartStoreModule)();
};
MultiCartStoreModule.ɵmod = /* @__PURE__ */_angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵdefineNgModule"]({
  type: MultiCartStoreModule
});
MultiCartStoreModule.ɵinj = /* @__PURE__ */_angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵdefineInjector"]({
  providers: [multiCartReducerProvider, MultiCartEffectsService],
  imports: [_angular_common__WEBPACK_IMPORTED_MODULE_30__.CommonModule, _spartacus_core__WEBPACK_IMPORTED_MODULE_0__.StateModule, _ngrx_store__WEBPACK_IMPORTED_MODULE_8__.StoreModule.forFeature(MULTI_CART_FEATURE, multiCartReducerToken, {
    metaReducers: multiCartMetaReducers
  }), _ngrx_effects__WEBPACK_IMPORTED_MODULE_2__.EffectsModule.forFeature(effects)]
});
(function () {
  (typeof ngDevMode === "undefined" || ngDevMode) && _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵsetClassMetadata"](MultiCartStoreModule, [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_1__.NgModule,
    args: [{
      imports: [_angular_common__WEBPACK_IMPORTED_MODULE_30__.CommonModule, _spartacus_core__WEBPACK_IMPORTED_MODULE_0__.StateModule, _ngrx_store__WEBPACK_IMPORTED_MODULE_8__.StoreModule.forFeature(MULTI_CART_FEATURE, multiCartReducerToken, {
        metaReducers: multiCartMetaReducers
      }), _ngrx_effects__WEBPACK_IMPORTED_MODULE_2__.EffectsModule.forFeature(effects)],
      providers: [multiCartReducerProvider, MultiCartEffectsService]
    }]
  }], null, null);
})();

/*
 * SPDX-FileCopyrightText: 2023 SAP Spartacus team <spartacus-team@sap.com>
 *
 * SPDX-License-Identifier: Apache-2.0
 */
class CartBaseCoreModule {}
CartBaseCoreModule.ɵfac = function CartBaseCoreModule_Factory(t) {
  return new (t || CartBaseCoreModule)();
};
CartBaseCoreModule.ɵmod = /* @__PURE__ */_angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵdefineNgModule"]({
  type: CartBaseCoreModule
});
CartBaseCoreModule.ɵinj = /* @__PURE__ */_angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵdefineInjector"]({
  providers: [CartConnector, CartEntryConnector, CartVoucherConnector, CartValidationConnector, ...facadeProviders, {
    provide: _spartacus_core__WEBPACK_IMPORTED_MODULE_0__.HttpErrorHandler,
    useExisting: BadCartRequestHandler,
    multi: true
  }, {
    provide: _spartacus_core__WEBPACK_IMPORTED_MODULE_0__.HttpErrorHandler,
    useExisting: BadVoucherRequestHandler,
    multi: true
  }],
  imports: [CartEventModule, MultiCartStoreModule, CartPersistenceModule, CartPageEventModule]
});
(function () {
  (typeof ngDevMode === "undefined" || ngDevMode) && _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵsetClassMetadata"](CartBaseCoreModule, [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_1__.NgModule,
    args: [{
      imports: [CartEventModule, MultiCartStoreModule, CartPersistenceModule, CartPageEventModule],
      providers: [CartConnector, CartEntryConnector, CartVoucherConnector, CartValidationConnector, ...facadeProviders, {
        provide: _spartacus_core__WEBPACK_IMPORTED_MODULE_0__.HttpErrorHandler,
        useExisting: BadCartRequestHandler,
        multi: true
      }, {
        provide: _spartacus_core__WEBPACK_IMPORTED_MODULE_0__.HttpErrorHandler,
        useExisting: BadVoucherRequestHandler,
        multi: true
      }]
    }]
  }], null, null);
})();

/*
 * SPDX-FileCopyrightText: 2023 SAP Spartacus team <spartacus-team@sap.com>
 *
 * SPDX-License-Identifier: Apache-2.0
 */

/*
 * SPDX-FileCopyrightText: 2023 SAP Spartacus team <spartacus-team@sap.com>
 *
 * SPDX-License-Identifier: Apache-2.0
 */

/*
 * SPDX-FileCopyrightText: 2023 SAP Spartacus team <spartacus-team@sap.com>
 *
 * SPDX-License-Identifier: Apache-2.0
 */
const CART_VALIDATION_NORMALIZER = new _angular_core__WEBPACK_IMPORTED_MODULE_1__.InjectionToken('CartValidationNormalizer');

/*
 * SPDX-FileCopyrightText: 2023 SAP Spartacus team <spartacus-team@sap.com>
 *
 * SPDX-License-Identifier: Apache-2.0
 */

/*
 * SPDX-FileCopyrightText: 2023 SAP Spartacus team <spartacus-team@sap.com>
 *
 * SPDX-License-Identifier: Apache-2.0
 */

/*
 * SPDX-FileCopyrightText: 2023 SAP Spartacus team <spartacus-team@sap.com>
 *
 * SPDX-License-Identifier: Apache-2.0
 */

/*
 * SPDX-FileCopyrightText: 2023 SAP Spartacus team <spartacus-team@sap.com>
 *
 * SPDX-License-Identifier: Apache-2.0
 */

/*
 * SPDX-FileCopyrightText: 2023 SAP Spartacus team <spartacus-team@sap.com>
 *
 * SPDX-License-Identifier: Apache-2.0
 */

/*
 * SPDX-FileCopyrightText: 2023 SAP Spartacus team <spartacus-team@sap.com>
 *
 * SPDX-License-Identifier: Apache-2.0
 */
class CartConfigService {
  constructor(config) {
    this.config = config;
  }
  isSelectiveCartEnabled() {
    return Boolean(this.config?.cart?.selectiveCart?.enabled);
  }
  isCartValidationEnabled() {
    return Boolean(this.config?.cart?.validation?.enabled);
  }
}
CartConfigService.ɵfac = function CartConfigService_Factory(t) {
  return new (t || CartConfigService)(_angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵinject"](_spartacus_cart_base_root__WEBPACK_IMPORTED_MODULE_14__.CartConfig));
};
CartConfigService.ɵprov = /* @__PURE__ */_angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵdefineInjectable"]({
  token: CartConfigService,
  factory: CartConfigService.ɵfac,
  providedIn: 'root'
});
(function () {
  (typeof ngDevMode === "undefined" || ngDevMode) && _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵsetClassMetadata"](CartConfigService, [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_1__.Injectable,
    args: [{
      providedIn: 'root'
    }]
  }], function () {
    return [{
      type: _spartacus_cart_base_root__WEBPACK_IMPORTED_MODULE_14__.CartConfig
    }];
  }, null);
})();

/*
 * SPDX-FileCopyrightText: 2023 SAP Spartacus team <spartacus-team@sap.com>
 *
 * SPDX-License-Identifier: Apache-2.0
 */
class CartValidationGuard {
  constructor(cartValidationService, semanticPathService, router, globalMessageService, activeCartService, cartValidationStateService, cartConfigService) {
    this.cartValidationService = cartValidationService;
    this.semanticPathService = semanticPathService;
    this.router = router;
    this.globalMessageService = globalMessageService;
    this.activeCartService = activeCartService;
    this.cartValidationStateService = cartValidationStateService;
    this.cartConfigService = cartConfigService;
    this.GLOBAL_MESSAGE_TIMEOUT = 10000;
  }
  canActivate() {
    return !this.cartConfigService.isCartValidationEnabled() ? (0,rxjs__WEBPACK_IMPORTED_MODULE_9__.of)(true) : this.cartValidationService.validateCart().pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_12__.withLatestFrom)(this.activeCartService.getEntries()), (0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.map)(([cartModificationList, cartEntries]) => {
      this.cartValidationStateService.updateValidationResultAndRoutingId(cartModificationList.cartModifications ?? []);
      if (cartModificationList.cartModifications !== undefined && cartModificationList.cartModifications.length !== 0) {
        let validationResultMessage;
        const modification = cartModificationList.cartModifications[0];
        if (cartEntries.length === 1 && cartEntries[0].product?.code === modification.entry?.product?.code && modification.statusCode === _spartacus_cart_base_root__WEBPACK_IMPORTED_MODULE_14__.CartValidationStatusCode.NO_STOCK) {
          validationResultMessage = {
            key: 'validation.cartEntryRemoved',
            params: {
              name: modification.entry?.product?.name
            }
          };
        } else {
          validationResultMessage = {
            key: 'validation.cartEntriesChangeDuringCheckout'
          };
        }
        this.globalMessageService.add(validationResultMessage, _spartacus_core__WEBPACK_IMPORTED_MODULE_0__.GlobalMessageType.MSG_TYPE_ERROR, this.GLOBAL_MESSAGE_TIMEOUT);
        this.activeCartService.reloadActiveCart();
        return this.router.parseUrl(this.semanticPathService.get('cart') ?? '');
      }
      return true;
    }));
  }
}
CartValidationGuard.ɵfac = function CartValidationGuard_Factory(t) {
  return new (t || CartValidationGuard)(_angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵinject"](_spartacus_cart_base_root__WEBPACK_IMPORTED_MODULE_14__.CartValidationFacade), _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵinject"](_spartacus_core__WEBPACK_IMPORTED_MODULE_0__.SemanticPathService), _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵinject"](_angular_router__WEBPACK_IMPORTED_MODULE_31__.Router), _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵinject"](_spartacus_core__WEBPACK_IMPORTED_MODULE_0__.GlobalMessageService), _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵinject"](_spartacus_cart_base_root__WEBPACK_IMPORTED_MODULE_14__.ActiveCartFacade), _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵinject"](CartValidationStateService), _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵinject"](CartConfigService));
};
CartValidationGuard.ɵprov = /* @__PURE__ */_angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵdefineInjectable"]({
  token: CartValidationGuard,
  factory: CartValidationGuard.ɵfac,
  providedIn: 'root'
});
(function () {
  (typeof ngDevMode === "undefined" || ngDevMode) && _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵsetClassMetadata"](CartValidationGuard, [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_1__.Injectable,
    args: [{
      providedIn: 'root'
    }]
  }], function () {
    return [{
      type: _spartacus_cart_base_root__WEBPACK_IMPORTED_MODULE_14__.CartValidationFacade
    }, {
      type: _spartacus_core__WEBPACK_IMPORTED_MODULE_0__.SemanticPathService
    }, {
      type: _angular_router__WEBPACK_IMPORTED_MODULE_31__.Router
    }, {
      type: _spartacus_core__WEBPACK_IMPORTED_MODULE_0__.GlobalMessageService
    }, {
      type: _spartacus_cart_base_root__WEBPACK_IMPORTED_MODULE_14__.ActiveCartFacade
    }, {
      type: CartValidationStateService
    }, {
      type: CartConfigService
    }];
  }, null);
})();

/*
 * SPDX-FileCopyrightText: 2023 SAP Spartacus team <spartacus-team@sap.com>
 *
 * SPDX-License-Identifier: Apache-2.0
 */

/*
 * SPDX-FileCopyrightText: 2023 SAP Spartacus team <spartacus-team@sap.com>
 *
 * SPDX-License-Identifier: Apache-2.0
 */
class ProductImportInfoService {
  constructor(actionsSubject) {
    this.actionsSubject = actionsSubject;
    this.logger = (0,_angular_core__WEBPACK_IMPORTED_MODULE_1__.inject)(_spartacus_core__WEBPACK_IMPORTED_MODULE_0__.LoggerService);
  }
  /**
   * Get emission of add entry results from actions subject
   *
   * @param {string} cartId
   * @returns {Observable<ProductImportInfo>}
   */
  getResults(cartId) {
    return this.actionsSubject.pipe((0,_ngrx_effects__WEBPACK_IMPORTED_MODULE_2__.ofType)(CART_ADD_ENTRY_SUCCESS, CART_ADD_ENTRY_FAIL), (0,rxjs_operators__WEBPACK_IMPORTED_MODULE_13__.filter)(action => action.payload.cartId === cartId), (0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.map)(action => this.mapMessages(action)));
  }
  /**
   * Map actions to summary messages
   *
   * @param {CartActions.CartAddEntrySuccess | CartActions.CartAddEntryFail} action
   * @returns ProductImportInfo
   */
  mapMessages(action) {
    const {
      productCode
    } = action.payload;
    if (action instanceof CartAddEntrySuccess) {
      const {
        quantity,
        quantityAdded,
        entry,
        statusCode
      } = action.payload;
      if (statusCode === _spartacus_cart_base_root__WEBPACK_IMPORTED_MODULE_14__.ProductImportStatus.LOW_STOCK) {
        return {
          productCode,
          statusCode,
          productName: entry?.product?.name,
          quantity,
          quantityAdded
        };
      }
      if (statusCode === _spartacus_cart_base_root__WEBPACK_IMPORTED_MODULE_14__.ProductImportStatus.SUCCESS || statusCode === _spartacus_cart_base_root__WEBPACK_IMPORTED_MODULE_14__.ProductImportStatus.NO_STOCK) {
        return {
          productCode,
          statusCode,
          productName: entry?.product?.name
        };
      }
    } else if (action instanceof CartAddEntryFail) {
      const {
        error
      } = action.payload;
      if (error?.details[0]?.type === 'UnknownIdentifierError') {
        return {
          productCode,
          statusCode: _spartacus_cart_base_root__WEBPACK_IMPORTED_MODULE_14__.ProductImportStatus.UNKNOWN_IDENTIFIER
        };
      }
    }
    if ((0,_angular_core__WEBPACK_IMPORTED_MODULE_1__.isDevMode)()) {
      this.logger.warn('Unrecognized cart add entry action type while mapping messages', action);
    }
    return {
      productCode,
      statusCode: _spartacus_cart_base_root__WEBPACK_IMPORTED_MODULE_14__.ProductImportStatus.UNKNOWN_ERROR
    };
  }
}
ProductImportInfoService.ɵfac = function ProductImportInfoService_Factory(t) {
  return new (t || ProductImportInfoService)(_angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵinject"](_ngrx_store__WEBPACK_IMPORTED_MODULE_8__.ActionsSubject));
};
ProductImportInfoService.ɵprov = /* @__PURE__ */_angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵdefineInjectable"]({
  token: ProductImportInfoService,
  factory: ProductImportInfoService.ɵfac,
  providedIn: 'root'
});
(function () {
  (typeof ngDevMode === "undefined" || ngDevMode) && _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵsetClassMetadata"](ProductImportInfoService, [{
    type: _angular_core__WEBPACK_IMPORTED_MODULE_1__.Injectable,
    args: [{
      providedIn: 'root'
    }]
  }], function () {
    return [{
      type: _ngrx_store__WEBPACK_IMPORTED_MODULE_8__.ActionsSubject
    }];
  }, null);
})();

/*
 * SPDX-FileCopyrightText: 2023 SAP Spartacus team <spartacus-team@sap.com>
 *
 * SPDX-License-Identifier: Apache-2.0
 */

/*
 * SPDX-FileCopyrightText: 2023 SAP Spartacus team <spartacus-team@sap.com>
 *
 * SPDX-License-Identifier: Apache-2.0
 */

/**
 * Generated bundle index. Do not edit.
 */



/***/ })

}]);
//# sourceMappingURL=default-node_modules_spartacus_cart_fesm2020_spartacus-cart-base-core_mjs.js.map